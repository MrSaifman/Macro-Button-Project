
Main-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800bd08  0800bd08  0001bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf00  0800bf00  000201c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf00  0800bf00  000201c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf00  0800bf00  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf00  0800bf00  0001bf00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf04  0800bf04  0001bf04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  0800bf08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a7c  200001c0  0800c0c8  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c3c  0800c0c8  00020c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015694  00000000  00000000  0002022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c62  00000000  00000000  000358bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00039528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee3  00000000  00000000  0003a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000142af  00000000  00000000  0003b77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b276  00000000  00000000  0004fa2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006b568  00000000  00000000  0006aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004884  00000000  00000000  000d6208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000daa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c0 	.word	0x200001c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bcf0 	.word	0x0800bcf0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001c4 	.word	0x200001c4
 8000104:	0800bcf0 	.word	0x0800bcf0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb59 	bl	8000ab4 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fae5 	bl	80009dc <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb4b 	bl	8000ab4 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb41 	bl	8000ab4 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 faf1 	bl	8000a28 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fae7 	bl	8000a28 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fadd>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	4647      	mov	r7, r8
 800046c:	46ce      	mov	lr, r9
 800046e:	024a      	lsls	r2, r1, #9
 8000470:	0243      	lsls	r3, r0, #9
 8000472:	0045      	lsls	r5, r0, #1
 8000474:	0fc4      	lsrs	r4, r0, #31
 8000476:	0a50      	lsrs	r0, r2, #9
 8000478:	4680      	mov	r8, r0
 800047a:	0048      	lsls	r0, r1, #1
 800047c:	0a5b      	lsrs	r3, r3, #9
 800047e:	0e00      	lsrs	r0, r0, #24
 8000480:	0992      	lsrs	r2, r2, #6
 8000482:	4694      	mov	ip, r2
 8000484:	b580      	push	{r7, lr}
 8000486:	001e      	movs	r6, r3
 8000488:	4681      	mov	r9, r0
 800048a:	0002      	movs	r2, r0
 800048c:	0e2d      	lsrs	r5, r5, #24
 800048e:	00df      	lsls	r7, r3, #3
 8000490:	0fc9      	lsrs	r1, r1, #31
 8000492:	428c      	cmp	r4, r1
 8000494:	d024      	beq.n	80004e0 <__aeabi_fadd+0x78>
 8000496:	1a28      	subs	r0, r5, r0
 8000498:	2800      	cmp	r0, #0
 800049a:	dd0e      	ble.n	80004ba <__aeabi_fadd+0x52>
 800049c:	2a00      	cmp	r2, #0
 800049e:	d13e      	bne.n	800051e <__aeabi_fadd+0xb6>
 80004a0:	4662      	mov	r2, ip
 80004a2:	2a00      	cmp	r2, #0
 80004a4:	d100      	bne.n	80004a8 <__aeabi_fadd+0x40>
 80004a6:	e0fd      	b.n	80006a4 <__aeabi_fadd+0x23c>
 80004a8:	1e42      	subs	r2, r0, #1
 80004aa:	2801      	cmp	r0, #1
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fadd+0x48>
 80004ae:	e137      	b.n	8000720 <__aeabi_fadd+0x2b8>
 80004b0:	28ff      	cmp	r0, #255	; 0xff
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fadd+0x4e>
 80004b4:	e0a9      	b.n	800060a <__aeabi_fadd+0x1a2>
 80004b6:	0010      	movs	r0, r2
 80004b8:	e039      	b.n	800052e <__aeabi_fadd+0xc6>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d063      	beq.n	8000586 <__aeabi_fadd+0x11e>
 80004be:	464b      	mov	r3, r9
 80004c0:	1b52      	subs	r2, r2, r5
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d000      	beq.n	80004c8 <__aeabi_fadd+0x60>
 80004c6:	e0e0      	b.n	800068a <__aeabi_fadd+0x222>
 80004c8:	2f00      	cmp	r7, #0
 80004ca:	d100      	bne.n	80004ce <__aeabi_fadd+0x66>
 80004cc:	e0ce      	b.n	800066c <__aeabi_fadd+0x204>
 80004ce:	1e53      	subs	r3, r2, #1
 80004d0:	2a01      	cmp	r2, #1
 80004d2:	d100      	bne.n	80004d6 <__aeabi_fadd+0x6e>
 80004d4:	e155      	b.n	8000782 <__aeabi_fadd+0x31a>
 80004d6:	2aff      	cmp	r2, #255	; 0xff
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x74>
 80004da:	e094      	b.n	8000606 <__aeabi_fadd+0x19e>
 80004dc:	001a      	movs	r2, r3
 80004de:	e0d9      	b.n	8000694 <__aeabi_fadd+0x22c>
 80004e0:	1a2a      	subs	r2, r5, r0
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	dc00      	bgt.n	80004e8 <__aeabi_fadd+0x80>
 80004e6:	e099      	b.n	800061c <__aeabi_fadd+0x1b4>
 80004e8:	2800      	cmp	r0, #0
 80004ea:	d062      	beq.n	80005b2 <__aeabi_fadd+0x14a>
 80004ec:	2dff      	cmp	r5, #255	; 0xff
 80004ee:	d100      	bne.n	80004f2 <__aeabi_fadd+0x8a>
 80004f0:	e08b      	b.n	800060a <__aeabi_fadd+0x1a2>
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	4661      	mov	r1, ip
 80004f6:	04db      	lsls	r3, r3, #19
 80004f8:	4319      	orrs	r1, r3
 80004fa:	468c      	mov	ip, r1
 80004fc:	2a1b      	cmp	r2, #27
 80004fe:	dc00      	bgt.n	8000502 <__aeabi_fadd+0x9a>
 8000500:	e0d2      	b.n	80006a8 <__aeabi_fadd+0x240>
 8000502:	2301      	movs	r3, #1
 8000504:	19db      	adds	r3, r3, r7
 8000506:	015a      	lsls	r2, r3, #5
 8000508:	d56a      	bpl.n	80005e0 <__aeabi_fadd+0x178>
 800050a:	3501      	adds	r5, #1
 800050c:	2dff      	cmp	r5, #255	; 0xff
 800050e:	d05b      	beq.n	80005c8 <__aeabi_fadd+0x160>
 8000510:	2201      	movs	r2, #1
 8000512:	49a3      	ldr	r1, [pc, #652]	; (80007a0 <__aeabi_fadd+0x338>)
 8000514:	401a      	ands	r2, r3
 8000516:	085b      	lsrs	r3, r3, #1
 8000518:	400b      	ands	r3, r1
 800051a:	4313      	orrs	r3, r2
 800051c:	e01c      	b.n	8000558 <__aeabi_fadd+0xf0>
 800051e:	2dff      	cmp	r5, #255	; 0xff
 8000520:	d100      	bne.n	8000524 <__aeabi_fadd+0xbc>
 8000522:	e072      	b.n	800060a <__aeabi_fadd+0x1a2>
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	4662      	mov	r2, ip
 8000528:	04db      	lsls	r3, r3, #19
 800052a:	431a      	orrs	r2, r3
 800052c:	4694      	mov	ip, r2
 800052e:	281b      	cmp	r0, #27
 8000530:	dc00      	bgt.n	8000534 <__aeabi_fadd+0xcc>
 8000532:	e090      	b.n	8000656 <__aeabi_fadd+0x1ee>
 8000534:	2301      	movs	r3, #1
 8000536:	1afb      	subs	r3, r7, r3
 8000538:	015a      	lsls	r2, r3, #5
 800053a:	d551      	bpl.n	80005e0 <__aeabi_fadd+0x178>
 800053c:	019b      	lsls	r3, r3, #6
 800053e:	099e      	lsrs	r6, r3, #6
 8000540:	0030      	movs	r0, r6
 8000542:	f000 fe71 	bl	8001228 <__clzsi2>
 8000546:	0033      	movs	r3, r6
 8000548:	3805      	subs	r0, #5
 800054a:	4083      	lsls	r3, r0
 800054c:	4285      	cmp	r5, r0
 800054e:	dc00      	bgt.n	8000552 <__aeabi_fadd+0xea>
 8000550:	e075      	b.n	800063e <__aeabi_fadd+0x1d6>
 8000552:	4a94      	ldr	r2, [pc, #592]	; (80007a4 <__aeabi_fadd+0x33c>)
 8000554:	1a2d      	subs	r5, r5, r0
 8000556:	4013      	ands	r3, r2
 8000558:	075a      	lsls	r2, r3, #29
 800055a:	d004      	beq.n	8000566 <__aeabi_fadd+0xfe>
 800055c:	220f      	movs	r2, #15
 800055e:	401a      	ands	r2, r3
 8000560:	2a04      	cmp	r2, #4
 8000562:	d000      	beq.n	8000566 <__aeabi_fadd+0xfe>
 8000564:	3304      	adds	r3, #4
 8000566:	015a      	lsls	r2, r3, #5
 8000568:	d53c      	bpl.n	80005e4 <__aeabi_fadd+0x17c>
 800056a:	1c68      	adds	r0, r5, #1
 800056c:	2dfe      	cmp	r5, #254	; 0xfe
 800056e:	d02b      	beq.n	80005c8 <__aeabi_fadd+0x160>
 8000570:	019b      	lsls	r3, r3, #6
 8000572:	0a5e      	lsrs	r6, r3, #9
 8000574:	b2c0      	uxtb	r0, r0
 8000576:	05c0      	lsls	r0, r0, #23
 8000578:	4330      	orrs	r0, r6
 800057a:	07e4      	lsls	r4, r4, #31
 800057c:	4320      	orrs	r0, r4
 800057e:	bcc0      	pop	{r6, r7}
 8000580:	46b9      	mov	r9, r7
 8000582:	46b0      	mov	r8, r6
 8000584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000586:	20fe      	movs	r0, #254	; 0xfe
 8000588:	1c6a      	adds	r2, r5, #1
 800058a:	4210      	tst	r0, r2
 800058c:	d172      	bne.n	8000674 <__aeabi_fadd+0x20c>
 800058e:	2d00      	cmp	r5, #0
 8000590:	d000      	beq.n	8000594 <__aeabi_fadd+0x12c>
 8000592:	e0ae      	b.n	80006f2 <__aeabi_fadd+0x28a>
 8000594:	2f00      	cmp	r7, #0
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x132>
 8000598:	e0ec      	b.n	8000774 <__aeabi_fadd+0x30c>
 800059a:	4663      	mov	r3, ip
 800059c:	2000      	movs	r0, #0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0e9      	beq.n	8000576 <__aeabi_fadd+0x10e>
 80005a2:	1afb      	subs	r3, r7, r3
 80005a4:	015a      	lsls	r2, r3, #5
 80005a6:	d400      	bmi.n	80005aa <__aeabi_fadd+0x142>
 80005a8:	e0f3      	b.n	8000792 <__aeabi_fadd+0x32a>
 80005aa:	4663      	mov	r3, ip
 80005ac:	000c      	movs	r4, r1
 80005ae:	1bdb      	subs	r3, r3, r7
 80005b0:	e7d2      	b.n	8000558 <__aeabi_fadd+0xf0>
 80005b2:	4661      	mov	r1, ip
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d05b      	beq.n	8000670 <__aeabi_fadd+0x208>
 80005b8:	1e51      	subs	r1, r2, #1
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fadd+0x158>
 80005be:	e0a7      	b.n	8000710 <__aeabi_fadd+0x2a8>
 80005c0:	2aff      	cmp	r2, #255	; 0xff
 80005c2:	d022      	beq.n	800060a <__aeabi_fadd+0x1a2>
 80005c4:	000a      	movs	r2, r1
 80005c6:	e799      	b.n	80004fc <__aeabi_fadd+0x94>
 80005c8:	20ff      	movs	r0, #255	; 0xff
 80005ca:	2600      	movs	r6, #0
 80005cc:	e7d3      	b.n	8000576 <__aeabi_fadd+0x10e>
 80005ce:	21fe      	movs	r1, #254	; 0xfe
 80005d0:	1c6a      	adds	r2, r5, #1
 80005d2:	4211      	tst	r1, r2
 80005d4:	d073      	beq.n	80006be <__aeabi_fadd+0x256>
 80005d6:	2aff      	cmp	r2, #255	; 0xff
 80005d8:	d0f6      	beq.n	80005c8 <__aeabi_fadd+0x160>
 80005da:	0015      	movs	r5, r2
 80005dc:	4467      	add	r7, ip
 80005de:	087b      	lsrs	r3, r7, #1
 80005e0:	075a      	lsls	r2, r3, #29
 80005e2:	d1bb      	bne.n	800055c <__aeabi_fadd+0xf4>
 80005e4:	08db      	lsrs	r3, r3, #3
 80005e6:	2dff      	cmp	r5, #255	; 0xff
 80005e8:	d00f      	beq.n	800060a <__aeabi_fadd+0x1a2>
 80005ea:	025b      	lsls	r3, r3, #9
 80005ec:	0a5e      	lsrs	r6, r3, #9
 80005ee:	b2e8      	uxtb	r0, r5
 80005f0:	e7c1      	b.n	8000576 <__aeabi_fadd+0x10e>
 80005f2:	4662      	mov	r2, ip
 80005f4:	2a00      	cmp	r2, #0
 80005f6:	d008      	beq.n	800060a <__aeabi_fadd+0x1a2>
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	03d2      	lsls	r2, r2, #15
 80005fc:	4213      	tst	r3, r2
 80005fe:	d004      	beq.n	800060a <__aeabi_fadd+0x1a2>
 8000600:	4640      	mov	r0, r8
 8000602:	4210      	tst	r0, r2
 8000604:	d101      	bne.n	800060a <__aeabi_fadd+0x1a2>
 8000606:	000c      	movs	r4, r1
 8000608:	4643      	mov	r3, r8
 800060a:	2b00      	cmp	r3, #0
 800060c:	d0dc      	beq.n	80005c8 <__aeabi_fadd+0x160>
 800060e:	2680      	movs	r6, #128	; 0x80
 8000610:	03f6      	lsls	r6, r6, #15
 8000612:	431e      	orrs	r6, r3
 8000614:	0276      	lsls	r6, r6, #9
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	0a76      	lsrs	r6, r6, #9
 800061a:	e7ac      	b.n	8000576 <__aeabi_fadd+0x10e>
 800061c:	2a00      	cmp	r2, #0
 800061e:	d0d6      	beq.n	80005ce <__aeabi_fadd+0x166>
 8000620:	1b42      	subs	r2, r0, r5
 8000622:	2d00      	cmp	r5, #0
 8000624:	d05c      	beq.n	80006e0 <__aeabi_fadd+0x278>
 8000626:	28ff      	cmp	r0, #255	; 0xff
 8000628:	d0ee      	beq.n	8000608 <__aeabi_fadd+0x1a0>
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	04db      	lsls	r3, r3, #19
 800062e:	431f      	orrs	r7, r3
 8000630:	2a1b      	cmp	r2, #27
 8000632:	dc00      	bgt.n	8000636 <__aeabi_fadd+0x1ce>
 8000634:	e082      	b.n	800073c <__aeabi_fadd+0x2d4>
 8000636:	2301      	movs	r3, #1
 8000638:	464d      	mov	r5, r9
 800063a:	4463      	add	r3, ip
 800063c:	e763      	b.n	8000506 <__aeabi_fadd+0x9e>
 800063e:	2220      	movs	r2, #32
 8000640:	1b40      	subs	r0, r0, r5
 8000642:	3001      	adds	r0, #1
 8000644:	1a12      	subs	r2, r2, r0
 8000646:	0019      	movs	r1, r3
 8000648:	4093      	lsls	r3, r2
 800064a:	40c1      	lsrs	r1, r0
 800064c:	1e5a      	subs	r2, r3, #1
 800064e:	4193      	sbcs	r3, r2
 8000650:	2500      	movs	r5, #0
 8000652:	430b      	orrs	r3, r1
 8000654:	e780      	b.n	8000558 <__aeabi_fadd+0xf0>
 8000656:	2320      	movs	r3, #32
 8000658:	4661      	mov	r1, ip
 800065a:	1a1b      	subs	r3, r3, r0
 800065c:	4099      	lsls	r1, r3
 800065e:	4662      	mov	r2, ip
 8000660:	000b      	movs	r3, r1
 8000662:	40c2      	lsrs	r2, r0
 8000664:	1e59      	subs	r1, r3, #1
 8000666:	418b      	sbcs	r3, r1
 8000668:	4313      	orrs	r3, r2
 800066a:	e764      	b.n	8000536 <__aeabi_fadd+0xce>
 800066c:	000c      	movs	r4, r1
 800066e:	4643      	mov	r3, r8
 8000670:	0015      	movs	r5, r2
 8000672:	e7b8      	b.n	80005e6 <__aeabi_fadd+0x17e>
 8000674:	4663      	mov	r3, ip
 8000676:	1afe      	subs	r6, r7, r3
 8000678:	0173      	lsls	r3, r6, #5
 800067a:	d445      	bmi.n	8000708 <__aeabi_fadd+0x2a0>
 800067c:	2e00      	cmp	r6, #0
 800067e:	d000      	beq.n	8000682 <__aeabi_fadd+0x21a>
 8000680:	e75e      	b.n	8000540 <__aeabi_fadd+0xd8>
 8000682:	2400      	movs	r4, #0
 8000684:	2000      	movs	r0, #0
 8000686:	2600      	movs	r6, #0
 8000688:	e775      	b.n	8000576 <__aeabi_fadd+0x10e>
 800068a:	2bff      	cmp	r3, #255	; 0xff
 800068c:	d0bb      	beq.n	8000606 <__aeabi_fadd+0x19e>
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	04db      	lsls	r3, r3, #19
 8000692:	431f      	orrs	r7, r3
 8000694:	2a1b      	cmp	r2, #27
 8000696:	dd47      	ble.n	8000728 <__aeabi_fadd+0x2c0>
 8000698:	2301      	movs	r3, #1
 800069a:	4662      	mov	r2, ip
 800069c:	000c      	movs	r4, r1
 800069e:	464d      	mov	r5, r9
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	e749      	b.n	8000538 <__aeabi_fadd+0xd0>
 80006a4:	0005      	movs	r5, r0
 80006a6:	e79e      	b.n	80005e6 <__aeabi_fadd+0x17e>
 80006a8:	4661      	mov	r1, ip
 80006aa:	2320      	movs	r3, #32
 80006ac:	40d1      	lsrs	r1, r2
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	4662      	mov	r2, ip
 80006b2:	409a      	lsls	r2, r3
 80006b4:	0013      	movs	r3, r2
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	4193      	sbcs	r3, r2
 80006ba:	430b      	orrs	r3, r1
 80006bc:	e722      	b.n	8000504 <__aeabi_fadd+0x9c>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d146      	bne.n	8000750 <__aeabi_fadd+0x2e8>
 80006c2:	2f00      	cmp	r7, #0
 80006c4:	d062      	beq.n	800078c <__aeabi_fadd+0x324>
 80006c6:	4663      	mov	r3, ip
 80006c8:	2000      	movs	r0, #0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fadd+0x268>
 80006ce:	e752      	b.n	8000576 <__aeabi_fadd+0x10e>
 80006d0:	003b      	movs	r3, r7
 80006d2:	4463      	add	r3, ip
 80006d4:	015a      	lsls	r2, r3, #5
 80006d6:	d583      	bpl.n	80005e0 <__aeabi_fadd+0x178>
 80006d8:	4a32      	ldr	r2, [pc, #200]	; (80007a4 <__aeabi_fadd+0x33c>)
 80006da:	3501      	adds	r5, #1
 80006dc:	4013      	ands	r3, r2
 80006de:	e77f      	b.n	80005e0 <__aeabi_fadd+0x178>
 80006e0:	2f00      	cmp	r7, #0
 80006e2:	d0c4      	beq.n	800066e <__aeabi_fadd+0x206>
 80006e4:	1e53      	subs	r3, r2, #1
 80006e6:	2a01      	cmp	r2, #1
 80006e8:	d012      	beq.n	8000710 <__aeabi_fadd+0x2a8>
 80006ea:	2aff      	cmp	r2, #255	; 0xff
 80006ec:	d08c      	beq.n	8000608 <__aeabi_fadd+0x1a0>
 80006ee:	001a      	movs	r2, r3
 80006f0:	e79e      	b.n	8000630 <__aeabi_fadd+0x1c8>
 80006f2:	2f00      	cmp	r7, #0
 80006f4:	d000      	beq.n	80006f8 <__aeabi_fadd+0x290>
 80006f6:	e77c      	b.n	80005f2 <__aeabi_fadd+0x18a>
 80006f8:	4663      	mov	r3, ip
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d183      	bne.n	8000606 <__aeabi_fadd+0x19e>
 80006fe:	2680      	movs	r6, #128	; 0x80
 8000700:	2400      	movs	r4, #0
 8000702:	20ff      	movs	r0, #255	; 0xff
 8000704:	03f6      	lsls	r6, r6, #15
 8000706:	e736      	b.n	8000576 <__aeabi_fadd+0x10e>
 8000708:	4663      	mov	r3, ip
 800070a:	000c      	movs	r4, r1
 800070c:	1bde      	subs	r6, r3, r7
 800070e:	e717      	b.n	8000540 <__aeabi_fadd+0xd8>
 8000710:	003b      	movs	r3, r7
 8000712:	4463      	add	r3, ip
 8000714:	2501      	movs	r5, #1
 8000716:	015a      	lsls	r2, r3, #5
 8000718:	d400      	bmi.n	800071c <__aeabi_fadd+0x2b4>
 800071a:	e761      	b.n	80005e0 <__aeabi_fadd+0x178>
 800071c:	2502      	movs	r5, #2
 800071e:	e6f7      	b.n	8000510 <__aeabi_fadd+0xa8>
 8000720:	4663      	mov	r3, ip
 8000722:	2501      	movs	r5, #1
 8000724:	1afb      	subs	r3, r7, r3
 8000726:	e707      	b.n	8000538 <__aeabi_fadd+0xd0>
 8000728:	2320      	movs	r3, #32
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	0038      	movs	r0, r7
 800072e:	409f      	lsls	r7, r3
 8000730:	003b      	movs	r3, r7
 8000732:	40d0      	lsrs	r0, r2
 8000734:	1e5a      	subs	r2, r3, #1
 8000736:	4193      	sbcs	r3, r2
 8000738:	4303      	orrs	r3, r0
 800073a:	e7ae      	b.n	800069a <__aeabi_fadd+0x232>
 800073c:	2320      	movs	r3, #32
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	0039      	movs	r1, r7
 8000742:	409f      	lsls	r7, r3
 8000744:	003b      	movs	r3, r7
 8000746:	40d1      	lsrs	r1, r2
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	4193      	sbcs	r3, r2
 800074c:	430b      	orrs	r3, r1
 800074e:	e773      	b.n	8000638 <__aeabi_fadd+0x1d0>
 8000750:	2f00      	cmp	r7, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x2ee>
 8000754:	e758      	b.n	8000608 <__aeabi_fadd+0x1a0>
 8000756:	4662      	mov	r2, ip
 8000758:	2a00      	cmp	r2, #0
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x2f6>
 800075c:	e755      	b.n	800060a <__aeabi_fadd+0x1a2>
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	03d2      	lsls	r2, r2, #15
 8000762:	4213      	tst	r3, r2
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x300>
 8000766:	e750      	b.n	800060a <__aeabi_fadd+0x1a2>
 8000768:	4641      	mov	r1, r8
 800076a:	4211      	tst	r1, r2
 800076c:	d000      	beq.n	8000770 <__aeabi_fadd+0x308>
 800076e:	e74c      	b.n	800060a <__aeabi_fadd+0x1a2>
 8000770:	4643      	mov	r3, r8
 8000772:	e74a      	b.n	800060a <__aeabi_fadd+0x1a2>
 8000774:	4663      	mov	r3, ip
 8000776:	2b00      	cmp	r3, #0
 8000778:	d083      	beq.n	8000682 <__aeabi_fadd+0x21a>
 800077a:	000c      	movs	r4, r1
 800077c:	4646      	mov	r6, r8
 800077e:	2000      	movs	r0, #0
 8000780:	e6f9      	b.n	8000576 <__aeabi_fadd+0x10e>
 8000782:	4663      	mov	r3, ip
 8000784:	000c      	movs	r4, r1
 8000786:	1bdb      	subs	r3, r3, r7
 8000788:	3501      	adds	r5, #1
 800078a:	e6d5      	b.n	8000538 <__aeabi_fadd+0xd0>
 800078c:	4646      	mov	r6, r8
 800078e:	2000      	movs	r0, #0
 8000790:	e6f1      	b.n	8000576 <__aeabi_fadd+0x10e>
 8000792:	2b00      	cmp	r3, #0
 8000794:	d000      	beq.n	8000798 <__aeabi_fadd+0x330>
 8000796:	e723      	b.n	80005e0 <__aeabi_fadd+0x178>
 8000798:	2400      	movs	r4, #0
 800079a:	2600      	movs	r6, #0
 800079c:	e6eb      	b.n	8000576 <__aeabi_fadd+0x10e>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	7dffffff 	.word	0x7dffffff
 80007a4:	fbffffff 	.word	0xfbffffff

080007a8 <__aeabi_fdiv>:
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	464f      	mov	r7, r9
 80007ac:	4646      	mov	r6, r8
 80007ae:	46d6      	mov	lr, sl
 80007b0:	0245      	lsls	r5, r0, #9
 80007b2:	b5c0      	push	{r6, r7, lr}
 80007b4:	0047      	lsls	r7, r0, #1
 80007b6:	1c0c      	adds	r4, r1, #0
 80007b8:	0a6d      	lsrs	r5, r5, #9
 80007ba:	0e3f      	lsrs	r7, r7, #24
 80007bc:	0fc6      	lsrs	r6, r0, #31
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fdiv+0x1c>
 80007c2:	e06f      	b.n	80008a4 <__aeabi_fdiv+0xfc>
 80007c4:	2fff      	cmp	r7, #255	; 0xff
 80007c6:	d100      	bne.n	80007ca <__aeabi_fdiv+0x22>
 80007c8:	e074      	b.n	80008b4 <__aeabi_fdiv+0x10c>
 80007ca:	2300      	movs	r3, #0
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	4699      	mov	r9, r3
 80007d0:	469a      	mov	sl, r3
 80007d2:	00ed      	lsls	r5, r5, #3
 80007d4:	04d2      	lsls	r2, r2, #19
 80007d6:	4315      	orrs	r5, r2
 80007d8:	3f7f      	subs	r7, #127	; 0x7f
 80007da:	0263      	lsls	r3, r4, #9
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	4698      	mov	r8, r3
 80007e0:	0063      	lsls	r3, r4, #1
 80007e2:	0e1b      	lsrs	r3, r3, #24
 80007e4:	0fe4      	lsrs	r4, r4, #31
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d04d      	beq.n	8000886 <__aeabi_fdiv+0xde>
 80007ea:	2bff      	cmp	r3, #255	; 0xff
 80007ec:	d045      	beq.n	800087a <__aeabi_fdiv+0xd2>
 80007ee:	4642      	mov	r2, r8
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	00d2      	lsls	r2, r2, #3
 80007f4:	04c9      	lsls	r1, r1, #19
 80007f6:	4311      	orrs	r1, r2
 80007f8:	4688      	mov	r8, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	3b7f      	subs	r3, #127	; 0x7f
 80007fe:	0031      	movs	r1, r6
 8000800:	1aff      	subs	r7, r7, r3
 8000802:	464b      	mov	r3, r9
 8000804:	4061      	eors	r1, r4
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d900      	bls.n	800080e <__aeabi_fdiv+0x66>
 800080c:	e0b8      	b.n	8000980 <__aeabi_fdiv+0x1d8>
 800080e:	4870      	ldr	r0, [pc, #448]	; (80009d0 <__aeabi_fdiv+0x228>)
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	58c3      	ldr	r3, [r0, r3]
 8000814:	469f      	mov	pc, r3
 8000816:	2300      	movs	r3, #0
 8000818:	4698      	mov	r8, r3
 800081a:	0026      	movs	r6, r4
 800081c:	4645      	mov	r5, r8
 800081e:	4692      	mov	sl, r2
 8000820:	4653      	mov	r3, sl
 8000822:	2b02      	cmp	r3, #2
 8000824:	d100      	bne.n	8000828 <__aeabi_fdiv+0x80>
 8000826:	e08d      	b.n	8000944 <__aeabi_fdiv+0x19c>
 8000828:	2b03      	cmp	r3, #3
 800082a:	d100      	bne.n	800082e <__aeabi_fdiv+0x86>
 800082c:	e0a1      	b.n	8000972 <__aeabi_fdiv+0x1ca>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d018      	beq.n	8000864 <__aeabi_fdiv+0xbc>
 8000832:	003b      	movs	r3, r7
 8000834:	337f      	adds	r3, #127	; 0x7f
 8000836:	2b00      	cmp	r3, #0
 8000838:	dd6d      	ble.n	8000916 <__aeabi_fdiv+0x16e>
 800083a:	076a      	lsls	r2, r5, #29
 800083c:	d004      	beq.n	8000848 <__aeabi_fdiv+0xa0>
 800083e:	220f      	movs	r2, #15
 8000840:	402a      	ands	r2, r5
 8000842:	2a04      	cmp	r2, #4
 8000844:	d000      	beq.n	8000848 <__aeabi_fdiv+0xa0>
 8000846:	3504      	adds	r5, #4
 8000848:	012a      	lsls	r2, r5, #4
 800084a:	d503      	bpl.n	8000854 <__aeabi_fdiv+0xac>
 800084c:	4b61      	ldr	r3, [pc, #388]	; (80009d4 <__aeabi_fdiv+0x22c>)
 800084e:	401d      	ands	r5, r3
 8000850:	003b      	movs	r3, r7
 8000852:	3380      	adds	r3, #128	; 0x80
 8000854:	2bfe      	cmp	r3, #254	; 0xfe
 8000856:	dd00      	ble.n	800085a <__aeabi_fdiv+0xb2>
 8000858:	e074      	b.n	8000944 <__aeabi_fdiv+0x19c>
 800085a:	01aa      	lsls	r2, r5, #6
 800085c:	0a52      	lsrs	r2, r2, #9
 800085e:	b2d8      	uxtb	r0, r3
 8000860:	e002      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000862:	000e      	movs	r6, r1
 8000864:	2000      	movs	r0, #0
 8000866:	2200      	movs	r2, #0
 8000868:	05c0      	lsls	r0, r0, #23
 800086a:	07f6      	lsls	r6, r6, #31
 800086c:	4310      	orrs	r0, r2
 800086e:	4330      	orrs	r0, r6
 8000870:	bce0      	pop	{r5, r6, r7}
 8000872:	46ba      	mov	sl, r7
 8000874:	46b1      	mov	r9, r6
 8000876:	46a8      	mov	r8, r5
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	4643      	mov	r3, r8
 800087c:	2b00      	cmp	r3, #0
 800087e:	d13f      	bne.n	8000900 <__aeabi_fdiv+0x158>
 8000880:	2202      	movs	r2, #2
 8000882:	3fff      	subs	r7, #255	; 0xff
 8000884:	e003      	b.n	800088e <__aeabi_fdiv+0xe6>
 8000886:	4643      	mov	r3, r8
 8000888:	2b00      	cmp	r3, #0
 800088a:	d12d      	bne.n	80008e8 <__aeabi_fdiv+0x140>
 800088c:	2201      	movs	r2, #1
 800088e:	0031      	movs	r1, r6
 8000890:	464b      	mov	r3, r9
 8000892:	4061      	eors	r1, r4
 8000894:	b2c9      	uxtb	r1, r1
 8000896:	4313      	orrs	r3, r2
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d838      	bhi.n	800090e <__aeabi_fdiv+0x166>
 800089c:	484e      	ldr	r0, [pc, #312]	; (80009d8 <__aeabi_fdiv+0x230>)
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	58c3      	ldr	r3, [r0, r3]
 80008a2:	469f      	mov	pc, r3
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d113      	bne.n	80008d0 <__aeabi_fdiv+0x128>
 80008a8:	2304      	movs	r3, #4
 80008aa:	4699      	mov	r9, r3
 80008ac:	3b03      	subs	r3, #3
 80008ae:	2700      	movs	r7, #0
 80008b0:	469a      	mov	sl, r3
 80008b2:	e792      	b.n	80007da <__aeabi_fdiv+0x32>
 80008b4:	2d00      	cmp	r5, #0
 80008b6:	d105      	bne.n	80008c4 <__aeabi_fdiv+0x11c>
 80008b8:	2308      	movs	r3, #8
 80008ba:	4699      	mov	r9, r3
 80008bc:	3b06      	subs	r3, #6
 80008be:	27ff      	movs	r7, #255	; 0xff
 80008c0:	469a      	mov	sl, r3
 80008c2:	e78a      	b.n	80007da <__aeabi_fdiv+0x32>
 80008c4:	230c      	movs	r3, #12
 80008c6:	4699      	mov	r9, r3
 80008c8:	3b09      	subs	r3, #9
 80008ca:	27ff      	movs	r7, #255	; 0xff
 80008cc:	469a      	mov	sl, r3
 80008ce:	e784      	b.n	80007da <__aeabi_fdiv+0x32>
 80008d0:	0028      	movs	r0, r5
 80008d2:	f000 fca9 	bl	8001228 <__clzsi2>
 80008d6:	2776      	movs	r7, #118	; 0x76
 80008d8:	1f43      	subs	r3, r0, #5
 80008da:	409d      	lsls	r5, r3
 80008dc:	2300      	movs	r3, #0
 80008de:	427f      	negs	r7, r7
 80008e0:	4699      	mov	r9, r3
 80008e2:	469a      	mov	sl, r3
 80008e4:	1a3f      	subs	r7, r7, r0
 80008e6:	e778      	b.n	80007da <__aeabi_fdiv+0x32>
 80008e8:	4640      	mov	r0, r8
 80008ea:	f000 fc9d 	bl	8001228 <__clzsi2>
 80008ee:	4642      	mov	r2, r8
 80008f0:	1f43      	subs	r3, r0, #5
 80008f2:	409a      	lsls	r2, r3
 80008f4:	2376      	movs	r3, #118	; 0x76
 80008f6:	425b      	negs	r3, r3
 80008f8:	4690      	mov	r8, r2
 80008fa:	1a1b      	subs	r3, r3, r0
 80008fc:	2200      	movs	r2, #0
 80008fe:	e77e      	b.n	80007fe <__aeabi_fdiv+0x56>
 8000900:	2303      	movs	r3, #3
 8000902:	464a      	mov	r2, r9
 8000904:	431a      	orrs	r2, r3
 8000906:	4691      	mov	r9, r2
 8000908:	33fc      	adds	r3, #252	; 0xfc
 800090a:	2203      	movs	r2, #3
 800090c:	e777      	b.n	80007fe <__aeabi_fdiv+0x56>
 800090e:	000e      	movs	r6, r1
 8000910:	20ff      	movs	r0, #255	; 0xff
 8000912:	2200      	movs	r2, #0
 8000914:	e7a8      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000916:	2201      	movs	r2, #1
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	2b1b      	cmp	r3, #27
 800091c:	dca2      	bgt.n	8000864 <__aeabi_fdiv+0xbc>
 800091e:	379e      	adds	r7, #158	; 0x9e
 8000920:	002a      	movs	r2, r5
 8000922:	40bd      	lsls	r5, r7
 8000924:	40da      	lsrs	r2, r3
 8000926:	1e6b      	subs	r3, r5, #1
 8000928:	419d      	sbcs	r5, r3
 800092a:	4315      	orrs	r5, r2
 800092c:	076a      	lsls	r2, r5, #29
 800092e:	d004      	beq.n	800093a <__aeabi_fdiv+0x192>
 8000930:	220f      	movs	r2, #15
 8000932:	402a      	ands	r2, r5
 8000934:	2a04      	cmp	r2, #4
 8000936:	d000      	beq.n	800093a <__aeabi_fdiv+0x192>
 8000938:	3504      	adds	r5, #4
 800093a:	016a      	lsls	r2, r5, #5
 800093c:	d544      	bpl.n	80009c8 <__aeabi_fdiv+0x220>
 800093e:	2001      	movs	r0, #1
 8000940:	2200      	movs	r2, #0
 8000942:	e791      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000944:	20ff      	movs	r0, #255	; 0xff
 8000946:	2200      	movs	r2, #0
 8000948:	e78e      	b.n	8000868 <__aeabi_fdiv+0xc0>
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	2600      	movs	r6, #0
 800094e:	20ff      	movs	r0, #255	; 0xff
 8000950:	03d2      	lsls	r2, r2, #15
 8000952:	e789      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000954:	2300      	movs	r3, #0
 8000956:	4698      	mov	r8, r3
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	4215      	tst	r5, r2
 800095e:	d008      	beq.n	8000972 <__aeabi_fdiv+0x1ca>
 8000960:	4643      	mov	r3, r8
 8000962:	4213      	tst	r3, r2
 8000964:	d105      	bne.n	8000972 <__aeabi_fdiv+0x1ca>
 8000966:	431a      	orrs	r2, r3
 8000968:	0252      	lsls	r2, r2, #9
 800096a:	0026      	movs	r6, r4
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	0a52      	lsrs	r2, r2, #9
 8000970:	e77a      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	432a      	orrs	r2, r5
 8000978:	0252      	lsls	r2, r2, #9
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	0a52      	lsrs	r2, r2, #9
 800097e:	e773      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000980:	4642      	mov	r2, r8
 8000982:	016b      	lsls	r3, r5, #5
 8000984:	0155      	lsls	r5, r2, #5
 8000986:	42ab      	cmp	r3, r5
 8000988:	d21a      	bcs.n	80009c0 <__aeabi_fdiv+0x218>
 800098a:	201b      	movs	r0, #27
 800098c:	2200      	movs	r2, #0
 800098e:	3f01      	subs	r7, #1
 8000990:	2601      	movs	r6, #1
 8000992:	001c      	movs	r4, r3
 8000994:	0052      	lsls	r2, r2, #1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2c00      	cmp	r4, #0
 800099a:	db01      	blt.n	80009a0 <__aeabi_fdiv+0x1f8>
 800099c:	429d      	cmp	r5, r3
 800099e:	d801      	bhi.n	80009a4 <__aeabi_fdiv+0x1fc>
 80009a0:	1b5b      	subs	r3, r3, r5
 80009a2:	4332      	orrs	r2, r6
 80009a4:	3801      	subs	r0, #1
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d1f3      	bne.n	8000992 <__aeabi_fdiv+0x1ea>
 80009aa:	1e58      	subs	r0, r3, #1
 80009ac:	4183      	sbcs	r3, r0
 80009ae:	4313      	orrs	r3, r2
 80009b0:	001d      	movs	r5, r3
 80009b2:	003b      	movs	r3, r7
 80009b4:	337f      	adds	r3, #127	; 0x7f
 80009b6:	000e      	movs	r6, r1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dd00      	ble.n	80009be <__aeabi_fdiv+0x216>
 80009bc:	e73d      	b.n	800083a <__aeabi_fdiv+0x92>
 80009be:	e7aa      	b.n	8000916 <__aeabi_fdiv+0x16e>
 80009c0:	201a      	movs	r0, #26
 80009c2:	2201      	movs	r2, #1
 80009c4:	1b5b      	subs	r3, r3, r5
 80009c6:	e7e3      	b.n	8000990 <__aeabi_fdiv+0x1e8>
 80009c8:	01aa      	lsls	r2, r5, #6
 80009ca:	2000      	movs	r0, #0
 80009cc:	0a52      	lsrs	r2, r2, #9
 80009ce:	e74b      	b.n	8000868 <__aeabi_fdiv+0xc0>
 80009d0:	0800bd68 	.word	0x0800bd68
 80009d4:	f7ffffff 	.word	0xf7ffffff
 80009d8:	0800bda8 	.word	0x0800bda8

080009dc <__eqsf2>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	0042      	lsls	r2, r0, #1
 80009e0:	0245      	lsls	r5, r0, #9
 80009e2:	024e      	lsls	r6, r1, #9
 80009e4:	004c      	lsls	r4, r1, #1
 80009e6:	0fc3      	lsrs	r3, r0, #31
 80009e8:	0a6d      	lsrs	r5, r5, #9
 80009ea:	2001      	movs	r0, #1
 80009ec:	0e12      	lsrs	r2, r2, #24
 80009ee:	0a76      	lsrs	r6, r6, #9
 80009f0:	0e24      	lsrs	r4, r4, #24
 80009f2:	0fc9      	lsrs	r1, r1, #31
 80009f4:	2aff      	cmp	r2, #255	; 0xff
 80009f6:	d006      	beq.n	8000a06 <__eqsf2+0x2a>
 80009f8:	2cff      	cmp	r4, #255	; 0xff
 80009fa:	d003      	beq.n	8000a04 <__eqsf2+0x28>
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	d101      	bne.n	8000a04 <__eqsf2+0x28>
 8000a00:	42b5      	cmp	r5, r6
 8000a02:	d006      	beq.n	8000a12 <__eqsf2+0x36>
 8000a04:	bd70      	pop	{r4, r5, r6, pc}
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d1fc      	bne.n	8000a04 <__eqsf2+0x28>
 8000a0a:	2cff      	cmp	r4, #255	; 0xff
 8000a0c:	d1fa      	bne.n	8000a04 <__eqsf2+0x28>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d1f8      	bne.n	8000a04 <__eqsf2+0x28>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d006      	beq.n	8000a24 <__eqsf2+0x48>
 8000a16:	2001      	movs	r0, #1
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d1f3      	bne.n	8000a04 <__eqsf2+0x28>
 8000a1c:	0028      	movs	r0, r5
 8000a1e:	1e43      	subs	r3, r0, #1
 8000a20:	4198      	sbcs	r0, r3
 8000a22:	e7ef      	b.n	8000a04 <__eqsf2+0x28>
 8000a24:	2000      	movs	r0, #0
 8000a26:	e7ed      	b.n	8000a04 <__eqsf2+0x28>

08000a28 <__gesf2>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	0042      	lsls	r2, r0, #1
 8000a2c:	0245      	lsls	r5, r0, #9
 8000a2e:	024e      	lsls	r6, r1, #9
 8000a30:	004c      	lsls	r4, r1, #1
 8000a32:	0fc3      	lsrs	r3, r0, #31
 8000a34:	0a6d      	lsrs	r5, r5, #9
 8000a36:	0e12      	lsrs	r2, r2, #24
 8000a38:	0a76      	lsrs	r6, r6, #9
 8000a3a:	0e24      	lsrs	r4, r4, #24
 8000a3c:	0fc8      	lsrs	r0, r1, #31
 8000a3e:	2aff      	cmp	r2, #255	; 0xff
 8000a40:	d01b      	beq.n	8000a7a <__gesf2+0x52>
 8000a42:	2cff      	cmp	r4, #255	; 0xff
 8000a44:	d00e      	beq.n	8000a64 <__gesf2+0x3c>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d11b      	bne.n	8000a82 <__gesf2+0x5a>
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d101      	bne.n	8000a52 <__gesf2+0x2a>
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d01c      	beq.n	8000a8c <__gesf2+0x64>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	d00c      	beq.n	8000a70 <__gesf2+0x48>
 8000a56:	4283      	cmp	r3, r0
 8000a58:	d01c      	beq.n	8000a94 <__gesf2+0x6c>
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	1e58      	subs	r0, r3, #1
 8000a5e:	4008      	ands	r0, r1
 8000a60:	3801      	subs	r0, #1
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d122      	bne.n	8000aae <__gesf2+0x86>
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	d1f4      	bne.n	8000a56 <__gesf2+0x2e>
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d1f2      	bne.n	8000a56 <__gesf2+0x2e>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d1f6      	bne.n	8000a62 <__gesf2+0x3a>
 8000a74:	2001      	movs	r0, #1
 8000a76:	4240      	negs	r0, r0
 8000a78:	e7f3      	b.n	8000a62 <__gesf2+0x3a>
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d117      	bne.n	8000aae <__gesf2+0x86>
 8000a7e:	2cff      	cmp	r4, #255	; 0xff
 8000a80:	d0f0      	beq.n	8000a64 <__gesf2+0x3c>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d1e7      	bne.n	8000a56 <__gesf2+0x2e>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d1e5      	bne.n	8000a56 <__gesf2+0x2e>
 8000a8a:	e7e6      	b.n	8000a5a <__gesf2+0x32>
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d0e7      	beq.n	8000a62 <__gesf2+0x3a>
 8000a92:	e7e2      	b.n	8000a5a <__gesf2+0x32>
 8000a94:	42a2      	cmp	r2, r4
 8000a96:	dc05      	bgt.n	8000aa4 <__gesf2+0x7c>
 8000a98:	dbea      	blt.n	8000a70 <__gesf2+0x48>
 8000a9a:	42b5      	cmp	r5, r6
 8000a9c:	d802      	bhi.n	8000aa4 <__gesf2+0x7c>
 8000a9e:	d3e7      	bcc.n	8000a70 <__gesf2+0x48>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e7de      	b.n	8000a62 <__gesf2+0x3a>
 8000aa4:	4243      	negs	r3, r0
 8000aa6:	4158      	adcs	r0, r3
 8000aa8:	0040      	lsls	r0, r0, #1
 8000aaa:	3801      	subs	r0, #1
 8000aac:	e7d9      	b.n	8000a62 <__gesf2+0x3a>
 8000aae:	2002      	movs	r0, #2
 8000ab0:	4240      	negs	r0, r0
 8000ab2:	e7d6      	b.n	8000a62 <__gesf2+0x3a>

08000ab4 <__lesf2>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	0042      	lsls	r2, r0, #1
 8000ab8:	0245      	lsls	r5, r0, #9
 8000aba:	024e      	lsls	r6, r1, #9
 8000abc:	004c      	lsls	r4, r1, #1
 8000abe:	0fc3      	lsrs	r3, r0, #31
 8000ac0:	0a6d      	lsrs	r5, r5, #9
 8000ac2:	0e12      	lsrs	r2, r2, #24
 8000ac4:	0a76      	lsrs	r6, r6, #9
 8000ac6:	0e24      	lsrs	r4, r4, #24
 8000ac8:	0fc8      	lsrs	r0, r1, #31
 8000aca:	2aff      	cmp	r2, #255	; 0xff
 8000acc:	d00b      	beq.n	8000ae6 <__lesf2+0x32>
 8000ace:	2cff      	cmp	r4, #255	; 0xff
 8000ad0:	d00d      	beq.n	8000aee <__lesf2+0x3a>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d11f      	bne.n	8000b16 <__lesf2+0x62>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d116      	bne.n	8000b08 <__lesf2+0x54>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d114      	bne.n	8000b08 <__lesf2+0x54>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d010      	beq.n	8000b06 <__lesf2+0x52>
 8000ae4:	e009      	b.n	8000afa <__lesf2+0x46>
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	d10c      	bne.n	8000b04 <__lesf2+0x50>
 8000aea:	2cff      	cmp	r4, #255	; 0xff
 8000aec:	d113      	bne.n	8000b16 <__lesf2+0x62>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d108      	bne.n	8000b04 <__lesf2+0x50>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d008      	beq.n	8000b08 <__lesf2+0x54>
 8000af6:	4283      	cmp	r3, r0
 8000af8:	d012      	beq.n	8000b20 <__lesf2+0x6c>
 8000afa:	2102      	movs	r1, #2
 8000afc:	1e58      	subs	r0, r3, #1
 8000afe:	4008      	ands	r0, r1
 8000b00:	3801      	subs	r0, #1
 8000b02:	e000      	b.n	8000b06 <__lesf2+0x52>
 8000b04:	2002      	movs	r0, #2
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d1f4      	bne.n	8000af6 <__lesf2+0x42>
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d1fa      	bne.n	8000b06 <__lesf2+0x52>
 8000b10:	2001      	movs	r0, #1
 8000b12:	4240      	negs	r0, r0
 8000b14:	e7f7      	b.n	8000b06 <__lesf2+0x52>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d1ed      	bne.n	8000af6 <__lesf2+0x42>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d1eb      	bne.n	8000af6 <__lesf2+0x42>
 8000b1e:	e7ec      	b.n	8000afa <__lesf2+0x46>
 8000b20:	42a2      	cmp	r2, r4
 8000b22:	dc05      	bgt.n	8000b30 <__lesf2+0x7c>
 8000b24:	dbf2      	blt.n	8000b0c <__lesf2+0x58>
 8000b26:	42b5      	cmp	r5, r6
 8000b28:	d802      	bhi.n	8000b30 <__lesf2+0x7c>
 8000b2a:	d3ef      	bcc.n	8000b0c <__lesf2+0x58>
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	e7ea      	b.n	8000b06 <__lesf2+0x52>
 8000b30:	4243      	negs	r3, r0
 8000b32:	4158      	adcs	r0, r3
 8000b34:	0040      	lsls	r0, r0, #1
 8000b36:	3801      	subs	r0, #1
 8000b38:	e7e5      	b.n	8000b06 <__lesf2+0x52>
 8000b3a:	46c0      	nop			; (mov r8, r8)

08000b3c <__aeabi_fmul>:
 8000b3c:	0243      	lsls	r3, r0, #9
 8000b3e:	0a5b      	lsrs	r3, r3, #9
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	464f      	mov	r7, r9
 8000b44:	4646      	mov	r6, r8
 8000b46:	4699      	mov	r9, r3
 8000b48:	46d6      	mov	lr, sl
 8000b4a:	0fc3      	lsrs	r3, r0, #31
 8000b4c:	0045      	lsls	r5, r0, #1
 8000b4e:	4698      	mov	r8, r3
 8000b50:	b5c0      	push	{r6, r7, lr}
 8000b52:	464b      	mov	r3, r9
 8000b54:	1c0f      	adds	r7, r1, #0
 8000b56:	0e2d      	lsrs	r5, r5, #24
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fmul+0x20>
 8000b5a:	e0cb      	b.n	8000cf4 <__aeabi_fmul+0x1b8>
 8000b5c:	2dff      	cmp	r5, #255	; 0xff
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fmul+0x26>
 8000b60:	e0cf      	b.n	8000d02 <__aeabi_fmul+0x1c6>
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	04d2      	lsls	r2, r2, #19
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	4691      	mov	r9, r2
 8000b6e:	2600      	movs	r6, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	3d7f      	subs	r5, #127	; 0x7f
 8000b74:	027c      	lsls	r4, r7, #9
 8000b76:	007b      	lsls	r3, r7, #1
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	0e1b      	lsrs	r3, r3, #24
 8000b7c:	0fff      	lsrs	r7, r7, #31
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fmul+0x48>
 8000b82:	e0a9      	b.n	8000cd8 <__aeabi_fmul+0x19c>
 8000b84:	2bff      	cmp	r3, #255	; 0xff
 8000b86:	d011      	beq.n	8000bac <__aeabi_fmul+0x70>
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	00e4      	lsls	r4, r4, #3
 8000b8c:	04d2      	lsls	r2, r2, #19
 8000b8e:	4314      	orrs	r4, r2
 8000b90:	4642      	mov	r2, r8
 8000b92:	3b7f      	subs	r3, #127	; 0x7f
 8000b94:	195b      	adds	r3, r3, r5
 8000b96:	407a      	eors	r2, r7
 8000b98:	2000      	movs	r0, #0
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	1c5d      	adds	r5, r3, #1
 8000b9e:	2e0a      	cmp	r6, #10
 8000ba0:	dd13      	ble.n	8000bca <__aeabi_fmul+0x8e>
 8000ba2:	003a      	movs	r2, r7
 8000ba4:	2e0b      	cmp	r6, #11
 8000ba6:	d047      	beq.n	8000c38 <__aeabi_fmul+0xfc>
 8000ba8:	4647      	mov	r7, r8
 8000baa:	e03f      	b.n	8000c2c <__aeabi_fmul+0xf0>
 8000bac:	002b      	movs	r3, r5
 8000bae:	33ff      	adds	r3, #255	; 0xff
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d11e      	bne.n	8000bf2 <__aeabi_fmul+0xb6>
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	4316      	orrs	r6, r2
 8000bb8:	4642      	mov	r2, r8
 8000bba:	3501      	adds	r5, #1
 8000bbc:	407a      	eors	r2, r7
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	35ff      	adds	r5, #255	; 0xff
 8000bc2:	2e0a      	cmp	r6, #10
 8000bc4:	dd00      	ble.n	8000bc8 <__aeabi_fmul+0x8c>
 8000bc6:	e0e4      	b.n	8000d92 <__aeabi_fmul+0x256>
 8000bc8:	2002      	movs	r0, #2
 8000bca:	2e02      	cmp	r6, #2
 8000bcc:	dc1c      	bgt.n	8000c08 <__aeabi_fmul+0xcc>
 8000bce:	3e01      	subs	r6, #1
 8000bd0:	2e01      	cmp	r6, #1
 8000bd2:	d842      	bhi.n	8000c5a <__aeabi_fmul+0x11e>
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d03d      	beq.n	8000c54 <__aeabi_fmul+0x118>
 8000bd8:	2801      	cmp	r0, #1
 8000bda:	d166      	bne.n	8000caa <__aeabi_fmul+0x16e>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	05c0      	lsls	r0, r0, #23
 8000be2:	4308      	orrs	r0, r1
 8000be4:	07d2      	lsls	r2, r2, #31
 8000be6:	4310      	orrs	r0, r2
 8000be8:	bce0      	pop	{r5, r6, r7}
 8000bea:	46ba      	mov	sl, r7
 8000bec:	46b1      	mov	r9, r6
 8000bee:	46a8      	mov	r8, r5
 8000bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	4316      	orrs	r6, r2
 8000bf6:	4642      	mov	r2, r8
 8000bf8:	3501      	adds	r5, #1
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	35ff      	adds	r5, #255	; 0xff
 8000c00:	2e0a      	cmp	r6, #10
 8000c02:	dd00      	ble.n	8000c06 <__aeabi_fmul+0xca>
 8000c04:	e0e4      	b.n	8000dd0 <__aeabi_fmul+0x294>
 8000c06:	2003      	movs	r0, #3
 8000c08:	2101      	movs	r1, #1
 8000c0a:	40b1      	lsls	r1, r6
 8000c0c:	26a6      	movs	r6, #166	; 0xa6
 8000c0e:	00f6      	lsls	r6, r6, #3
 8000c10:	4231      	tst	r1, r6
 8000c12:	d10a      	bne.n	8000c2a <__aeabi_fmul+0xee>
 8000c14:	2690      	movs	r6, #144	; 0x90
 8000c16:	00b6      	lsls	r6, r6, #2
 8000c18:	4231      	tst	r1, r6
 8000c1a:	d116      	bne.n	8000c4a <__aeabi_fmul+0x10e>
 8000c1c:	3eb9      	subs	r6, #185	; 0xb9
 8000c1e:	3eff      	subs	r6, #255	; 0xff
 8000c20:	420e      	tst	r6, r1
 8000c22:	d01a      	beq.n	8000c5a <__aeabi_fmul+0x11e>
 8000c24:	46a1      	mov	r9, r4
 8000c26:	4682      	mov	sl, r0
 8000c28:	e000      	b.n	8000c2c <__aeabi_fmul+0xf0>
 8000c2a:	0017      	movs	r7, r2
 8000c2c:	4653      	mov	r3, sl
 8000c2e:	003a      	movs	r2, r7
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d00f      	beq.n	8000c54 <__aeabi_fmul+0x118>
 8000c34:	464c      	mov	r4, r9
 8000c36:	4650      	mov	r0, sl
 8000c38:	2803      	cmp	r0, #3
 8000c3a:	d1cd      	bne.n	8000bd8 <__aeabi_fmul+0x9c>
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	03c9      	lsls	r1, r1, #15
 8000c40:	4321      	orrs	r1, r4
 8000c42:	0249      	lsls	r1, r1, #9
 8000c44:	20ff      	movs	r0, #255	; 0xff
 8000c46:	0a49      	lsrs	r1, r1, #9
 8000c48:	e7ca      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	20ff      	movs	r0, #255	; 0xff
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	e7c5      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000c54:	20ff      	movs	r0, #255	; 0xff
 8000c56:	2100      	movs	r1, #0
 8000c58:	e7c2      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000c5a:	0c20      	lsrs	r0, r4, #16
 8000c5c:	4649      	mov	r1, r9
 8000c5e:	0424      	lsls	r4, r4, #16
 8000c60:	0c24      	lsrs	r4, r4, #16
 8000c62:	0027      	movs	r7, r4
 8000c64:	0c0e      	lsrs	r6, r1, #16
 8000c66:	0409      	lsls	r1, r1, #16
 8000c68:	0c09      	lsrs	r1, r1, #16
 8000c6a:	4374      	muls	r4, r6
 8000c6c:	434f      	muls	r7, r1
 8000c6e:	4346      	muls	r6, r0
 8000c70:	4348      	muls	r0, r1
 8000c72:	0c39      	lsrs	r1, r7, #16
 8000c74:	1900      	adds	r0, r0, r4
 8000c76:	1809      	adds	r1, r1, r0
 8000c78:	428c      	cmp	r4, r1
 8000c7a:	d903      	bls.n	8000c84 <__aeabi_fmul+0x148>
 8000c7c:	2080      	movs	r0, #128	; 0x80
 8000c7e:	0240      	lsls	r0, r0, #9
 8000c80:	4684      	mov	ip, r0
 8000c82:	4466      	add	r6, ip
 8000c84:	043f      	lsls	r7, r7, #16
 8000c86:	0408      	lsls	r0, r1, #16
 8000c88:	0c3f      	lsrs	r7, r7, #16
 8000c8a:	19c0      	adds	r0, r0, r7
 8000c8c:	0184      	lsls	r4, r0, #6
 8000c8e:	1e67      	subs	r7, r4, #1
 8000c90:	41bc      	sbcs	r4, r7
 8000c92:	0c09      	lsrs	r1, r1, #16
 8000c94:	0e80      	lsrs	r0, r0, #26
 8000c96:	1989      	adds	r1, r1, r6
 8000c98:	4304      	orrs	r4, r0
 8000c9a:	0189      	lsls	r1, r1, #6
 8000c9c:	430c      	orrs	r4, r1
 8000c9e:	0109      	lsls	r1, r1, #4
 8000ca0:	d571      	bpl.n	8000d86 <__aeabi_fmul+0x24a>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	0861      	lsrs	r1, r4, #1
 8000ca6:	401c      	ands	r4, r3
 8000ca8:	430c      	orrs	r4, r1
 8000caa:	002b      	movs	r3, r5
 8000cac:	337f      	adds	r3, #127	; 0x7f
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	dd51      	ble.n	8000d56 <__aeabi_fmul+0x21a>
 8000cb2:	0761      	lsls	r1, r4, #29
 8000cb4:	d004      	beq.n	8000cc0 <__aeabi_fmul+0x184>
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	4021      	ands	r1, r4
 8000cba:	2904      	cmp	r1, #4
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_fmul+0x184>
 8000cbe:	3404      	adds	r4, #4
 8000cc0:	0121      	lsls	r1, r4, #4
 8000cc2:	d503      	bpl.n	8000ccc <__aeabi_fmul+0x190>
 8000cc4:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <__aeabi_fmul+0x298>)
 8000cc6:	401c      	ands	r4, r3
 8000cc8:	002b      	movs	r3, r5
 8000cca:	3380      	adds	r3, #128	; 0x80
 8000ccc:	2bfe      	cmp	r3, #254	; 0xfe
 8000cce:	dcc1      	bgt.n	8000c54 <__aeabi_fmul+0x118>
 8000cd0:	01a1      	lsls	r1, r4, #6
 8000cd2:	0a49      	lsrs	r1, r1, #9
 8000cd4:	b2d8      	uxtb	r0, r3
 8000cd6:	e783      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d12c      	bne.n	8000d36 <__aeabi_fmul+0x1fa>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	4642      	mov	r2, r8
 8000ce0:	431e      	orrs	r6, r3
 8000ce2:	002b      	movs	r3, r5
 8000ce4:	407a      	eors	r2, r7
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	1c5d      	adds	r5, r3, #1
 8000cec:	2e0a      	cmp	r6, #10
 8000cee:	dd00      	ble.n	8000cf2 <__aeabi_fmul+0x1b6>
 8000cf0:	e757      	b.n	8000ba2 <__aeabi_fmul+0x66>
 8000cf2:	e76a      	b.n	8000bca <__aeabi_fmul+0x8e>
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d110      	bne.n	8000d1a <__aeabi_fmul+0x1de>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	469a      	mov	sl, r3
 8000d00:	e738      	b.n	8000b74 <__aeabi_fmul+0x38>
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <__aeabi_fmul+0x1d4>
 8000d06:	2302      	movs	r3, #2
 8000d08:	2608      	movs	r6, #8
 8000d0a:	25ff      	movs	r5, #255	; 0xff
 8000d0c:	469a      	mov	sl, r3
 8000d0e:	e731      	b.n	8000b74 <__aeabi_fmul+0x38>
 8000d10:	2303      	movs	r3, #3
 8000d12:	260c      	movs	r6, #12
 8000d14:	25ff      	movs	r5, #255	; 0xff
 8000d16:	469a      	mov	sl, r3
 8000d18:	e72c      	b.n	8000b74 <__aeabi_fmul+0x38>
 8000d1a:	4648      	mov	r0, r9
 8000d1c:	f000 fa84 	bl	8001228 <__clzsi2>
 8000d20:	464a      	mov	r2, r9
 8000d22:	1f43      	subs	r3, r0, #5
 8000d24:	2576      	movs	r5, #118	; 0x76
 8000d26:	409a      	lsls	r2, r3
 8000d28:	2300      	movs	r3, #0
 8000d2a:	426d      	negs	r5, r5
 8000d2c:	4691      	mov	r9, r2
 8000d2e:	2600      	movs	r6, #0
 8000d30:	469a      	mov	sl, r3
 8000d32:	1a2d      	subs	r5, r5, r0
 8000d34:	e71e      	b.n	8000b74 <__aeabi_fmul+0x38>
 8000d36:	0020      	movs	r0, r4
 8000d38:	f000 fa76 	bl	8001228 <__clzsi2>
 8000d3c:	4642      	mov	r2, r8
 8000d3e:	1f43      	subs	r3, r0, #5
 8000d40:	409c      	lsls	r4, r3
 8000d42:	1a2b      	subs	r3, r5, r0
 8000d44:	3b76      	subs	r3, #118	; 0x76
 8000d46:	407a      	eors	r2, r7
 8000d48:	2000      	movs	r0, #0
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	1c5d      	adds	r5, r3, #1
 8000d4e:	2e0a      	cmp	r6, #10
 8000d50:	dd00      	ble.n	8000d54 <__aeabi_fmul+0x218>
 8000d52:	e726      	b.n	8000ba2 <__aeabi_fmul+0x66>
 8000d54:	e739      	b.n	8000bca <__aeabi_fmul+0x8e>
 8000d56:	2101      	movs	r1, #1
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	2b1b      	cmp	r3, #27
 8000d5c:	dd00      	ble.n	8000d60 <__aeabi_fmul+0x224>
 8000d5e:	e73d      	b.n	8000bdc <__aeabi_fmul+0xa0>
 8000d60:	359e      	adds	r5, #158	; 0x9e
 8000d62:	0021      	movs	r1, r4
 8000d64:	40ac      	lsls	r4, r5
 8000d66:	40d9      	lsrs	r1, r3
 8000d68:	1e63      	subs	r3, r4, #1
 8000d6a:	419c      	sbcs	r4, r3
 8000d6c:	4321      	orrs	r1, r4
 8000d6e:	074b      	lsls	r3, r1, #29
 8000d70:	d004      	beq.n	8000d7c <__aeabi_fmul+0x240>
 8000d72:	230f      	movs	r3, #15
 8000d74:	400b      	ands	r3, r1
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fmul+0x240>
 8000d7a:	3104      	adds	r1, #4
 8000d7c:	014b      	lsls	r3, r1, #5
 8000d7e:	d504      	bpl.n	8000d8a <__aeabi_fmul+0x24e>
 8000d80:	2001      	movs	r0, #1
 8000d82:	2100      	movs	r1, #0
 8000d84:	e72c      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000d86:	001d      	movs	r5, r3
 8000d88:	e78f      	b.n	8000caa <__aeabi_fmul+0x16e>
 8000d8a:	0189      	lsls	r1, r1, #6
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	0a49      	lsrs	r1, r1, #9
 8000d90:	e726      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000d92:	2302      	movs	r3, #2
 8000d94:	2e0f      	cmp	r6, #15
 8000d96:	d10c      	bne.n	8000db2 <__aeabi_fmul+0x276>
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	464b      	mov	r3, r9
 8000d9c:	03c9      	lsls	r1, r1, #15
 8000d9e:	420b      	tst	r3, r1
 8000da0:	d00d      	beq.n	8000dbe <__aeabi_fmul+0x282>
 8000da2:	420c      	tst	r4, r1
 8000da4:	d10b      	bne.n	8000dbe <__aeabi_fmul+0x282>
 8000da6:	4321      	orrs	r1, r4
 8000da8:	0249      	lsls	r1, r1, #9
 8000daa:	003a      	movs	r2, r7
 8000dac:	20ff      	movs	r0, #255	; 0xff
 8000dae:	0a49      	lsrs	r1, r1, #9
 8000db0:	e716      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000db2:	2e0b      	cmp	r6, #11
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fmul+0x27c>
 8000db6:	e6f7      	b.n	8000ba8 <__aeabi_fmul+0x6c>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	469a      	mov	sl, r3
 8000dbc:	e736      	b.n	8000c2c <__aeabi_fmul+0xf0>
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	03c9      	lsls	r1, r1, #15
 8000dc4:	4319      	orrs	r1, r3
 8000dc6:	0249      	lsls	r1, r1, #9
 8000dc8:	4642      	mov	r2, r8
 8000dca:	20ff      	movs	r0, #255	; 0xff
 8000dcc:	0a49      	lsrs	r1, r1, #9
 8000dce:	e707      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e7df      	b.n	8000d94 <__aeabi_fmul+0x258>
 8000dd4:	f7ffffff 	.word	0xf7ffffff

08000dd8 <__aeabi_fsub>:
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	46c6      	mov	lr, r8
 8000ddc:	0243      	lsls	r3, r0, #9
 8000dde:	0a5b      	lsrs	r3, r3, #9
 8000de0:	0045      	lsls	r5, r0, #1
 8000de2:	00da      	lsls	r2, r3, #3
 8000de4:	0fc4      	lsrs	r4, r0, #31
 8000de6:	0248      	lsls	r0, r1, #9
 8000de8:	004f      	lsls	r7, r1, #1
 8000dea:	4694      	mov	ip, r2
 8000dec:	0a42      	lsrs	r2, r0, #9
 8000dee:	001e      	movs	r6, r3
 8000df0:	4690      	mov	r8, r2
 8000df2:	b500      	push	{lr}
 8000df4:	0e2d      	lsrs	r5, r5, #24
 8000df6:	0e3f      	lsrs	r7, r7, #24
 8000df8:	0fc9      	lsrs	r1, r1, #31
 8000dfa:	0980      	lsrs	r0, r0, #6
 8000dfc:	2fff      	cmp	r7, #255	; 0xff
 8000dfe:	d059      	beq.n	8000eb4 <__aeabi_fsub+0xdc>
 8000e00:	2201      	movs	r2, #1
 8000e02:	4051      	eors	r1, r2
 8000e04:	428c      	cmp	r4, r1
 8000e06:	d039      	beq.n	8000e7c <__aeabi_fsub+0xa4>
 8000e08:	1bea      	subs	r2, r5, r7
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	dd58      	ble.n	8000ec0 <__aeabi_fsub+0xe8>
 8000e0e:	2f00      	cmp	r7, #0
 8000e10:	d068      	beq.n	8000ee4 <__aeabi_fsub+0x10c>
 8000e12:	2dff      	cmp	r5, #255	; 0xff
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fsub+0x40>
 8000e16:	e0d1      	b.n	8000fbc <__aeabi_fsub+0x1e4>
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	04db      	lsls	r3, r3, #19
 8000e1c:	4318      	orrs	r0, r3
 8000e1e:	2a1b      	cmp	r2, #27
 8000e20:	dc00      	bgt.n	8000e24 <__aeabi_fsub+0x4c>
 8000e22:	e0e3      	b.n	8000fec <__aeabi_fsub+0x214>
 8000e24:	2301      	movs	r3, #1
 8000e26:	4662      	mov	r2, ip
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	015a      	lsls	r2, r3, #5
 8000e2c:	d400      	bmi.n	8000e30 <__aeabi_fsub+0x58>
 8000e2e:	e0ac      	b.n	8000f8a <__aeabi_fsub+0x1b2>
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	099e      	lsrs	r6, r3, #6
 8000e34:	0030      	movs	r0, r6
 8000e36:	f000 f9f7 	bl	8001228 <__clzsi2>
 8000e3a:	0033      	movs	r3, r6
 8000e3c:	3805      	subs	r0, #5
 8000e3e:	4083      	lsls	r3, r0
 8000e40:	4285      	cmp	r5, r0
 8000e42:	dc00      	bgt.n	8000e46 <__aeabi_fsub+0x6e>
 8000e44:	e0c6      	b.n	8000fd4 <__aeabi_fsub+0x1fc>
 8000e46:	4ab2      	ldr	r2, [pc, #712]	; (8001110 <__aeabi_fsub+0x338>)
 8000e48:	1a2d      	subs	r5, r5, r0
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	075a      	lsls	r2, r3, #29
 8000e4e:	d004      	beq.n	8000e5a <__aeabi_fsub+0x82>
 8000e50:	220f      	movs	r2, #15
 8000e52:	401a      	ands	r2, r3
 8000e54:	2a04      	cmp	r2, #4
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x82>
 8000e58:	3304      	adds	r3, #4
 8000e5a:	015a      	lsls	r2, r3, #5
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_fsub+0x88>
 8000e5e:	e097      	b.n	8000f90 <__aeabi_fsub+0x1b8>
 8000e60:	1c6a      	adds	r2, r5, #1
 8000e62:	2dfe      	cmp	r5, #254	; 0xfe
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fsub+0x90>
 8000e66:	e084      	b.n	8000f72 <__aeabi_fsub+0x19a>
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	0a5e      	lsrs	r6, r3, #9
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	05d0      	lsls	r0, r2, #23
 8000e70:	4330      	orrs	r0, r6
 8000e72:	07e4      	lsls	r4, r4, #31
 8000e74:	4320      	orrs	r0, r4
 8000e76:	bc80      	pop	{r7}
 8000e78:	46b8      	mov	r8, r7
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7c:	1bea      	subs	r2, r5, r7
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	dd41      	ble.n	8000f06 <__aeabi_fsub+0x12e>
 8000e82:	2f00      	cmp	r7, #0
 8000e84:	d06b      	beq.n	8000f5e <__aeabi_fsub+0x186>
 8000e86:	2dff      	cmp	r5, #255	; 0xff
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0xb4>
 8000e8a:	e097      	b.n	8000fbc <__aeabi_fsub+0x1e4>
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	04db      	lsls	r3, r3, #19
 8000e90:	4318      	orrs	r0, r3
 8000e92:	2a1b      	cmp	r2, #27
 8000e94:	dc00      	bgt.n	8000e98 <__aeabi_fsub+0xc0>
 8000e96:	e0cc      	b.n	8001032 <__aeabi_fsub+0x25a>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	4463      	add	r3, ip
 8000e9c:	015a      	lsls	r2, r3, #5
 8000e9e:	d574      	bpl.n	8000f8a <__aeabi_fsub+0x1b2>
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	2dff      	cmp	r5, #255	; 0xff
 8000ea4:	d065      	beq.n	8000f72 <__aeabi_fsub+0x19a>
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	499a      	ldr	r1, [pc, #616]	; (8001114 <__aeabi_fsub+0x33c>)
 8000eaa:	401a      	ands	r2, r3
 8000eac:	085b      	lsrs	r3, r3, #1
 8000eae:	400b      	ands	r3, r1
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	e7cb      	b.n	8000e4c <__aeabi_fsub+0x74>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d01f      	beq.n	8000ef8 <__aeabi_fsub+0x120>
 8000eb8:	428c      	cmp	r4, r1
 8000eba:	d022      	beq.n	8000f02 <__aeabi_fsub+0x12a>
 8000ebc:	002a      	movs	r2, r5
 8000ebe:	3aff      	subs	r2, #255	; 0xff
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	d035      	beq.n	8000f30 <__aeabi_fsub+0x158>
 8000ec4:	1b7a      	subs	r2, r7, r5
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_fsub+0xf4>
 8000eca:	e099      	b.n	8001000 <__aeabi_fsub+0x228>
 8000ecc:	4663      	mov	r3, ip
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0xfc>
 8000ed2:	e0dd      	b.n	8001090 <__aeabi_fsub+0x2b8>
 8000ed4:	1e53      	subs	r3, r2, #1
 8000ed6:	2a01      	cmp	r2, #1
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x104>
 8000eda:	e105      	b.n	80010e8 <__aeabi_fsub+0x310>
 8000edc:	2aff      	cmp	r2, #255	; 0xff
 8000ede:	d06b      	beq.n	8000fb8 <__aeabi_fsub+0x1e0>
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	e094      	b.n	800100e <__aeabi_fsub+0x236>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d073      	beq.n	8000fd0 <__aeabi_fsub+0x1f8>
 8000ee8:	1e51      	subs	r1, r2, #1
 8000eea:	2a01      	cmp	r2, #1
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fsub+0x118>
 8000eee:	e0df      	b.n	80010b0 <__aeabi_fsub+0x2d8>
 8000ef0:	2aff      	cmp	r2, #255	; 0xff
 8000ef2:	d063      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000ef4:	000a      	movs	r2, r1
 8000ef6:	e792      	b.n	8000e1e <__aeabi_fsub+0x46>
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4051      	eors	r1, r2
 8000efc:	42a1      	cmp	r1, r4
 8000efe:	d000      	beq.n	8000f02 <__aeabi_fsub+0x12a>
 8000f00:	e782      	b.n	8000e08 <__aeabi_fsub+0x30>
 8000f02:	002a      	movs	r2, r5
 8000f04:	3aff      	subs	r2, #255	; 0xff
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d036      	beq.n	8000f78 <__aeabi_fsub+0x1a0>
 8000f0a:	1b7a      	subs	r2, r7, r5
 8000f0c:	2d00      	cmp	r5, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x13a>
 8000f10:	e0aa      	b.n	8001068 <__aeabi_fsub+0x290>
 8000f12:	2fff      	cmp	r7, #255	; 0xff
 8000f14:	d100      	bne.n	8000f18 <__aeabi_fsub+0x140>
 8000f16:	e0da      	b.n	80010ce <__aeabi_fsub+0x2f6>
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	4661      	mov	r1, ip
 8000f1c:	04db      	lsls	r3, r3, #19
 8000f1e:	4319      	orrs	r1, r3
 8000f20:	468c      	mov	ip, r1
 8000f22:	2a1b      	cmp	r2, #27
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_fsub+0x150>
 8000f26:	e0d4      	b.n	80010d2 <__aeabi_fsub+0x2fa>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	003d      	movs	r5, r7
 8000f2c:	181b      	adds	r3, r3, r0
 8000f2e:	e7b5      	b.n	8000e9c <__aeabi_fsub+0xc4>
 8000f30:	27fe      	movs	r7, #254	; 0xfe
 8000f32:	1c6a      	adds	r2, r5, #1
 8000f34:	4217      	tst	r7, r2
 8000f36:	d171      	bne.n	800101c <__aeabi_fsub+0x244>
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fsub+0x166>
 8000f3c:	e09e      	b.n	800107c <__aeabi_fsub+0x2a4>
 8000f3e:	4663      	mov	r3, ip
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fsub+0x16e>
 8000f44:	e0d5      	b.n	80010f2 <__aeabi_fsub+0x31a>
 8000f46:	2200      	movs	r2, #0
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_fsub+0x176>
 8000f4c:	e78f      	b.n	8000e6e <__aeabi_fsub+0x96>
 8000f4e:	1a1b      	subs	r3, r3, r0
 8000f50:	015e      	lsls	r6, r3, #5
 8000f52:	d400      	bmi.n	8000f56 <__aeabi_fsub+0x17e>
 8000f54:	e0d6      	b.n	8001104 <__aeabi_fsub+0x32c>
 8000f56:	4663      	mov	r3, ip
 8000f58:	000c      	movs	r4, r1
 8000f5a:	1ac3      	subs	r3, r0, r3
 8000f5c:	e776      	b.n	8000e4c <__aeabi_fsub+0x74>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d036      	beq.n	8000fd0 <__aeabi_fsub+0x1f8>
 8000f62:	1e51      	subs	r1, r2, #1
 8000f64:	2a01      	cmp	r2, #1
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x192>
 8000f68:	e09a      	b.n	80010a0 <__aeabi_fsub+0x2c8>
 8000f6a:	2aff      	cmp	r2, #255	; 0xff
 8000f6c:	d026      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000f6e:	000a      	movs	r2, r1
 8000f70:	e78f      	b.n	8000e92 <__aeabi_fsub+0xba>
 8000f72:	22ff      	movs	r2, #255	; 0xff
 8000f74:	2600      	movs	r6, #0
 8000f76:	e77a      	b.n	8000e6e <__aeabi_fsub+0x96>
 8000f78:	27fe      	movs	r7, #254	; 0xfe
 8000f7a:	1c6a      	adds	r2, r5, #1
 8000f7c:	4217      	tst	r7, r2
 8000f7e:	d062      	beq.n	8001046 <__aeabi_fsub+0x26e>
 8000f80:	2aff      	cmp	r2, #255	; 0xff
 8000f82:	d0f6      	beq.n	8000f72 <__aeabi_fsub+0x19a>
 8000f84:	0015      	movs	r5, r2
 8000f86:	4460      	add	r0, ip
 8000f88:	0843      	lsrs	r3, r0, #1
 8000f8a:	075a      	lsls	r2, r3, #29
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_fsub+0x1b8>
 8000f8e:	e75f      	b.n	8000e50 <__aeabi_fsub+0x78>
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	2dff      	cmp	r5, #255	; 0xff
 8000f94:	d012      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	0a5e      	lsrs	r6, r3, #9
 8000f9a:	b2ea      	uxtb	r2, r5
 8000f9c:	e767      	b.n	8000e6e <__aeabi_fsub+0x96>
 8000f9e:	4662      	mov	r2, ip
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_fsub+0x1ce>
 8000fa4:	e093      	b.n	80010ce <__aeabi_fsub+0x2f6>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d008      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	03d2      	lsls	r2, r2, #15
 8000fae:	4213      	tst	r3, r2
 8000fb0:	d004      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000fb2:	4640      	mov	r0, r8
 8000fb4:	4210      	tst	r0, r2
 8000fb6:	d101      	bne.n	8000fbc <__aeabi_fsub+0x1e4>
 8000fb8:	000c      	movs	r4, r1
 8000fba:	4643      	mov	r3, r8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0d8      	beq.n	8000f72 <__aeabi_fsub+0x19a>
 8000fc0:	2680      	movs	r6, #128	; 0x80
 8000fc2:	03f6      	lsls	r6, r6, #15
 8000fc4:	431e      	orrs	r6, r3
 8000fc6:	0276      	lsls	r6, r6, #9
 8000fc8:	22ff      	movs	r2, #255	; 0xff
 8000fca:	0a76      	lsrs	r6, r6, #9
 8000fcc:	e74f      	b.n	8000e6e <__aeabi_fsub+0x96>
 8000fce:	4643      	mov	r3, r8
 8000fd0:	0015      	movs	r5, r2
 8000fd2:	e7de      	b.n	8000f92 <__aeabi_fsub+0x1ba>
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	1b40      	subs	r0, r0, r5
 8000fd8:	3001      	adds	r0, #1
 8000fda:	1a12      	subs	r2, r2, r0
 8000fdc:	0019      	movs	r1, r3
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	40c1      	lsrs	r1, r0
 8000fe2:	1e5a      	subs	r2, r3, #1
 8000fe4:	4193      	sbcs	r3, r2
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	e72f      	b.n	8000e4c <__aeabi_fsub+0x74>
 8000fec:	2320      	movs	r3, #32
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	0001      	movs	r1, r0
 8000ff2:	4098      	lsls	r0, r3
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	40d1      	lsrs	r1, r2
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	4193      	sbcs	r3, r2
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	e712      	b.n	8000e26 <__aeabi_fsub+0x4e>
 8001000:	2fff      	cmp	r7, #255	; 0xff
 8001002:	d0d9      	beq.n	8000fb8 <__aeabi_fsub+0x1e0>
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	4664      	mov	r4, ip
 8001008:	04db      	lsls	r3, r3, #19
 800100a:	431c      	orrs	r4, r3
 800100c:	46a4      	mov	ip, r4
 800100e:	2a1b      	cmp	r2, #27
 8001010:	dd52      	ble.n	80010b8 <__aeabi_fsub+0x2e0>
 8001012:	2301      	movs	r3, #1
 8001014:	000c      	movs	r4, r1
 8001016:	003d      	movs	r5, r7
 8001018:	1ac3      	subs	r3, r0, r3
 800101a:	e706      	b.n	8000e2a <__aeabi_fsub+0x52>
 800101c:	4663      	mov	r3, ip
 800101e:	1a1e      	subs	r6, r3, r0
 8001020:	0173      	lsls	r3, r6, #5
 8001022:	d439      	bmi.n	8001098 <__aeabi_fsub+0x2c0>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_fsub+0x252>
 8001028:	e704      	b.n	8000e34 <__aeabi_fsub+0x5c>
 800102a:	2400      	movs	r4, #0
 800102c:	2200      	movs	r2, #0
 800102e:	2600      	movs	r6, #0
 8001030:	e71d      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001032:	2320      	movs	r3, #32
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	0001      	movs	r1, r0
 8001038:	4098      	lsls	r0, r3
 800103a:	0003      	movs	r3, r0
 800103c:	40d1      	lsrs	r1, r2
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	4193      	sbcs	r3, r2
 8001042:	430b      	orrs	r3, r1
 8001044:	e729      	b.n	8000e9a <__aeabi_fsub+0xc2>
 8001046:	2d00      	cmp	r5, #0
 8001048:	d1a9      	bne.n	8000f9e <__aeabi_fsub+0x1c6>
 800104a:	4663      	mov	r3, ip
 800104c:	2b00      	cmp	r3, #0
 800104e:	d056      	beq.n	80010fe <__aeabi_fsub+0x326>
 8001050:	2200      	movs	r2, #0
 8001052:	2800      	cmp	r0, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_fsub+0x280>
 8001056:	e70a      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001058:	0003      	movs	r3, r0
 800105a:	4463      	add	r3, ip
 800105c:	015a      	lsls	r2, r3, #5
 800105e:	d594      	bpl.n	8000f8a <__aeabi_fsub+0x1b2>
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <__aeabi_fsub+0x338>)
 8001062:	3501      	adds	r5, #1
 8001064:	4013      	ands	r3, r2
 8001066:	e790      	b.n	8000f8a <__aeabi_fsub+0x1b2>
 8001068:	4663      	mov	r3, ip
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0af      	beq.n	8000fce <__aeabi_fsub+0x1f6>
 800106e:	1e53      	subs	r3, r2, #1
 8001070:	2a01      	cmp	r2, #1
 8001072:	d015      	beq.n	80010a0 <__aeabi_fsub+0x2c8>
 8001074:	2aff      	cmp	r2, #255	; 0xff
 8001076:	d02a      	beq.n	80010ce <__aeabi_fsub+0x2f6>
 8001078:	001a      	movs	r2, r3
 800107a:	e752      	b.n	8000f22 <__aeabi_fsub+0x14a>
 800107c:	4662      	mov	r2, ip
 800107e:	2a00      	cmp	r2, #0
 8001080:	d191      	bne.n	8000fa6 <__aeabi_fsub+0x1ce>
 8001082:	2800      	cmp	r0, #0
 8001084:	d198      	bne.n	8000fb8 <__aeabi_fsub+0x1e0>
 8001086:	2680      	movs	r6, #128	; 0x80
 8001088:	2400      	movs	r4, #0
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	03f6      	lsls	r6, r6, #15
 800108e:	e6ee      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001090:	000c      	movs	r4, r1
 8001092:	4643      	mov	r3, r8
 8001094:	0015      	movs	r5, r2
 8001096:	e77c      	b.n	8000f92 <__aeabi_fsub+0x1ba>
 8001098:	4663      	mov	r3, ip
 800109a:	000c      	movs	r4, r1
 800109c:	1ac6      	subs	r6, r0, r3
 800109e:	e6c9      	b.n	8000e34 <__aeabi_fsub+0x5c>
 80010a0:	0003      	movs	r3, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	2501      	movs	r5, #1
 80010a6:	015a      	lsls	r2, r3, #5
 80010a8:	d400      	bmi.n	80010ac <__aeabi_fsub+0x2d4>
 80010aa:	e76e      	b.n	8000f8a <__aeabi_fsub+0x1b2>
 80010ac:	2502      	movs	r5, #2
 80010ae:	e6fa      	b.n	8000ea6 <__aeabi_fsub+0xce>
 80010b0:	4663      	mov	r3, ip
 80010b2:	2501      	movs	r5, #1
 80010b4:	1a1b      	subs	r3, r3, r0
 80010b6:	e6b8      	b.n	8000e2a <__aeabi_fsub+0x52>
 80010b8:	4664      	mov	r4, ip
 80010ba:	2320      	movs	r3, #32
 80010bc:	40d4      	lsrs	r4, r2
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	4662      	mov	r2, ip
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	4193      	sbcs	r3, r2
 80010ca:	4323      	orrs	r3, r4
 80010cc:	e7a2      	b.n	8001014 <__aeabi_fsub+0x23c>
 80010ce:	4643      	mov	r3, r8
 80010d0:	e774      	b.n	8000fbc <__aeabi_fsub+0x1e4>
 80010d2:	4661      	mov	r1, ip
 80010d4:	2320      	movs	r3, #32
 80010d6:	40d1      	lsrs	r1, r2
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	4662      	mov	r2, ip
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	4193      	sbcs	r3, r2
 80010e4:	430b      	orrs	r3, r1
 80010e6:	e720      	b.n	8000f2a <__aeabi_fsub+0x152>
 80010e8:	4663      	mov	r3, ip
 80010ea:	000c      	movs	r4, r1
 80010ec:	2501      	movs	r5, #1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e69b      	b.n	8000e2a <__aeabi_fsub+0x52>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d099      	beq.n	800102a <__aeabi_fsub+0x252>
 80010f6:	000c      	movs	r4, r1
 80010f8:	4646      	mov	r6, r8
 80010fa:	2200      	movs	r2, #0
 80010fc:	e6b7      	b.n	8000e6e <__aeabi_fsub+0x96>
 80010fe:	4646      	mov	r6, r8
 8001100:	2200      	movs	r2, #0
 8001102:	e6b4      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001104:	2b00      	cmp	r3, #0
 8001106:	d000      	beq.n	800110a <__aeabi_fsub+0x332>
 8001108:	e73f      	b.n	8000f8a <__aeabi_fsub+0x1b2>
 800110a:	2400      	movs	r4, #0
 800110c:	2600      	movs	r6, #0
 800110e:	e6ae      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001110:	fbffffff 	.word	0xfbffffff
 8001114:	7dffffff 	.word	0x7dffffff

08001118 <__aeabi_fcmpun>:
 8001118:	0243      	lsls	r3, r0, #9
 800111a:	024a      	lsls	r2, r1, #9
 800111c:	0040      	lsls	r0, r0, #1
 800111e:	0049      	lsls	r1, r1, #1
 8001120:	0a5b      	lsrs	r3, r3, #9
 8001122:	0a52      	lsrs	r2, r2, #9
 8001124:	0e09      	lsrs	r1, r1, #24
 8001126:	0e00      	lsrs	r0, r0, #24
 8001128:	28ff      	cmp	r0, #255	; 0xff
 800112a:	d006      	beq.n	800113a <__aeabi_fcmpun+0x22>
 800112c:	2000      	movs	r0, #0
 800112e:	29ff      	cmp	r1, #255	; 0xff
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x20>
 8001132:	1e53      	subs	r3, r2, #1
 8001134:	419a      	sbcs	r2, r3
 8001136:	0010      	movs	r0, r2
 8001138:	4770      	bx	lr
 800113a:	38fe      	subs	r0, #254	; 0xfe
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1fb      	bne.n	8001138 <__aeabi_fcmpun+0x20>
 8001140:	e7f4      	b.n	800112c <__aeabi_fcmpun+0x14>
 8001142:	46c0      	nop			; (mov r8, r8)

08001144 <__aeabi_f2iz>:
 8001144:	0241      	lsls	r1, r0, #9
 8001146:	0042      	lsls	r2, r0, #1
 8001148:	0fc3      	lsrs	r3, r0, #31
 800114a:	0a49      	lsrs	r1, r1, #9
 800114c:	2000      	movs	r0, #0
 800114e:	0e12      	lsrs	r2, r2, #24
 8001150:	2a7e      	cmp	r2, #126	; 0x7e
 8001152:	dd03      	ble.n	800115c <__aeabi_f2iz+0x18>
 8001154:	2a9d      	cmp	r2, #157	; 0x9d
 8001156:	dd02      	ble.n	800115e <__aeabi_f2iz+0x1a>
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_f2iz+0x3c>)
 800115a:	1898      	adds	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	0400      	lsls	r0, r0, #16
 8001162:	4301      	orrs	r1, r0
 8001164:	2a95      	cmp	r2, #149	; 0x95
 8001166:	dc07      	bgt.n	8001178 <__aeabi_f2iz+0x34>
 8001168:	2096      	movs	r0, #150	; 0x96
 800116a:	1a82      	subs	r2, r0, r2
 800116c:	40d1      	lsrs	r1, r2
 800116e:	4248      	negs	r0, r1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f3      	bne.n	800115c <__aeabi_f2iz+0x18>
 8001174:	0008      	movs	r0, r1
 8001176:	e7f1      	b.n	800115c <__aeabi_f2iz+0x18>
 8001178:	3a96      	subs	r2, #150	; 0x96
 800117a:	4091      	lsls	r1, r2
 800117c:	e7f7      	b.n	800116e <__aeabi_f2iz+0x2a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	7fffffff 	.word	0x7fffffff

08001184 <__aeabi_i2f>:
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	2800      	cmp	r0, #0
 8001188:	d013      	beq.n	80011b2 <__aeabi_i2f+0x2e>
 800118a:	17c3      	asrs	r3, r0, #31
 800118c:	18c5      	adds	r5, r0, r3
 800118e:	405d      	eors	r5, r3
 8001190:	0fc4      	lsrs	r4, r0, #31
 8001192:	0028      	movs	r0, r5
 8001194:	f000 f848 	bl	8001228 <__clzsi2>
 8001198:	239e      	movs	r3, #158	; 0x9e
 800119a:	0001      	movs	r1, r0
 800119c:	1a1b      	subs	r3, r3, r0
 800119e:	2b96      	cmp	r3, #150	; 0x96
 80011a0:	dc0f      	bgt.n	80011c2 <__aeabi_i2f+0x3e>
 80011a2:	2808      	cmp	r0, #8
 80011a4:	d031      	beq.n	800120a <__aeabi_i2f+0x86>
 80011a6:	3908      	subs	r1, #8
 80011a8:	408d      	lsls	r5, r1
 80011aa:	026d      	lsls	r5, r5, #9
 80011ac:	0a6d      	lsrs	r5, r5, #9
 80011ae:	b2d8      	uxtb	r0, r3
 80011b0:	e002      	b.n	80011b8 <__aeabi_i2f+0x34>
 80011b2:	2400      	movs	r4, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	2500      	movs	r5, #0
 80011b8:	05c0      	lsls	r0, r0, #23
 80011ba:	4328      	orrs	r0, r5
 80011bc:	07e4      	lsls	r4, r4, #31
 80011be:	4320      	orrs	r0, r4
 80011c0:	bd70      	pop	{r4, r5, r6, pc}
 80011c2:	2b99      	cmp	r3, #153	; 0x99
 80011c4:	dd0c      	ble.n	80011e0 <__aeabi_i2f+0x5c>
 80011c6:	2205      	movs	r2, #5
 80011c8:	1a12      	subs	r2, r2, r0
 80011ca:	0028      	movs	r0, r5
 80011cc:	40d0      	lsrs	r0, r2
 80011ce:	0002      	movs	r2, r0
 80011d0:	0008      	movs	r0, r1
 80011d2:	301b      	adds	r0, #27
 80011d4:	4085      	lsls	r5, r0
 80011d6:	0028      	movs	r0, r5
 80011d8:	1e45      	subs	r5, r0, #1
 80011da:	41a8      	sbcs	r0, r5
 80011dc:	4302      	orrs	r2, r0
 80011de:	0015      	movs	r5, r2
 80011e0:	2905      	cmp	r1, #5
 80011e2:	dc16      	bgt.n	8001212 <__aeabi_i2f+0x8e>
 80011e4:	002a      	movs	r2, r5
 80011e6:	480f      	ldr	r0, [pc, #60]	; (8001224 <__aeabi_i2f+0xa0>)
 80011e8:	4002      	ands	r2, r0
 80011ea:	076e      	lsls	r6, r5, #29
 80011ec:	d009      	beq.n	8001202 <__aeabi_i2f+0x7e>
 80011ee:	260f      	movs	r6, #15
 80011f0:	4035      	ands	r5, r6
 80011f2:	2d04      	cmp	r5, #4
 80011f4:	d005      	beq.n	8001202 <__aeabi_i2f+0x7e>
 80011f6:	3204      	adds	r2, #4
 80011f8:	0155      	lsls	r5, r2, #5
 80011fa:	d502      	bpl.n	8001202 <__aeabi_i2f+0x7e>
 80011fc:	239f      	movs	r3, #159	; 0x9f
 80011fe:	4002      	ands	r2, r0
 8001200:	1a5b      	subs	r3, r3, r1
 8001202:	0192      	lsls	r2, r2, #6
 8001204:	0a55      	lsrs	r5, r2, #9
 8001206:	b2d8      	uxtb	r0, r3
 8001208:	e7d6      	b.n	80011b8 <__aeabi_i2f+0x34>
 800120a:	026d      	lsls	r5, r5, #9
 800120c:	2096      	movs	r0, #150	; 0x96
 800120e:	0a6d      	lsrs	r5, r5, #9
 8001210:	e7d2      	b.n	80011b8 <__aeabi_i2f+0x34>
 8001212:	1f4a      	subs	r2, r1, #5
 8001214:	4095      	lsls	r5, r2
 8001216:	002a      	movs	r2, r5
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <__aeabi_i2f+0xa0>)
 800121a:	4002      	ands	r2, r0
 800121c:	076e      	lsls	r6, r5, #29
 800121e:	d0f0      	beq.n	8001202 <__aeabi_i2f+0x7e>
 8001220:	e7e5      	b.n	80011ee <__aeabi_i2f+0x6a>
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	fbffffff 	.word	0xfbffffff

08001228 <__clzsi2>:
 8001228:	211c      	movs	r1, #28
 800122a:	2301      	movs	r3, #1
 800122c:	041b      	lsls	r3, r3, #16
 800122e:	4298      	cmp	r0, r3
 8001230:	d301      	bcc.n	8001236 <__clzsi2+0xe>
 8001232:	0c00      	lsrs	r0, r0, #16
 8001234:	3910      	subs	r1, #16
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	4298      	cmp	r0, r3
 800123a:	d301      	bcc.n	8001240 <__clzsi2+0x18>
 800123c:	0a00      	lsrs	r0, r0, #8
 800123e:	3908      	subs	r1, #8
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	4298      	cmp	r0, r3
 8001244:	d301      	bcc.n	800124a <__clzsi2+0x22>
 8001246:	0900      	lsrs	r0, r0, #4
 8001248:	3904      	subs	r1, #4
 800124a:	a202      	add	r2, pc, #8	; (adr r2, 8001254 <__clzsi2+0x2c>)
 800124c:	5c10      	ldrb	r0, [r2, r0]
 800124e:	1840      	adds	r0, r0, r1
 8001250:	4770      	bx	lr
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	02020304 	.word	0x02020304
 8001258:	01010101 	.word	0x01010101
	...

08001264 <updateBulkLightSettings>:
 * 
 * @param report_buffer A pointer to the buffer containing the light settings report
 * @param buffer_length The length of the report buffer
 */
void updateBulkLightSettings(uint8_t *report_buffer, uint16_t buffer_length)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	000a      	movs	r2, r1
 800126e:	1cbb      	adds	r3, r7, #2
 8001270:	801a      	strh	r2, [r3, #0]
  // Increment report_buffer pointer by 1 to skip the BULK_SETTINGS_LOAD command report byte
  report_buffer += 1;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3301      	adds	r3, #1
 8001276:	607b      	str	r3, [r7, #4]

  // Update LightingConfiguration for each lighting mode
  LightingConfiguration* configs[] = {&idleLightingConfig, &buttonPressLightingConfig, &lidLiftLightingConfig};
 8001278:	2308      	movs	r3, #8
 800127a:	18fb      	adds	r3, r7, r3
 800127c:	4a41      	ldr	r2, [pc, #260]	; (8001384 <updateBulkLightSettings+0x120>)
 800127e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001280:	c313      	stmia	r3!, {r0, r1, r4}

  for (int i = 0; i < sizeof(configs)/sizeof(configs[0]); i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e071      	b.n	800136c <updateBulkLightSettings+0x108>
    configs[i]->pattern = report_buffer[0];
 8001288:	2008      	movs	r0, #8
 800128a:	183b      	adds	r3, r7, r0
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	58d3      	ldr	r3, [r2, r3]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	705a      	strb	r2, [r3, #1]
    configs[i]->brightness = report_buffer[1];
 8001298:	183b      	adds	r3, r7, r0
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	58d3      	ldr	r3, [r2, r3]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	7852      	ldrb	r2, [r2, #1]
 80012a4:	709a      	strb	r2, [r3, #2]
    configs[i]->patternSpeed = report_buffer[2];
 80012a6:	183b      	adds	r3, r7, r0
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	58d3      	ldr	r3, [r2, r3]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	7892      	ldrb	r2, [r2, #2]
 80012b2:	70da      	strb	r2, [r3, #3]
    configs[i]->frameColor1 = (report_buffer[3] << 16) | (report_buffer[4] << 8) | report_buffer[5];
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3303      	adds	r3, #3
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3304      	adds	r3, #4
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	4313      	orrs	r3, r2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	3205      	adds	r2, #5
 80012ca:	7812      	ldrb	r2, [r2, #0]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	0019      	movs	r1, r3
 80012d0:	183b      	adds	r3, r7, r0
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	58d3      	ldr	r3, [r2, r3]
 80012d8:	000a      	movs	r2, r1
 80012da:	605a      	str	r2, [r3, #4]
    configs[i]->frameColor2 = (report_buffer[6] << 16) | (report_buffer[7] << 8) | report_buffer[8];
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3306      	adds	r3, #6
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	041a      	lsls	r2, r3, #16
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3307      	adds	r3, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	4313      	orrs	r3, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	7812      	ldrb	r2, [r2, #0]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	0019      	movs	r1, r3
 80012f8:	183b      	adds	r3, r7, r0
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	58d3      	ldr	r3, [r2, r3]
 8001300:	000a      	movs	r2, r1
 8001302:	609a      	str	r2, [r3, #8]
    configs[i]->buttonColor1 = (report_buffer[9] << 16) | (report_buffer[10] << 8) | report_buffer[11];
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3309      	adds	r3, #9
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	041a      	lsls	r2, r3, #16
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	330a      	adds	r3, #10
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4313      	orrs	r3, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	320b      	adds	r2, #11
 800131a:	7812      	ldrb	r2, [r2, #0]
 800131c:	4313      	orrs	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	183b      	adds	r3, r7, r0
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	58d3      	ldr	r3, [r2, r3]
 8001328:	000a      	movs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]
    configs[i]->buttonColor2 = (report_buffer[12] << 16) | (report_buffer[13] << 8) | report_buffer[14];
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	330c      	adds	r3, #12
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	041a      	lsls	r2, r3, #16
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	330d      	adds	r3, #13
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	4313      	orrs	r3, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	320e      	adds	r2, #14
 8001342:	7812      	ldrb	r2, [r2, #0]
 8001344:	4313      	orrs	r3, r2
 8001346:	0019      	movs	r1, r3
 8001348:	183b      	adds	r3, r7, r0
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	58d3      	ldr	r3, [r2, r3]
 8001350:	000a      	movs	r2, r1
 8001352:	611a      	str	r2, [r3, #16]
  
    configs[i]->settingChanged = true;
 8001354:	183b      	adds	r3, r7, r0
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	58d3      	ldr	r3, [r2, r3]
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]

    // Move to the start of the next category in buffer
    report_buffer += CATEGORY_SIZE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	330f      	adds	r3, #15
 8001364:	607b      	str	r3, [r7, #4]
  for (int i = 0; i < sizeof(configs)/sizeof(configs[0]); i++) {
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d98a      	bls.n	8001288 <updateBulkLightSettings+0x24>
  }

  buttonConfig.lightDuration = report_buffer[0];
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	001a      	movs	r2, r3
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <updateBulkLightSettings+0x124>)
 800137a:	601a      	str	r2, [r3, #0]
}
 800137c:	46c0      	nop			; (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	b007      	add	sp, #28
 8001382:	bd90      	pop	{r4, r7, pc}
 8001384:	0800bd08 	.word	0x0800bd08
 8001388:	20000218 	.word	0x20000218

0800138c <UpdateLightingConfiguration>:
 * @brief Update the lighting configuration based on the report type and value.
 * @param config: The lighting configuration to update.
 * @param report: The type of report which determines what part of the configuration to update.
 * @param value: The new value to set in the configuration.
 */
void UpdateLightingConfiguration(LightingConfiguration* config, ReportLightEnum report, uint32_t value) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	200b      	movs	r0, #11
 8001398:	183b      	adds	r3, r7, r0
 800139a:	1c0a      	adds	r2, r1, #0
 800139c:	701a      	strb	r2, [r3, #0]
  // Depending on the report type, update the corresponding configuration parameter
  switch(report) {
 800139e:	183b      	adds	r3, r7, r0
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d849      	bhi.n	800143a <UpdateLightingConfiguration+0xae>
 80013a6:	009a      	lsls	r2, r3, #2
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <UpdateLightingConfiguration+0xc0>)
 80013aa:	18d3      	adds	r3, r2, r3
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	469f      	mov	pc, r3
    case REPORT_PATTERN:
      config->pattern = (LightingPattern)value;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	705a      	strb	r2, [r3, #1]
      break;
 80013b8:	e040      	b.n	800143c <UpdateLightingConfiguration+0xb0>
    case REPORT_PATTERN_SPEED:
      if(value > 100)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b64      	cmp	r3, #100	; 0x64
 80013be:	d901      	bls.n	80013c4 <UpdateLightingConfiguration+0x38>
        value = 100;
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	607b      	str	r3, [r7, #4]
      config->patternSpeed = value;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	70da      	strb	r2, [r3, #3]
      break;
 80013cc:	e036      	b.n	800143c <UpdateLightingConfiguration+0xb0>
    case REPORT_BRIGHTNESS:
      if(value > 100)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b64      	cmp	r3, #100	; 0x64
 80013d2:	d901      	bls.n	80013d8 <UpdateLightingConfiguration+0x4c>
        value = 100;
 80013d4:	2364      	movs	r3, #100	; 0x64
 80013d6:	607b      	str	r3, [r7, #4]
      config->brightness = value;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	709a      	strb	r2, [r3, #2]
      break;
 80013e0:	e02c      	b.n	800143c <UpdateLightingConfiguration+0xb0>
    case REPORT_FRAME_COLOR1:
      if(value > 0xFFFFFF)
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	045b      	lsls	r3, r3, #17
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d301      	bcc.n	80013f0 <UpdateLightingConfiguration+0x64>
        value = 0xFFFFFF;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <UpdateLightingConfiguration+0xc4>)
 80013ee:	607b      	str	r3, [r7, #4]
      config->frameColor1 = value;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	605a      	str	r2, [r3, #4]
      break;
 80013f6:	e021      	b.n	800143c <UpdateLightingConfiguration+0xb0>
    case REPORT_FRAME_COLOR2:
    if(value > 0xFFFFFF)
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	045b      	lsls	r3, r3, #17
 80013fe:	429a      	cmp	r2, r3
 8001400:	d301      	bcc.n	8001406 <UpdateLightingConfiguration+0x7a>
        value = 0xFFFFFF;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <UpdateLightingConfiguration+0xc4>)
 8001404:	607b      	str	r3, [r7, #4]
      config->frameColor2 = value;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	609a      	str	r2, [r3, #8]
      break;
 800140c:	e016      	b.n	800143c <UpdateLightingConfiguration+0xb0>
    case REPORT_BUTTON_COLOR1:
    if(value > 0xFFFFFF)
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	045b      	lsls	r3, r3, #17
 8001414:	429a      	cmp	r2, r3
 8001416:	d301      	bcc.n	800141c <UpdateLightingConfiguration+0x90>
        value = 0xFFFFFF;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <UpdateLightingConfiguration+0xc4>)
 800141a:	607b      	str	r3, [r7, #4]
      config->buttonColor1 = value;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	60da      	str	r2, [r3, #12]
      break;
 8001422:	e00b      	b.n	800143c <UpdateLightingConfiguration+0xb0>
    case REPORT_BUTTON_COLOR2:
    if(value > 0xFFFFFF)
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	045b      	lsls	r3, r3, #17
 800142a:	429a      	cmp	r2, r3
 800142c:	d301      	bcc.n	8001432 <UpdateLightingConfiguration+0xa6>
        value = 0xFFFFFF;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <UpdateLightingConfiguration+0xc4>)
 8001430:	607b      	str	r3, [r7, #4]
      config->buttonColor2 = value;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	611a      	str	r2, [r3, #16]
      break;
 8001438:	e000      	b.n	800143c <UpdateLightingConfiguration+0xb0>
    default:
      // Unknown report type
      break;
 800143a:	46c0      	nop			; (mov r8, r8)
  }
  // Indicate that the configuration has changed
  config->settingChanged = true;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b004      	add	sp, #16
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	0800bde8 	.word	0x0800bde8
 8001450:	00ffffff 	.word	0x00ffffff

08001454 <UpdateButtonConfiguration>:
 * @brief Update the button configuration based on the report type and value.
 * @param config: The button configuration to update.
 * @param report: The type of report which determines what part of the configuration to update.
 * @param value: The new value to set in the configuration.
 */
void UpdateButtonConfiguration(ButtonConfiguration* config, ReportBtnEnum report, uint32_t value) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	200b      	movs	r0, #11
 8001460:	183b      	adds	r3, r7, r0
 8001462:	1c0a      	adds	r2, r1, #0
 8001464:	701a      	strb	r2, [r3, #0]
  // Depending on the report type, update the corresponding configuration parameter
  switch(report) {
 8001466:	183b      	adds	r3, r7, r0
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <UpdateButtonConfiguration+0x22>
    case REPORT_BUTTON_DURATION:
      config->lightDuration = value;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	601a      	str	r2, [r3, #0]
      break;
 8001474:	e000      	b.n	8001478 <UpdateButtonConfiguration+0x24>
    default:
      // Unknown report type
      break;
 8001476:	46c0      	nop			; (mov r8, r8)
  }
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b004      	add	sp, #16
 800147e:	bd80      	pop	{r7, pc}

08001480 <lerp>:

float lerp(float a, float b, float t) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
    return a + t * (b - a);
 800148c:	68f9      	ldr	r1, [r7, #12]
 800148e:	68b8      	ldr	r0, [r7, #8]
 8001490:	f7ff fca2 	bl	8000dd8 <__aeabi_fsub>
 8001494:	1c03      	adds	r3, r0, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	1c18      	adds	r0, r3, #0
 800149a:	f7ff fb4f 	bl	8000b3c <__aeabi_fmul>
 800149e:	1c03      	adds	r3, r0, #0
 80014a0:	68f9      	ldr	r1, [r7, #12]
 80014a2:	1c18      	adds	r0, r3, #0
 80014a4:	f7fe ffe0 	bl	8000468 <__aeabi_fadd>
 80014a8:	1c03      	adds	r3, r0, #0
}
 80014aa:	1c18      	adds	r0, r3, #0
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b004      	add	sp, #16
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <LightingHandler>:

HAL_StatusTypeDef LightingHandler(void)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af02      	add	r7, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 80014ba:	2327      	movs	r3, #39	; 0x27
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
  int r, g, b;
  int color1, color2, interpolatedColor;
  float speed, hueIncrement;

  if (activeLightingConfig->settingChanged == true) {
 80014c2:	4bea      	ldr	r3, [pc, #936]	; (800186c <LightingHandler+0x3b8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <LightingHandler+0x20>
    activeLightingConfig->settingChanged = false;
 80014cc:	4be7      	ldr	r3, [pc, #924]	; (800186c <LightingHandler+0x3b8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
  }

  switch(activeLightingConfig->pattern) {
 80014d4:	4be5      	ldr	r3, [pc, #916]	; (800186c <LightingHandler+0x3b8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	785b      	ldrb	r3, [r3, #1]
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d901      	bls.n	80014e2 <LightingHandler+0x2e>
 80014de:	f000 ff56 	bl	800238e <LightingHandler+0xeda>
 80014e2:	009a      	lsls	r2, r3, #2
 80014e4:	4be2      	ldr	r3, [pc, #904]	; (8001870 <LightingHandler+0x3bc>)
 80014e6:	18d3      	adds	r3, r2, r3
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	469f      	mov	pc, r3
    case PATTERN_NONE:
      LP5024_SetColor_All(0);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f000 ffef 	bl	80024d0 <LP5024_SetColor_All>
      break;
 80014f2:	f000 ff55 	bl	80023a0 <LightingHandler+0xeec>
      
    case PATTERN_STATIC:
      status = LP5024_SetColor(LED7, Adjust_Color_Brightness(activeLightingConfig->buttonColor1, activeLightingConfig->brightness));
 80014f6:	4bdd      	ldr	r3, [pc, #884]	; (800186c <LightingHandler+0x3b8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	4bdb      	ldr	r3, [pc, #876]	; (800186c <LightingHandler+0x3b8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	789b      	ldrb	r3, [r3, #2]
 8001502:	0019      	movs	r1, r3
 8001504:	0010      	movs	r0, r2
 8001506:	f001 f86f 	bl	80025e8 <Adjust_Color_Brightness>
 800150a:	0003      	movs	r3, r0
 800150c:	2527      	movs	r5, #39	; 0x27
 800150e:	197c      	adds	r4, r7, r5
 8001510:	0019      	movs	r1, r3
 8001512:	2024      	movs	r0, #36	; 0x24
 8001514:	f000 ffa0 	bl	8002458 <LP5024_SetColor>
 8001518:	0003      	movs	r3, r0
 800151a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 800151c:	197b      	adds	r3, r7, r5
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <LightingHandler+0x78>
 8001524:	197b      	adds	r3, r7, r5
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	f000 ff3d 	bl	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED6, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 800152c:	4bcf      	ldr	r3, [pc, #828]	; (800186c <LightingHandler+0x3b8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	4bce      	ldr	r3, [pc, #824]	; (800186c <LightingHandler+0x3b8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	789b      	ldrb	r3, [r3, #2]
 8001538:	0019      	movs	r1, r3
 800153a:	0010      	movs	r0, r2
 800153c:	f001 f854 	bl	80025e8 <Adjust_Color_Brightness>
 8001540:	0003      	movs	r3, r0
 8001542:	2527      	movs	r5, #39	; 0x27
 8001544:	197c      	adds	r4, r7, r5
 8001546:	0019      	movs	r1, r3
 8001548:	2021      	movs	r0, #33	; 0x21
 800154a:	f000 ff85 	bl	8002458 <LP5024_SetColor>
 800154e:	0003      	movs	r3, r0
 8001550:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001552:	197b      	adds	r3, r7, r5
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <LightingHandler+0xae>
 800155a:	197b      	adds	r3, r7, r5
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f000 ff22 	bl	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED5, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001562:	4bc2      	ldr	r3, [pc, #776]	; (800186c <LightingHandler+0x3b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4bc0      	ldr	r3, [pc, #768]	; (800186c <LightingHandler+0x3b8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	789b      	ldrb	r3, [r3, #2]
 800156e:	0019      	movs	r1, r3
 8001570:	0010      	movs	r0, r2
 8001572:	f001 f839 	bl	80025e8 <Adjust_Color_Brightness>
 8001576:	0003      	movs	r3, r0
 8001578:	2527      	movs	r5, #39	; 0x27
 800157a:	197c      	adds	r4, r7, r5
 800157c:	0019      	movs	r1, r3
 800157e:	201e      	movs	r0, #30
 8001580:	f000 ff6a 	bl	8002458 <LP5024_SetColor>
 8001584:	0003      	movs	r3, r0
 8001586:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001588:	197b      	adds	r3, r7, r5
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <LightingHandler+0xe4>
 8001590:	197b      	adds	r3, r7, r5
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	f000 ff07 	bl	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED4, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001598:	4bb4      	ldr	r3, [pc, #720]	; (800186c <LightingHandler+0x3b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	4bb3      	ldr	r3, [pc, #716]	; (800186c <LightingHandler+0x3b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	789b      	ldrb	r3, [r3, #2]
 80015a4:	0019      	movs	r1, r3
 80015a6:	0010      	movs	r0, r2
 80015a8:	f001 f81e 	bl	80025e8 <Adjust_Color_Brightness>
 80015ac:	0003      	movs	r3, r0
 80015ae:	2527      	movs	r5, #39	; 0x27
 80015b0:	197c      	adds	r4, r7, r5
 80015b2:	0019      	movs	r1, r3
 80015b4:	201b      	movs	r0, #27
 80015b6:	f000 ff4f 	bl	8002458 <LP5024_SetColor>
 80015ba:	0003      	movs	r3, r0
 80015bc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 80015be:	197b      	adds	r3, r7, r5
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <LightingHandler+0x11a>
 80015c6:	197b      	adds	r3, r7, r5
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	f000 feec 	bl	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED3, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 80015ce:	4ba7      	ldr	r3, [pc, #668]	; (800186c <LightingHandler+0x3b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4ba5      	ldr	r3, [pc, #660]	; (800186c <LightingHandler+0x3b8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	789b      	ldrb	r3, [r3, #2]
 80015da:	0019      	movs	r1, r3
 80015dc:	0010      	movs	r0, r2
 80015de:	f001 f803 	bl	80025e8 <Adjust_Color_Brightness>
 80015e2:	0003      	movs	r3, r0
 80015e4:	2527      	movs	r5, #39	; 0x27
 80015e6:	197c      	adds	r4, r7, r5
 80015e8:	0019      	movs	r1, r3
 80015ea:	2018      	movs	r0, #24
 80015ec:	f000 ff34 	bl	8002458 <LP5024_SetColor>
 80015f0:	0003      	movs	r3, r0
 80015f2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 80015f4:	197b      	adds	r3, r7, r5
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <LightingHandler+0x150>
 80015fc:	197b      	adds	r3, r7, r5
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	f000 fed1 	bl	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED2, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001604:	4b99      	ldr	r3, [pc, #612]	; (800186c <LightingHandler+0x3b8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4b98      	ldr	r3, [pc, #608]	; (800186c <LightingHandler+0x3b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	789b      	ldrb	r3, [r3, #2]
 8001610:	0019      	movs	r1, r3
 8001612:	0010      	movs	r0, r2
 8001614:	f000 ffe8 	bl	80025e8 <Adjust_Color_Brightness>
 8001618:	0003      	movs	r3, r0
 800161a:	2527      	movs	r5, #39	; 0x27
 800161c:	197c      	adds	r4, r7, r5
 800161e:	0019      	movs	r1, r3
 8001620:	2015      	movs	r0, #21
 8001622:	f000 ff19 	bl	8002458 <LP5024_SetColor>
 8001626:	0003      	movs	r3, r0
 8001628:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 800162a:	197b      	adds	r3, r7, r5
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <LightingHandler+0x186>
 8001632:	197b      	adds	r3, r7, r5
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f000 feb6 	bl	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED1, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 800163a:	4b8c      	ldr	r3, [pc, #560]	; (800186c <LightingHandler+0x3b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	4b8a      	ldr	r3, [pc, #552]	; (800186c <LightingHandler+0x3b8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	789b      	ldrb	r3, [r3, #2]
 8001646:	0019      	movs	r1, r3
 8001648:	0010      	movs	r0, r2
 800164a:	f000 ffcd 	bl	80025e8 <Adjust_Color_Brightness>
 800164e:	0003      	movs	r3, r0
 8001650:	2527      	movs	r5, #39	; 0x27
 8001652:	197c      	adds	r4, r7, r5
 8001654:	0019      	movs	r1, r3
 8001656:	2012      	movs	r0, #18
 8001658:	f000 fefe 	bl	8002458 <LP5024_SetColor>
 800165c:	0003      	movs	r3, r0
 800165e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001660:	197b      	adds	r3, r7, r5
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <LightingHandler+0x1bc>
 8001668:	197b      	adds	r3, r7, r5
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	f000 fe9b 	bl	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED0, Adjust_Color_Brightness(activeLightingConfig->buttonColor1, activeLightingConfig->brightness));
 8001670:	4b7e      	ldr	r3, [pc, #504]	; (800186c <LightingHandler+0x3b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	4b7d      	ldr	r3, [pc, #500]	; (800186c <LightingHandler+0x3b8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	0019      	movs	r1, r3
 800167e:	0010      	movs	r0, r2
 8001680:	f000 ffb2 	bl	80025e8 <Adjust_Color_Brightness>
 8001684:	0003      	movs	r3, r0
 8001686:	2527      	movs	r5, #39	; 0x27
 8001688:	197c      	adds	r4, r7, r5
 800168a:	0019      	movs	r1, r3
 800168c:	200f      	movs	r0, #15
 800168e:	f000 fee3 	bl	8002458 <LP5024_SetColor>
 8001692:	0003      	movs	r3, r0
 8001694:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001696:	197b      	adds	r3, r7, r5
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <LightingHandler+0x1ee>
 800169e:	f000 fe7a 	bl	8002396 <LightingHandler+0xee2>
 80016a2:	197b      	adds	r3, r7, r5
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	f000 fe7e 	bl	80023a6 <LightingHandler+0xef2>
      break;
    case PATTERN_BLINK:
      // Update t based on the transition direction
      speed = SPEED_MIN + (SPEED_MAX - SPEED_MIN) * activeLightingConfig->patternSpeed / 100.0f;
 80016aa:	4b70      	ldr	r3, [pc, #448]	; (800186c <LightingHandler+0x3b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	78db      	ldrb	r3, [r3, #3]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff fd67 	bl	8001184 <__aeabi_i2f>
 80016b6:	1c03      	adds	r3, r0, #0
 80016b8:	496e      	ldr	r1, [pc, #440]	; (8001874 <LightingHandler+0x3c0>)
 80016ba:	1c18      	adds	r0, r3, #0
 80016bc:	f7ff fa3e 	bl	8000b3c <__aeabi_fmul>
 80016c0:	1c03      	adds	r3, r0, #0
 80016c2:	496d      	ldr	r1, [pc, #436]	; (8001878 <LightingHandler+0x3c4>)
 80016c4:	1c18      	adds	r0, r3, #0
 80016c6:	f7ff f86f 	bl	80007a8 <__aeabi_fdiv>
 80016ca:	1c03      	adds	r3, r0, #0
 80016cc:	496b      	ldr	r1, [pc, #428]	; (800187c <LightingHandler+0x3c8>)
 80016ce:	1c18      	adds	r0, r3, #0
 80016d0:	f7fe feca 	bl	8000468 <__aeabi_fadd>
 80016d4:	1c03      	adds	r3, r0, #0
 80016d6:	613b      	str	r3, [r7, #16]
      t += speed * transitionDirection; // Adjust this value to control the speed and direction of the transition
 80016d8:	4b69      	ldr	r3, [pc, #420]	; (8001880 <LightingHandler+0x3cc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0018      	movs	r0, r3
 80016de:	f7ff fd51 	bl	8001184 <__aeabi_i2f>
 80016e2:	1c03      	adds	r3, r0, #0
 80016e4:	6939      	ldr	r1, [r7, #16]
 80016e6:	1c18      	adds	r0, r3, #0
 80016e8:	f7ff fa28 	bl	8000b3c <__aeabi_fmul>
 80016ec:	1c03      	adds	r3, r0, #0
 80016ee:	1c1a      	adds	r2, r3, #0
 80016f0:	4b64      	ldr	r3, [pc, #400]	; (8001884 <LightingHandler+0x3d0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1c19      	adds	r1, r3, #0
 80016f6:	1c10      	adds	r0, r2, #0
 80016f8:	f7fe feb6 	bl	8000468 <__aeabi_fadd>
 80016fc:	1c03      	adds	r3, r0, #0
 80016fe:	1c1a      	adds	r2, r3, #0
 8001700:	4b60      	ldr	r3, [pc, #384]	; (8001884 <LightingHandler+0x3d0>)
 8001702:	601a      	str	r2, [r3, #0]

      // Check if t reaches the limits and handle accordingly
      if (t > 1.0f) {
 8001704:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <LightingHandler+0x3d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	21fe      	movs	r1, #254	; 0xfe
 800170a:	0589      	lsls	r1, r1, #22
 800170c:	1c18      	adds	r0, r3, #0
 800170e:	f7fe fe97 	bl	8000440 <__aeabi_fcmpgt>
 8001712:	1e03      	subs	r3, r0, #0
 8001714:	d100      	bne.n	8001718 <LightingHandler+0x264>
 8001716:	e0ef      	b.n	80018f8 <LightingHandler+0x444>
        t = 1.0f; // Set t to 1.0f for a smooth transition without blink
 8001718:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <LightingHandler+0x3d0>)
 800171a:	22fe      	movs	r2, #254	; 0xfe
 800171c:	0592      	lsls	r2, r2, #22
 800171e:	601a      	str	r2, [r3, #0]
        transitionDirection = -1; // Reverse the transition direction
 8001720:	4b57      	ldr	r3, [pc, #348]	; (8001880 <LightingHandler+0x3cc>)
 8001722:	2201      	movs	r2, #1
 8001724:	4252      	negs	r2, r2
 8001726:	601a      	str	r2, [r3, #0]
        status = LP5024_SetColor(LED7, Adjust_Color_Brightness(activeLightingConfig->buttonColor1, activeLightingConfig->brightness));
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <LightingHandler+0x3b8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	4b4f      	ldr	r3, [pc, #316]	; (800186c <LightingHandler+0x3b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	789b      	ldrb	r3, [r3, #2]
 8001734:	0019      	movs	r1, r3
 8001736:	0010      	movs	r0, r2
 8001738:	f000 ff56 	bl	80025e8 <Adjust_Color_Brightness>
 800173c:	0003      	movs	r3, r0
 800173e:	2527      	movs	r5, #39	; 0x27
 8001740:	197c      	adds	r4, r7, r5
 8001742:	0019      	movs	r1, r3
 8001744:	2024      	movs	r0, #36	; 0x24
 8001746:	f000 fe87 	bl	8002458 <LP5024_SetColor>
 800174a:	0003      	movs	r3, r0
 800174c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 800174e:	197b      	adds	r3, r7, r5
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <LightingHandler+0x2aa>
 8001756:	197b      	adds	r3, r7, r5
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	f000 fe24 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED6, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 800175e:	4b43      	ldr	r3, [pc, #268]	; (800186c <LightingHandler+0x3b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4b41      	ldr	r3, [pc, #260]	; (800186c <LightingHandler+0x3b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	789b      	ldrb	r3, [r3, #2]
 800176a:	0019      	movs	r1, r3
 800176c:	0010      	movs	r0, r2
 800176e:	f000 ff3b 	bl	80025e8 <Adjust_Color_Brightness>
 8001772:	0003      	movs	r3, r0
 8001774:	2527      	movs	r5, #39	; 0x27
 8001776:	197c      	adds	r4, r7, r5
 8001778:	0019      	movs	r1, r3
 800177a:	2021      	movs	r0, #33	; 0x21
 800177c:	f000 fe6c 	bl	8002458 <LP5024_SetColor>
 8001780:	0003      	movs	r3, r0
 8001782:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001784:	197b      	adds	r3, r7, r5
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <LightingHandler+0x2e0>
 800178c:	197b      	adds	r3, r7, r5
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	f000 fe09 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED5, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001794:	4b35      	ldr	r3, [pc, #212]	; (800186c <LightingHandler+0x3b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <LightingHandler+0x3b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	789b      	ldrb	r3, [r3, #2]
 80017a0:	0019      	movs	r1, r3
 80017a2:	0010      	movs	r0, r2
 80017a4:	f000 ff20 	bl	80025e8 <Adjust_Color_Brightness>
 80017a8:	0003      	movs	r3, r0
 80017aa:	2527      	movs	r5, #39	; 0x27
 80017ac:	197c      	adds	r4, r7, r5
 80017ae:	0019      	movs	r1, r3
 80017b0:	201e      	movs	r0, #30
 80017b2:	f000 fe51 	bl	8002458 <LP5024_SetColor>
 80017b6:	0003      	movs	r3, r0
 80017b8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 80017ba:	197b      	adds	r3, r7, r5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <LightingHandler+0x316>
 80017c2:	197b      	adds	r3, r7, r5
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	f000 fdee 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED4, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <LightingHandler+0x3b8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <LightingHandler+0x3b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	789b      	ldrb	r3, [r3, #2]
 80017d6:	0019      	movs	r1, r3
 80017d8:	0010      	movs	r0, r2
 80017da:	f000 ff05 	bl	80025e8 <Adjust_Color_Brightness>
 80017de:	0003      	movs	r3, r0
 80017e0:	2527      	movs	r5, #39	; 0x27
 80017e2:	197c      	adds	r4, r7, r5
 80017e4:	0019      	movs	r1, r3
 80017e6:	201b      	movs	r0, #27
 80017e8:	f000 fe36 	bl	8002458 <LP5024_SetColor>
 80017ec:	0003      	movs	r3, r0
 80017ee:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 80017f0:	197b      	adds	r3, r7, r5
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <LightingHandler+0x34c>
 80017f8:	197b      	adds	r3, r7, r5
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f000 fdd3 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED3, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <LightingHandler+0x3b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <LightingHandler+0x3b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	0019      	movs	r1, r3
 800180e:	0010      	movs	r0, r2
 8001810:	f000 feea 	bl	80025e8 <Adjust_Color_Brightness>
 8001814:	0003      	movs	r3, r0
 8001816:	2527      	movs	r5, #39	; 0x27
 8001818:	197c      	adds	r4, r7, r5
 800181a:	0019      	movs	r1, r3
 800181c:	2018      	movs	r0, #24
 800181e:	f000 fe1b 	bl	8002458 <LP5024_SetColor>
 8001822:	0003      	movs	r3, r0
 8001824:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001826:	197b      	adds	r3, r7, r5
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <LightingHandler+0x382>
 800182e:	197b      	adds	r3, r7, r5
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	f000 fdb8 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED2, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <LightingHandler+0x3b8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <LightingHandler+0x3b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	789b      	ldrb	r3, [r3, #2]
 8001842:	0019      	movs	r1, r3
 8001844:	0010      	movs	r0, r2
 8001846:	f000 fecf 	bl	80025e8 <Adjust_Color_Brightness>
 800184a:	0003      	movs	r3, r0
 800184c:	2527      	movs	r5, #39	; 0x27
 800184e:	197c      	adds	r4, r7, r5
 8001850:	0019      	movs	r1, r3
 8001852:	2015      	movs	r0, #21
 8001854:	f000 fe00 	bl	8002458 <LP5024_SetColor>
 8001858:	0003      	movs	r3, r0
 800185a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 800185c:	197b      	adds	r3, r7, r5
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d011      	beq.n	8001888 <LightingHandler+0x3d4>
 8001864:	197b      	adds	r3, r7, r5
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f000 fd9d 	bl	80023a6 <LightingHandler+0xef2>
 800186c:	20000000 	.word	0x20000000
 8001870:	0800be04 	.word	0x0800be04
 8001874:	3dcac083 	.word	0x3dcac083
 8001878:	42c80000 	.word	0x42c80000
 800187c:	3a83126f 	.word	0x3a83126f
 8001880:	20000004 	.word	0x20000004
 8001884:	20000220 	.word	0x20000220
        status = LP5024_SetColor(LED1, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001888:	4be7      	ldr	r3, [pc, #924]	; (8001c28 <LightingHandler+0x774>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4be6      	ldr	r3, [pc, #920]	; (8001c28 <LightingHandler+0x774>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	789b      	ldrb	r3, [r3, #2]
 8001894:	0019      	movs	r1, r3
 8001896:	0010      	movs	r0, r2
 8001898:	f000 fea6 	bl	80025e8 <Adjust_Color_Brightness>
 800189c:	0003      	movs	r3, r0
 800189e:	2527      	movs	r5, #39	; 0x27
 80018a0:	197c      	adds	r4, r7, r5
 80018a2:	0019      	movs	r1, r3
 80018a4:	2012      	movs	r0, #18
 80018a6:	f000 fdd7 	bl	8002458 <LP5024_SetColor>
 80018aa:	0003      	movs	r3, r0
 80018ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 80018ae:	197b      	adds	r3, r7, r5
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <LightingHandler+0x40a>
 80018b6:	197b      	adds	r3, r7, r5
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f000 fd74 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED0, Adjust_Color_Brightness(activeLightingConfig->buttonColor1, activeLightingConfig->brightness));
 80018be:	4bda      	ldr	r3, [pc, #872]	; (8001c28 <LightingHandler+0x774>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	4bd8      	ldr	r3, [pc, #864]	; (8001c28 <LightingHandler+0x774>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	789b      	ldrb	r3, [r3, #2]
 80018ca:	0019      	movs	r1, r3
 80018cc:	0010      	movs	r0, r2
 80018ce:	f000 fe8b 	bl	80025e8 <Adjust_Color_Brightness>
 80018d2:	0003      	movs	r3, r0
 80018d4:	2527      	movs	r5, #39	; 0x27
 80018d6:	197c      	adds	r4, r7, r5
 80018d8:	0019      	movs	r1, r3
 80018da:	200f      	movs	r0, #15
 80018dc:	f000 fdbc 	bl	8002458 <LP5024_SetColor>
 80018e0:	0003      	movs	r3, r0
 80018e2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 80018e4:	197b      	adds	r3, r7, r5
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <LightingHandler+0x43c>
 80018ec:	f000 fd55 	bl	800239a <LightingHandler+0xee6>
 80018f0:	197b      	adds	r3, r7, r5
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	f000 fd57 	bl	80023a6 <LightingHandler+0xef2>
      } else if (t < 0.0f) {
 80018f8:	4bcc      	ldr	r3, [pc, #816]	; (8001c2c <LightingHandler+0x778>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2100      	movs	r1, #0
 80018fe:	1c18      	adds	r0, r3, #0
 8001900:	f7fe fd8a 	bl	8000418 <__aeabi_fcmplt>
 8001904:	1e03      	subs	r3, r0, #0
 8001906:	d101      	bne.n	800190c <LightingHandler+0x458>
        t = -t; // Calculate the absolute value of t
        transitionDirection = 1; // Reverse the transition direction
        LP5024_SetColor_All(0);
      }
      break;
 8001908:	f000 fd47 	bl	800239a <LightingHandler+0xee6>
        t = -t; // Calculate the absolute value of t
 800190c:	4bc7      	ldr	r3, [pc, #796]	; (8001c2c <LightingHandler+0x778>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	0612      	lsls	r2, r2, #24
 8001914:	405a      	eors	r2, r3
 8001916:	4bc5      	ldr	r3, [pc, #788]	; (8001c2c <LightingHandler+0x778>)
 8001918:	601a      	str	r2, [r3, #0]
        transitionDirection = 1; // Reverse the transition direction
 800191a:	4bc5      	ldr	r3, [pc, #788]	; (8001c30 <LightingHandler+0x77c>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]
        LP5024_SetColor_All(0);
 8001920:	2000      	movs	r0, #0
 8001922:	f000 fdd5 	bl	80024d0 <LP5024_SetColor_All>
      break;
 8001926:	f000 fd38 	bl	800239a <LightingHandler+0xee6>

    case PATTERN_BLINK_BETWEEN:
      // Update t based on the transition direction
      speed = SPEED_MIN + (SPEED_MAX - SPEED_MIN) * activeLightingConfig->patternSpeed / 100.0f;
 800192a:	4bbf      	ldr	r3, [pc, #764]	; (8001c28 <LightingHandler+0x774>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	78db      	ldrb	r3, [r3, #3]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff fc27 	bl	8001184 <__aeabi_i2f>
 8001936:	1c03      	adds	r3, r0, #0
 8001938:	49be      	ldr	r1, [pc, #760]	; (8001c34 <LightingHandler+0x780>)
 800193a:	1c18      	adds	r0, r3, #0
 800193c:	f7ff f8fe 	bl	8000b3c <__aeabi_fmul>
 8001940:	1c03      	adds	r3, r0, #0
 8001942:	49bd      	ldr	r1, [pc, #756]	; (8001c38 <LightingHandler+0x784>)
 8001944:	1c18      	adds	r0, r3, #0
 8001946:	f7fe ff2f 	bl	80007a8 <__aeabi_fdiv>
 800194a:	1c03      	adds	r3, r0, #0
 800194c:	49bb      	ldr	r1, [pc, #748]	; (8001c3c <LightingHandler+0x788>)
 800194e:	1c18      	adds	r0, r3, #0
 8001950:	f7fe fd8a 	bl	8000468 <__aeabi_fadd>
 8001954:	1c03      	adds	r3, r0, #0
 8001956:	613b      	str	r3, [r7, #16]
      t += speed * transitionDirection; // Adjust this value to control the speed and direction of the transition
 8001958:	4bb5      	ldr	r3, [pc, #724]	; (8001c30 <LightingHandler+0x77c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff fc11 	bl	8001184 <__aeabi_i2f>
 8001962:	1c03      	adds	r3, r0, #0
 8001964:	6939      	ldr	r1, [r7, #16]
 8001966:	1c18      	adds	r0, r3, #0
 8001968:	f7ff f8e8 	bl	8000b3c <__aeabi_fmul>
 800196c:	1c03      	adds	r3, r0, #0
 800196e:	1c1a      	adds	r2, r3, #0
 8001970:	4bae      	ldr	r3, [pc, #696]	; (8001c2c <LightingHandler+0x778>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	1c19      	adds	r1, r3, #0
 8001976:	1c10      	adds	r0, r2, #0
 8001978:	f7fe fd76 	bl	8000468 <__aeabi_fadd>
 800197c:	1c03      	adds	r3, r0, #0
 800197e:	1c1a      	adds	r2, r3, #0
 8001980:	4baa      	ldr	r3, [pc, #680]	; (8001c2c <LightingHandler+0x778>)
 8001982:	601a      	str	r2, [r3, #0]

      // Check if t reaches the limits and handle accordingly
      if (t > 1.0f) {
 8001984:	4ba9      	ldr	r3, [pc, #676]	; (8001c2c <LightingHandler+0x778>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	21fe      	movs	r1, #254	; 0xfe
 800198a:	0589      	lsls	r1, r1, #22
 800198c:	1c18      	adds	r0, r3, #0
 800198e:	f7fe fd57 	bl	8000440 <__aeabi_fcmpgt>
 8001992:	1e03      	subs	r3, r0, #0
 8001994:	d100      	bne.n	8001998 <LightingHandler+0x4e4>
 8001996:	e0e1      	b.n	8001b5c <LightingHandler+0x6a8>
        t = 1.0f; // Set t to 1.0f for a smooth transition without blink
 8001998:	4ba4      	ldr	r3, [pc, #656]	; (8001c2c <LightingHandler+0x778>)
 800199a:	22fe      	movs	r2, #254	; 0xfe
 800199c:	0592      	lsls	r2, r2, #22
 800199e:	601a      	str	r2, [r3, #0]
        transitionDirection = -1; // Reverse the transition direction
 80019a0:	4ba3      	ldr	r3, [pc, #652]	; (8001c30 <LightingHandler+0x77c>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	4252      	negs	r2, r2
 80019a6:	601a      	str	r2, [r3, #0]
        
        status = LP5024_SetColor(LED7, Adjust_Color_Brightness(activeLightingConfig->buttonColor1, activeLightingConfig->brightness));
 80019a8:	4b9f      	ldr	r3, [pc, #636]	; (8001c28 <LightingHandler+0x774>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4b9e      	ldr	r3, [pc, #632]	; (8001c28 <LightingHandler+0x774>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	789b      	ldrb	r3, [r3, #2]
 80019b4:	0019      	movs	r1, r3
 80019b6:	0010      	movs	r0, r2
 80019b8:	f000 fe16 	bl	80025e8 <Adjust_Color_Brightness>
 80019bc:	0003      	movs	r3, r0
 80019be:	2527      	movs	r5, #39	; 0x27
 80019c0:	197c      	adds	r4, r7, r5
 80019c2:	0019      	movs	r1, r3
 80019c4:	2024      	movs	r0, #36	; 0x24
 80019c6:	f000 fd47 	bl	8002458 <LP5024_SetColor>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 80019ce:	197b      	adds	r3, r7, r5
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <LightingHandler+0x52a>
 80019d6:	197b      	adds	r3, r7, r5
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	f000 fce4 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED6, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 80019de:	4b92      	ldr	r3, [pc, #584]	; (8001c28 <LightingHandler+0x774>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4b90      	ldr	r3, [pc, #576]	; (8001c28 <LightingHandler+0x774>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	789b      	ldrb	r3, [r3, #2]
 80019ea:	0019      	movs	r1, r3
 80019ec:	0010      	movs	r0, r2
 80019ee:	f000 fdfb 	bl	80025e8 <Adjust_Color_Brightness>
 80019f2:	0003      	movs	r3, r0
 80019f4:	2527      	movs	r5, #39	; 0x27
 80019f6:	197c      	adds	r4, r7, r5
 80019f8:	0019      	movs	r1, r3
 80019fa:	2021      	movs	r0, #33	; 0x21
 80019fc:	f000 fd2c 	bl	8002458 <LP5024_SetColor>
 8001a00:	0003      	movs	r3, r0
 8001a02:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001a04:	197b      	adds	r3, r7, r5
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <LightingHandler+0x560>
 8001a0c:	197b      	adds	r3, r7, r5
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	f000 fcc9 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED5, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001a14:	4b84      	ldr	r3, [pc, #528]	; (8001c28 <LightingHandler+0x774>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4b83      	ldr	r3, [pc, #524]	; (8001c28 <LightingHandler+0x774>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	789b      	ldrb	r3, [r3, #2]
 8001a20:	0019      	movs	r1, r3
 8001a22:	0010      	movs	r0, r2
 8001a24:	f000 fde0 	bl	80025e8 <Adjust_Color_Brightness>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	2527      	movs	r5, #39	; 0x27
 8001a2c:	197c      	adds	r4, r7, r5
 8001a2e:	0019      	movs	r1, r3
 8001a30:	201e      	movs	r0, #30
 8001a32:	f000 fd11 	bl	8002458 <LP5024_SetColor>
 8001a36:	0003      	movs	r3, r0
 8001a38:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001a3a:	197b      	adds	r3, r7, r5
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <LightingHandler+0x596>
 8001a42:	197b      	adds	r3, r7, r5
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	f000 fcae 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED4, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001a4a:	4b77      	ldr	r3, [pc, #476]	; (8001c28 <LightingHandler+0x774>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <LightingHandler+0x774>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	789b      	ldrb	r3, [r3, #2]
 8001a56:	0019      	movs	r1, r3
 8001a58:	0010      	movs	r0, r2
 8001a5a:	f000 fdc5 	bl	80025e8 <Adjust_Color_Brightness>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	2527      	movs	r5, #39	; 0x27
 8001a62:	197c      	adds	r4, r7, r5
 8001a64:	0019      	movs	r1, r3
 8001a66:	201b      	movs	r0, #27
 8001a68:	f000 fcf6 	bl	8002458 <LP5024_SetColor>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001a70:	197b      	adds	r3, r7, r5
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <LightingHandler+0x5cc>
 8001a78:	197b      	adds	r3, r7, r5
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	f000 fc93 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED3, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001a80:	4b69      	ldr	r3, [pc, #420]	; (8001c28 <LightingHandler+0x774>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <LightingHandler+0x774>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	789b      	ldrb	r3, [r3, #2]
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	0010      	movs	r0, r2
 8001a90:	f000 fdaa 	bl	80025e8 <Adjust_Color_Brightness>
 8001a94:	0003      	movs	r3, r0
 8001a96:	2527      	movs	r5, #39	; 0x27
 8001a98:	197c      	adds	r4, r7, r5
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	2018      	movs	r0, #24
 8001a9e:	f000 fcdb 	bl	8002458 <LP5024_SetColor>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001aa6:	197b      	adds	r3, r7, r5
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <LightingHandler+0x602>
 8001aae:	197b      	adds	r3, r7, r5
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	f000 fc78 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED2, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <LightingHandler+0x774>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4b5a      	ldr	r3, [pc, #360]	; (8001c28 <LightingHandler+0x774>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	789b      	ldrb	r3, [r3, #2]
 8001ac2:	0019      	movs	r1, r3
 8001ac4:	0010      	movs	r0, r2
 8001ac6:	f000 fd8f 	bl	80025e8 <Adjust_Color_Brightness>
 8001aca:	0003      	movs	r3, r0
 8001acc:	2527      	movs	r5, #39	; 0x27
 8001ace:	197c      	adds	r4, r7, r5
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	2015      	movs	r0, #21
 8001ad4:	f000 fcc0 	bl	8002458 <LP5024_SetColor>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001adc:	197b      	adds	r3, r7, r5
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <LightingHandler+0x638>
 8001ae4:	197b      	adds	r3, r7, r5
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	f000 fc5d 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED1, Adjust_Color_Brightness(activeLightingConfig->frameColor1, activeLightingConfig->brightness));
 8001aec:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <LightingHandler+0x774>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	4b4d      	ldr	r3, [pc, #308]	; (8001c28 <LightingHandler+0x774>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	0019      	movs	r1, r3
 8001afa:	0010      	movs	r0, r2
 8001afc:	f000 fd74 	bl	80025e8 <Adjust_Color_Brightness>
 8001b00:	0003      	movs	r3, r0
 8001b02:	2527      	movs	r5, #39	; 0x27
 8001b04:	197c      	adds	r4, r7, r5
 8001b06:	0019      	movs	r1, r3
 8001b08:	2012      	movs	r0, #18
 8001b0a:	f000 fca5 	bl	8002458 <LP5024_SetColor>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001b12:	197b      	adds	r3, r7, r5
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <LightingHandler+0x66e>
 8001b1a:	197b      	adds	r3, r7, r5
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	f000 fc42 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED0, Adjust_Color_Brightness(activeLightingConfig->buttonColor1, activeLightingConfig->brightness));
 8001b22:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <LightingHandler+0x774>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <LightingHandler+0x774>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	0019      	movs	r1, r3
 8001b30:	0010      	movs	r0, r2
 8001b32:	f000 fd59 	bl	80025e8 <Adjust_Color_Brightness>
 8001b36:	0003      	movs	r3, r0
 8001b38:	2527      	movs	r5, #39	; 0x27
 8001b3a:	197c      	adds	r4, r7, r5
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f000 fc8a 	bl	8002458 <LP5024_SetColor>
 8001b44:	0003      	movs	r3, r0
 8001b46:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001b48:	197b      	adds	r3, r7, r5
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <LightingHandler+0x6a0>
 8001b50:	f000 fc25 	bl	800239e <LightingHandler+0xeea>
 8001b54:	197b      	adds	r3, r7, r5
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f000 fc25 	bl	80023a6 <LightingHandler+0xef2>
      } else if (t < 0.0f) {
 8001b5c:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <LightingHandler+0x778>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2100      	movs	r1, #0
 8001b62:	1c18      	adds	r0, r3, #0
 8001b64:	f7fe fc58 	bl	8000418 <__aeabi_fcmplt>
 8001b68:	1e03      	subs	r3, r0, #0
 8001b6a:	d101      	bne.n	8001b70 <LightingHandler+0x6bc>
        status = LP5024_SetColor(LED1, Adjust_Color_Brightness(activeLightingConfig->frameColor2, activeLightingConfig->brightness));
        if(status != HAL_OK) return status;
        status = LP5024_SetColor(LED0, Adjust_Color_Brightness(activeLightingConfig->buttonColor2, activeLightingConfig->brightness));
        if(status != HAL_OK) return status;
      }
      break;
 8001b6c:	f000 fc17 	bl	800239e <LightingHandler+0xeea>
        t = -t; // Calculate the absolute value of t
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <LightingHandler+0x778>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2280      	movs	r2, #128	; 0x80
 8001b76:	0612      	lsls	r2, r2, #24
 8001b78:	405a      	eors	r2, r3
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <LightingHandler+0x778>)
 8001b7c:	601a      	str	r2, [r3, #0]
        transitionDirection = 1; // Reverse the transition direction
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <LightingHandler+0x77c>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
        status = LP5024_SetColor(LED7, Adjust_Color_Brightness(activeLightingConfig->buttonColor2, activeLightingConfig->brightness));
 8001b84:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <LightingHandler+0x774>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <LightingHandler+0x774>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	0019      	movs	r1, r3
 8001b92:	0010      	movs	r0, r2
 8001b94:	f000 fd28 	bl	80025e8 <Adjust_Color_Brightness>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	2527      	movs	r5, #39	; 0x27
 8001b9c:	197c      	adds	r4, r7, r5
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	2024      	movs	r0, #36	; 0x24
 8001ba2:	f000 fc59 	bl	8002458 <LP5024_SetColor>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001baa:	197b      	adds	r3, r7, r5
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <LightingHandler+0x706>
 8001bb2:	197b      	adds	r3, r7, r5
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	f000 fbf6 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED6, Adjust_Color_Brightness(activeLightingConfig->frameColor2, activeLightingConfig->brightness));
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <LightingHandler+0x774>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <LightingHandler+0x774>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	789b      	ldrb	r3, [r3, #2]
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	0010      	movs	r0, r2
 8001bca:	f000 fd0d 	bl	80025e8 <Adjust_Color_Brightness>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	2527      	movs	r5, #39	; 0x27
 8001bd2:	197c      	adds	r4, r7, r5
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	2021      	movs	r0, #33	; 0x21
 8001bd8:	f000 fc3e 	bl	8002458 <LP5024_SetColor>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001be0:	197b      	adds	r3, r7, r5
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <LightingHandler+0x73c>
 8001be8:	197b      	adds	r3, r7, r5
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	f000 fbdb 	bl	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED5, Adjust_Color_Brightness(activeLightingConfig->frameColor2, activeLightingConfig->brightness));
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <LightingHandler+0x774>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <LightingHandler+0x774>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	789b      	ldrb	r3, [r3, #2]
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	0010      	movs	r0, r2
 8001c00:	f000 fcf2 	bl	80025e8 <Adjust_Color_Brightness>
 8001c04:	0003      	movs	r3, r0
 8001c06:	2527      	movs	r5, #39	; 0x27
 8001c08:	197c      	adds	r4, r7, r5
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	201e      	movs	r0, #30
 8001c0e:	f000 fc23 	bl	8002458 <LP5024_SetColor>
 8001c12:	0003      	movs	r3, r0
 8001c14:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001c16:	197b      	adds	r3, r7, r5
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d010      	beq.n	8001c40 <LightingHandler+0x78c>
 8001c1e:	197b      	adds	r3, r7, r5
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	f000 fbc0 	bl	80023a6 <LightingHandler+0xef2>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20000220 	.word	0x20000220
 8001c30:	20000004 	.word	0x20000004
 8001c34:	3dcac083 	.word	0x3dcac083
 8001c38:	42c80000 	.word	0x42c80000
 8001c3c:	3a83126f 	.word	0x3a83126f
        status = LP5024_SetColor(LED4, Adjust_Color_Brightness(activeLightingConfig->frameColor2, activeLightingConfig->brightness));
 8001c40:	4bba      	ldr	r3, [pc, #744]	; (8001f2c <LightingHandler+0xa78>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	4bb9      	ldr	r3, [pc, #740]	; (8001f2c <LightingHandler+0xa78>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	789b      	ldrb	r3, [r3, #2]
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0010      	movs	r0, r2
 8001c50:	f000 fcca 	bl	80025e8 <Adjust_Color_Brightness>
 8001c54:	0003      	movs	r3, r0
 8001c56:	2527      	movs	r5, #39	; 0x27
 8001c58:	197c      	adds	r4, r7, r5
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	201b      	movs	r0, #27
 8001c5e:	f000 fbfb 	bl	8002458 <LP5024_SetColor>
 8001c62:	0003      	movs	r3, r0
 8001c64:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001c66:	197b      	adds	r3, r7, r5
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <LightingHandler+0x7c0>
 8001c6e:	197b      	adds	r3, r7, r5
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	e398      	b.n	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED3, Adjust_Color_Brightness(activeLightingConfig->frameColor2, activeLightingConfig->brightness));
 8001c74:	4bad      	ldr	r3, [pc, #692]	; (8001f2c <LightingHandler+0xa78>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	4bac      	ldr	r3, [pc, #688]	; (8001f2c <LightingHandler+0xa78>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	789b      	ldrb	r3, [r3, #2]
 8001c80:	0019      	movs	r1, r3
 8001c82:	0010      	movs	r0, r2
 8001c84:	f000 fcb0 	bl	80025e8 <Adjust_Color_Brightness>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	2527      	movs	r5, #39	; 0x27
 8001c8c:	197c      	adds	r4, r7, r5
 8001c8e:	0019      	movs	r1, r3
 8001c90:	2018      	movs	r0, #24
 8001c92:	f000 fbe1 	bl	8002458 <LP5024_SetColor>
 8001c96:	0003      	movs	r3, r0
 8001c98:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001c9a:	197b      	adds	r3, r7, r5
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <LightingHandler+0x7f4>
 8001ca2:	197b      	adds	r3, r7, r5
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	e37e      	b.n	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED2, Adjust_Color_Brightness(activeLightingConfig->frameColor2, activeLightingConfig->brightness));
 8001ca8:	4ba0      	ldr	r3, [pc, #640]	; (8001f2c <LightingHandler+0xa78>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	4b9f      	ldr	r3, [pc, #636]	; (8001f2c <LightingHandler+0xa78>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	789b      	ldrb	r3, [r3, #2]
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	f000 fc96 	bl	80025e8 <Adjust_Color_Brightness>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	2527      	movs	r5, #39	; 0x27
 8001cc0:	197c      	adds	r4, r7, r5
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	2015      	movs	r0, #21
 8001cc6:	f000 fbc7 	bl	8002458 <LP5024_SetColor>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001cce:	197b      	adds	r3, r7, r5
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <LightingHandler+0x828>
 8001cd6:	197b      	adds	r3, r7, r5
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	e364      	b.n	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED1, Adjust_Color_Brightness(activeLightingConfig->frameColor2, activeLightingConfig->brightness));
 8001cdc:	4b93      	ldr	r3, [pc, #588]	; (8001f2c <LightingHandler+0xa78>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <LightingHandler+0xa78>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	789b      	ldrb	r3, [r3, #2]
 8001ce8:	0019      	movs	r1, r3
 8001cea:	0010      	movs	r0, r2
 8001cec:	f000 fc7c 	bl	80025e8 <Adjust_Color_Brightness>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	2527      	movs	r5, #39	; 0x27
 8001cf4:	197c      	adds	r4, r7, r5
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	2012      	movs	r0, #18
 8001cfa:	f000 fbad 	bl	8002458 <LP5024_SetColor>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001d02:	197b      	adds	r3, r7, r5
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <LightingHandler+0x85c>
 8001d0a:	197b      	adds	r3, r7, r5
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	e34a      	b.n	80023a6 <LightingHandler+0xef2>
        status = LP5024_SetColor(LED0, Adjust_Color_Brightness(activeLightingConfig->buttonColor2, activeLightingConfig->brightness));
 8001d10:	4b86      	ldr	r3, [pc, #536]	; (8001f2c <LightingHandler+0xa78>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <LightingHandler+0xa78>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	789b      	ldrb	r3, [r3, #2]
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	0010      	movs	r0, r2
 8001d20:	f000 fc62 	bl	80025e8 <Adjust_Color_Brightness>
 8001d24:	0003      	movs	r3, r0
 8001d26:	2527      	movs	r5, #39	; 0x27
 8001d28:	197c      	adds	r4, r7, r5
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	200f      	movs	r0, #15
 8001d2e:	f000 fb93 	bl	8002458 <LP5024_SetColor>
 8001d32:	0003      	movs	r3, r0
 8001d34:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK) return status;
 8001d36:	197b      	adds	r3, r7, r5
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d100      	bne.n	8001d40 <LightingHandler+0x88c>
 8001d3e:	e32e      	b.n	800239e <LightingHandler+0xeea>
 8001d40:	197b      	adds	r3, r7, r5
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	e32f      	b.n	80023a6 <LightingHandler+0xef2>
    case PATTERN_EASE_IN:
      break;

    case PATTERN_EASE_BETWEEN:
      // Interpolate between the two colors
      color1 = activeLightingConfig->frameColor1;
 8001d46:	4b79      	ldr	r3, [pc, #484]	; (8001f2c <LightingHandler+0xa78>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	61fb      	str	r3, [r7, #28]
      color2 = activeLightingConfig->frameColor2;
 8001d4e:	4b77      	ldr	r3, [pc, #476]	; (8001f2c <LightingHandler+0xa78>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	61bb      	str	r3, [r7, #24]
      r = lerp((color1 >> 16) & 0xFF, (color2 >> 16) & 0xFF, t);
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	141b      	asrs	r3, r3, #16
 8001d5a:	22ff      	movs	r2, #255	; 0xff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7ff fa10 	bl	8001184 <__aeabi_i2f>
 8001d64:	1c04      	adds	r4, r0, #0
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	141b      	asrs	r3, r3, #16
 8001d6a:	22ff      	movs	r2, #255	; 0xff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff fa08 	bl	8001184 <__aeabi_i2f>
 8001d74:	1c01      	adds	r1, r0, #0
 8001d76:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <LightingHandler+0xa7c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1c1a      	adds	r2, r3, #0
 8001d7c:	1c20      	adds	r0, r4, #0
 8001d7e:	f7ff fb7f 	bl	8001480 <lerp>
 8001d82:	1c03      	adds	r3, r0, #0
 8001d84:	1c18      	adds	r0, r3, #0
 8001d86:	f7ff f9dd 	bl	8001144 <__aeabi_f2iz>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	60fb      	str	r3, [r7, #12]
      g = lerp((color1 >> 8) & 0xFF, (color2 >> 8) & 0xFF, t);
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	121b      	asrs	r3, r3, #8
 8001d92:	22ff      	movs	r2, #255	; 0xff
 8001d94:	4013      	ands	r3, r2
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff f9f4 	bl	8001184 <__aeabi_i2f>
 8001d9c:	1c04      	adds	r4, r0, #0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	121b      	asrs	r3, r3, #8
 8001da2:	22ff      	movs	r2, #255	; 0xff
 8001da4:	4013      	ands	r3, r2
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7ff f9ec 	bl	8001184 <__aeabi_i2f>
 8001dac:	1c01      	adds	r1, r0, #0
 8001dae:	4b60      	ldr	r3, [pc, #384]	; (8001f30 <LightingHandler+0xa7c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	1c1a      	adds	r2, r3, #0
 8001db4:	1c20      	adds	r0, r4, #0
 8001db6:	f7ff fb63 	bl	8001480 <lerp>
 8001dba:	1c03      	adds	r3, r0, #0
 8001dbc:	1c18      	adds	r0, r3, #0
 8001dbe:	f7ff f9c1 	bl	8001144 <__aeabi_f2iz>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	60bb      	str	r3, [r7, #8]
      b = lerp(color1 & 0xFF, color2 & 0xFF, t);
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	22ff      	movs	r2, #255	; 0xff
 8001dca:	4013      	ands	r3, r2
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff f9d9 	bl	8001184 <__aeabi_i2f>
 8001dd2:	1c04      	adds	r4, r0, #0
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	22ff      	movs	r2, #255	; 0xff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff f9d2 	bl	8001184 <__aeabi_i2f>
 8001de0:	1c01      	adds	r1, r0, #0
 8001de2:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <LightingHandler+0xa7c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	1c1a      	adds	r2, r3, #0
 8001de8:	1c20      	adds	r0, r4, #0
 8001dea:	f7ff fb49 	bl	8001480 <lerp>
 8001dee:	1c03      	adds	r3, r0, #0
 8001df0:	1c18      	adds	r0, r3, #0
 8001df2:	f7ff f9a7 	bl	8001144 <__aeabi_f2iz>
 8001df6:	0003      	movs	r3, r0
 8001df8:	607b      	str	r3, [r7, #4]
      interpolatedColor = (r << 16) | (g << 8) | b;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]

      
      status = LP5024_SetColor(LED6, Adjust_Color_Brightness(interpolatedColor, activeLightingConfig->brightness));
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <LightingHandler+0xa78>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	0019      	movs	r1, r3
 8001e14:	0010      	movs	r0, r2
 8001e16:	f000 fbe7 	bl	80025e8 <Adjust_Color_Brightness>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	2527      	movs	r5, #39	; 0x27
 8001e1e:	197c      	adds	r4, r7, r5
 8001e20:	0019      	movs	r1, r3
 8001e22:	2021      	movs	r0, #33	; 0x21
 8001e24:	f000 fb18 	bl	8002458 <LP5024_SetColor>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001e2c:	197b      	adds	r3, r7, r5
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <LightingHandler+0x986>
 8001e34:	197b      	adds	r3, r7, r5
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	e2b5      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED5, Adjust_Color_Brightness(interpolatedColor, activeLightingConfig->brightness));
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <LightingHandler+0xa78>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	789b      	ldrb	r3, [r3, #2]
 8001e42:	0019      	movs	r1, r3
 8001e44:	0010      	movs	r0, r2
 8001e46:	f000 fbcf 	bl	80025e8 <Adjust_Color_Brightness>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	2527      	movs	r5, #39	; 0x27
 8001e4e:	197c      	adds	r4, r7, r5
 8001e50:	0019      	movs	r1, r3
 8001e52:	201e      	movs	r0, #30
 8001e54:	f000 fb00 	bl	8002458 <LP5024_SetColor>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001e5c:	197b      	adds	r3, r7, r5
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <LightingHandler+0x9b6>
 8001e64:	197b      	adds	r3, r7, r5
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	e29d      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED4, Adjust_Color_Brightness(interpolatedColor, activeLightingConfig->brightness));
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <LightingHandler+0xa78>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	789b      	ldrb	r3, [r3, #2]
 8001e72:	0019      	movs	r1, r3
 8001e74:	0010      	movs	r0, r2
 8001e76:	f000 fbb7 	bl	80025e8 <Adjust_Color_Brightness>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	2527      	movs	r5, #39	; 0x27
 8001e7e:	197c      	adds	r4, r7, r5
 8001e80:	0019      	movs	r1, r3
 8001e82:	201b      	movs	r0, #27
 8001e84:	f000 fae8 	bl	8002458 <LP5024_SetColor>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001e8c:	197b      	adds	r3, r7, r5
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <LightingHandler+0x9e6>
 8001e94:	197b      	adds	r3, r7, r5
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	e285      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED3, Adjust_Color_Brightness(interpolatedColor, activeLightingConfig->brightness));
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <LightingHandler+0xa78>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	789b      	ldrb	r3, [r3, #2]
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	0010      	movs	r0, r2
 8001ea6:	f000 fb9f 	bl	80025e8 <Adjust_Color_Brightness>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	2527      	movs	r5, #39	; 0x27
 8001eae:	197c      	adds	r4, r7, r5
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	2018      	movs	r0, #24
 8001eb4:	f000 fad0 	bl	8002458 <LP5024_SetColor>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001ebc:	197b      	adds	r3, r7, r5
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <LightingHandler+0xa16>
 8001ec4:	197b      	adds	r3, r7, r5
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	e26d      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED2, Adjust_Color_Brightness(interpolatedColor, activeLightingConfig->brightness));
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <LightingHandler+0xa78>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	789b      	ldrb	r3, [r3, #2]
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	0010      	movs	r0, r2
 8001ed6:	f000 fb87 	bl	80025e8 <Adjust_Color_Brightness>
 8001eda:	0003      	movs	r3, r0
 8001edc:	2527      	movs	r5, #39	; 0x27
 8001ede:	197c      	adds	r4, r7, r5
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	2015      	movs	r0, #21
 8001ee4:	f000 fab8 	bl	8002458 <LP5024_SetColor>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001eec:	197b      	adds	r3, r7, r5
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <LightingHandler+0xa46>
 8001ef4:	197b      	adds	r3, r7, r5
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	e255      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED1, Adjust_Color_Brightness(interpolatedColor, activeLightingConfig->brightness));
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <LightingHandler+0xa78>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	789b      	ldrb	r3, [r3, #2]
 8001f02:	0019      	movs	r1, r3
 8001f04:	0010      	movs	r0, r2
 8001f06:	f000 fb6f 	bl	80025e8 <Adjust_Color_Brightness>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	2527      	movs	r5, #39	; 0x27
 8001f0e:	197c      	adds	r4, r7, r5
 8001f10:	0019      	movs	r1, r3
 8001f12:	2012      	movs	r0, #18
 8001f14:	f000 faa0 	bl	8002458 <LP5024_SetColor>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8001f1c:	197b      	adds	r3, r7, r5
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d007      	beq.n	8001f34 <LightingHandler+0xa80>
 8001f24:	197b      	adds	r3, r7, r5
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	e23d      	b.n	80023a6 <LightingHandler+0xef2>
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000220 	.word	0x20000220

      // Interpolate between the two button colors
      color1 = activeLightingConfig->buttonColor1;
 8001f34:	4be2      	ldr	r3, [pc, #904]	; (80022c0 <LightingHandler+0xe0c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	61fb      	str	r3, [r7, #28]
      color2 = activeLightingConfig->buttonColor2;
 8001f3c:	4be0      	ldr	r3, [pc, #896]	; (80022c0 <LightingHandler+0xe0c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	61bb      	str	r3, [r7, #24]
      r = lerp((color1 >> 16) & 0xFF, (color2 >> 16) & 0xFF, t);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	141b      	asrs	r3, r3, #16
 8001f48:	22ff      	movs	r2, #255	; 0xff
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff f919 	bl	8001184 <__aeabi_i2f>
 8001f52:	1c04      	adds	r4, r0, #0
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	141b      	asrs	r3, r3, #16
 8001f58:	22ff      	movs	r2, #255	; 0xff
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff f911 	bl	8001184 <__aeabi_i2f>
 8001f62:	1c01      	adds	r1, r0, #0
 8001f64:	4bd7      	ldr	r3, [pc, #860]	; (80022c4 <LightingHandler+0xe10>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	1c1a      	adds	r2, r3, #0
 8001f6a:	1c20      	adds	r0, r4, #0
 8001f6c:	f7ff fa88 	bl	8001480 <lerp>
 8001f70:	1c03      	adds	r3, r0, #0
 8001f72:	1c18      	adds	r0, r3, #0
 8001f74:	f7ff f8e6 	bl	8001144 <__aeabi_f2iz>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]
      g = lerp((color1 >> 8) & 0xFF, (color2 >> 8) & 0xFF, t);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	121b      	asrs	r3, r3, #8
 8001f80:	22ff      	movs	r2, #255	; 0xff
 8001f82:	4013      	ands	r3, r2
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7ff f8fd 	bl	8001184 <__aeabi_i2f>
 8001f8a:	1c04      	adds	r4, r0, #0
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	121b      	asrs	r3, r3, #8
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	4013      	ands	r3, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7ff f8f5 	bl	8001184 <__aeabi_i2f>
 8001f9a:	1c01      	adds	r1, r0, #0
 8001f9c:	4bc9      	ldr	r3, [pc, #804]	; (80022c4 <LightingHandler+0xe10>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	1c1a      	adds	r2, r3, #0
 8001fa2:	1c20      	adds	r0, r4, #0
 8001fa4:	f7ff fa6c 	bl	8001480 <lerp>
 8001fa8:	1c03      	adds	r3, r0, #0
 8001faa:	1c18      	adds	r0, r3, #0
 8001fac:	f7ff f8ca 	bl	8001144 <__aeabi_f2iz>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	60bb      	str	r3, [r7, #8]
      b = lerp(color1 & 0xFF, color2 & 0xFF, t);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	22ff      	movs	r2, #255	; 0xff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f7ff f8e2 	bl	8001184 <__aeabi_i2f>
 8001fc0:	1c04      	adds	r4, r0, #0
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	22ff      	movs	r2, #255	; 0xff
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff f8db 	bl	8001184 <__aeabi_i2f>
 8001fce:	1c01      	adds	r1, r0, #0
 8001fd0:	4bbc      	ldr	r3, [pc, #752]	; (80022c4 <LightingHandler+0xe10>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	1c1a      	adds	r2, r3, #0
 8001fd6:	1c20      	adds	r0, r4, #0
 8001fd8:	f7ff fa52 	bl	8001480 <lerp>
 8001fdc:	1c03      	adds	r3, r0, #0
 8001fde:	1c18      	adds	r0, r3, #0
 8001fe0:	f7ff f8b0 	bl	8001144 <__aeabi_f2iz>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	607b      	str	r3, [r7, #4]
      interpolatedColor = (r << 16) | (g << 8) | b;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	041a      	lsls	r2, r3, #16
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

      // Set LED color
      status = LP5024_SetColor(LED7, Adjust_Color_Brightness(interpolatedColor, activeLightingConfig->brightness));
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4bb1      	ldr	r3, [pc, #708]	; (80022c0 <LightingHandler+0xe0c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	789b      	ldrb	r3, [r3, #2]
 8002000:	0019      	movs	r1, r3
 8002002:	0010      	movs	r0, r2
 8002004:	f000 faf0 	bl	80025e8 <Adjust_Color_Brightness>
 8002008:	0003      	movs	r3, r0
 800200a:	2527      	movs	r5, #39	; 0x27
 800200c:	197c      	adds	r4, r7, r5
 800200e:	0019      	movs	r1, r3
 8002010:	2024      	movs	r0, #36	; 0x24
 8002012:	f000 fa21 	bl	8002458 <LP5024_SetColor>
 8002016:	0003      	movs	r3, r0
 8002018:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 800201a:	197b      	adds	r3, r7, r5
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <LightingHandler+0xb74>
 8002022:	197b      	adds	r3, r7, r5
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	e1be      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED0, Adjust_Color_Brightness(interpolatedColor, activeLightingConfig->brightness));
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4ba5      	ldr	r3, [pc, #660]	; (80022c0 <LightingHandler+0xe0c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	789b      	ldrb	r3, [r3, #2]
 8002030:	0019      	movs	r1, r3
 8002032:	0010      	movs	r0, r2
 8002034:	f000 fad8 	bl	80025e8 <Adjust_Color_Brightness>
 8002038:	0003      	movs	r3, r0
 800203a:	2527      	movs	r5, #39	; 0x27
 800203c:	197c      	adds	r4, r7, r5
 800203e:	0019      	movs	r1, r3
 8002040:	200f      	movs	r0, #15
 8002042:	f000 fa09 	bl	8002458 <LP5024_SetColor>
 8002046:	0003      	movs	r3, r0
 8002048:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 800204a:	197b      	adds	r3, r7, r5
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <LightingHandler+0xba4>
 8002052:	197b      	adds	r3, r7, r5
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	e1a6      	b.n	80023a6 <LightingHandler+0xef2>
      
      // Update t based on the transition direction
      speed = SPEED_MIN + (SPEED_MAX - SPEED_MIN) * activeLightingConfig->patternSpeed / 100.0f;
 8002058:	4b99      	ldr	r3, [pc, #612]	; (80022c0 <LightingHandler+0xe0c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	78db      	ldrb	r3, [r3, #3]
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff f890 	bl	8001184 <__aeabi_i2f>
 8002064:	1c03      	adds	r3, r0, #0
 8002066:	4998      	ldr	r1, [pc, #608]	; (80022c8 <LightingHandler+0xe14>)
 8002068:	1c18      	adds	r0, r3, #0
 800206a:	f7fe fd67 	bl	8000b3c <__aeabi_fmul>
 800206e:	1c03      	adds	r3, r0, #0
 8002070:	4996      	ldr	r1, [pc, #600]	; (80022cc <LightingHandler+0xe18>)
 8002072:	1c18      	adds	r0, r3, #0
 8002074:	f7fe fb98 	bl	80007a8 <__aeabi_fdiv>
 8002078:	1c03      	adds	r3, r0, #0
 800207a:	4995      	ldr	r1, [pc, #596]	; (80022d0 <LightingHandler+0xe1c>)
 800207c:	1c18      	adds	r0, r3, #0
 800207e:	f7fe f9f3 	bl	8000468 <__aeabi_fadd>
 8002082:	1c03      	adds	r3, r0, #0
 8002084:	613b      	str	r3, [r7, #16]
      t += speed * transitionDirection; // Adjust this value to control the speed and direction of the transition
 8002086:	4b93      	ldr	r3, [pc, #588]	; (80022d4 <LightingHandler+0xe20>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	0018      	movs	r0, r3
 800208c:	f7ff f87a 	bl	8001184 <__aeabi_i2f>
 8002090:	1c03      	adds	r3, r0, #0
 8002092:	6939      	ldr	r1, [r7, #16]
 8002094:	1c18      	adds	r0, r3, #0
 8002096:	f7fe fd51 	bl	8000b3c <__aeabi_fmul>
 800209a:	1c03      	adds	r3, r0, #0
 800209c:	1c1a      	adds	r2, r3, #0
 800209e:	4b89      	ldr	r3, [pc, #548]	; (80022c4 <LightingHandler+0xe10>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1c19      	adds	r1, r3, #0
 80020a4:	1c10      	adds	r0, r2, #0
 80020a6:	f7fe f9df 	bl	8000468 <__aeabi_fadd>
 80020aa:	1c03      	adds	r3, r0, #0
 80020ac:	1c1a      	adds	r2, r3, #0
 80020ae:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <LightingHandler+0xe10>)
 80020b0:	601a      	str	r2, [r3, #0]

      // Check if t reaches the limits and handle accordingly
      if (t > 1.0f) {
 80020b2:	4b84      	ldr	r3, [pc, #528]	; (80022c4 <LightingHandler+0xe10>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	21fe      	movs	r1, #254	; 0xfe
 80020b8:	0589      	lsls	r1, r1, #22
 80020ba:	1c18      	adds	r0, r3, #0
 80020bc:	f7fe f9c0 	bl	8000440 <__aeabi_fcmpgt>
 80020c0:	1e03      	subs	r3, r0, #0
 80020c2:	d008      	beq.n	80020d6 <LightingHandler+0xc22>
        t = 1.0f; // Set t to 1.0f for a smooth transition without blink
 80020c4:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <LightingHandler+0xe10>)
 80020c6:	22fe      	movs	r2, #254	; 0xfe
 80020c8:	0592      	lsls	r2, r2, #22
 80020ca:	601a      	str	r2, [r3, #0]
        transitionDirection = -1; // Reverse the transition direction
 80020cc:	4b81      	ldr	r3, [pc, #516]	; (80022d4 <LightingHandler+0xe20>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	4252      	negs	r2, r2
 80020d2:	601a      	str	r2, [r3, #0]
      } else if (t < 0.0f) {
        t = -t; // Calculate the absolute value of t
        transitionDirection = 1; // Reverse the transition direction
      }
      break;
 80020d4:	e164      	b.n	80023a0 <LightingHandler+0xeec>
      } else if (t < 0.0f) {
 80020d6:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <LightingHandler+0xe10>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2100      	movs	r1, #0
 80020dc:	1c18      	adds	r0, r3, #0
 80020de:	f7fe f99b 	bl	8000418 <__aeabi_fcmplt>
 80020e2:	1e03      	subs	r3, r0, #0
 80020e4:	d100      	bne.n	80020e8 <LightingHandler+0xc34>
      break;
 80020e6:	e15b      	b.n	80023a0 <LightingHandler+0xeec>
        t = -t; // Calculate the absolute value of t
 80020e8:	4b76      	ldr	r3, [pc, #472]	; (80022c4 <LightingHandler+0xe10>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2280      	movs	r2, #128	; 0x80
 80020ee:	0612      	lsls	r2, r2, #24
 80020f0:	405a      	eors	r2, r3
 80020f2:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <LightingHandler+0xe10>)
 80020f4:	601a      	str	r2, [r3, #0]
        transitionDirection = 1; // Reverse the transition direction
 80020f6:	4b77      	ldr	r3, [pc, #476]	; (80022d4 <LightingHandler+0xe20>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
      break;
 80020fc:	e150      	b.n	80023a0 <LightingHandler+0xeec>

    case PATTERN_RAINBOW_CYCLE:
      // Calculate the hue increment based on pattern speed
      hueIncrement = (activeLightingConfig->patternSpeed / 100.0f) * HUE_STEP;
 80020fe:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <LightingHandler+0xe0c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	78db      	ldrb	r3, [r3, #3]
 8002104:	0018      	movs	r0, r3
 8002106:	f7ff f83d 	bl	8001184 <__aeabi_i2f>
 800210a:	1c03      	adds	r3, r0, #0
 800210c:	496f      	ldr	r1, [pc, #444]	; (80022cc <LightingHandler+0xe18>)
 800210e:	1c18      	adds	r0, r3, #0
 8002110:	f7fe fb4a 	bl	80007a8 <__aeabi_fdiv>
 8002114:	1c03      	adds	r3, r0, #0
 8002116:	4970      	ldr	r1, [pc, #448]	; (80022d8 <LightingHandler+0xe24>)
 8002118:	1c18      	adds	r0, r3, #0
 800211a:	f7fe fd0f 	bl	8000b3c <__aeabi_fmul>
 800211e:	1c03      	adds	r3, r0, #0
 8002120:	623b      	str	r3, [r7, #32]

      // Convert HSV to RGB
      HSVtoRGB(hue, 1.0, 1.0, &r, &g, &b); // Assuming full saturation and value
 8002122:	4b6e      	ldr	r3, [pc, #440]	; (80022dc <LightingHandler+0xe28>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	0018      	movs	r0, r3
 8002128:	f7ff f82c 	bl	8001184 <__aeabi_i2f>
 800212c:	230c      	movs	r3, #12
 800212e:	18fa      	adds	r2, r7, r3
 8002130:	24fe      	movs	r4, #254	; 0xfe
 8002132:	05a4      	lsls	r4, r4, #22
 8002134:	21fe      	movs	r1, #254	; 0xfe
 8002136:	0589      	lsls	r1, r1, #22
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2308      	movs	r3, #8
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	0013      	movs	r3, r2
 8002144:	1c22      	adds	r2, r4, #0
 8002146:	f000 fa99 	bl	800267c <HSVtoRGB>

      // Set LED color
      status = LP5024_SetColor(LED7, Adjust_Color_Brightness((r << 16) | (g << 8) | b, activeLightingConfig->brightness));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4313      	orrs	r3, r2
 8002158:	001a      	movs	r2, r3
 800215a:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <LightingHandler+0xe0c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	789b      	ldrb	r3, [r3, #2]
 8002160:	0019      	movs	r1, r3
 8002162:	0010      	movs	r0, r2
 8002164:	f000 fa40 	bl	80025e8 <Adjust_Color_Brightness>
 8002168:	0003      	movs	r3, r0
 800216a:	2527      	movs	r5, #39	; 0x27
 800216c:	197c      	adds	r4, r7, r5
 800216e:	0019      	movs	r1, r3
 8002170:	2024      	movs	r0, #36	; 0x24
 8002172:	f000 f971 	bl	8002458 <LP5024_SetColor>
 8002176:	0003      	movs	r3, r0
 8002178:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 800217a:	197b      	adds	r3, r7, r5
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <LightingHandler+0xcd4>
 8002182:	197b      	adds	r3, r7, r5
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	e10e      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED6, Adjust_Color_Brightness((r << 16) | (g << 8) | b, activeLightingConfig->brightness));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	041a      	lsls	r2, r3, #16
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	001a      	movs	r2, r3
 8002198:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <LightingHandler+0xe0c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	789b      	ldrb	r3, [r3, #2]
 800219e:	0019      	movs	r1, r3
 80021a0:	0010      	movs	r0, r2
 80021a2:	f000 fa21 	bl	80025e8 <Adjust_Color_Brightness>
 80021a6:	0003      	movs	r3, r0
 80021a8:	2527      	movs	r5, #39	; 0x27
 80021aa:	197c      	adds	r4, r7, r5
 80021ac:	0019      	movs	r1, r3
 80021ae:	2021      	movs	r0, #33	; 0x21
 80021b0:	f000 f952 	bl	8002458 <LP5024_SetColor>
 80021b4:	0003      	movs	r3, r0
 80021b6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 80021b8:	197b      	adds	r3, r7, r5
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <LightingHandler+0xd12>
 80021c0:	197b      	adds	r3, r7, r5
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	e0ef      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED5, Adjust_Color_Brightness((r << 16) | (g << 8) | b, activeLightingConfig->brightness));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	001a      	movs	r2, r3
 80021d6:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <LightingHandler+0xe0c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	789b      	ldrb	r3, [r3, #2]
 80021dc:	0019      	movs	r1, r3
 80021de:	0010      	movs	r0, r2
 80021e0:	f000 fa02 	bl	80025e8 <Adjust_Color_Brightness>
 80021e4:	0003      	movs	r3, r0
 80021e6:	2527      	movs	r5, #39	; 0x27
 80021e8:	197c      	adds	r4, r7, r5
 80021ea:	0019      	movs	r1, r3
 80021ec:	201e      	movs	r0, #30
 80021ee:	f000 f933 	bl	8002458 <LP5024_SetColor>
 80021f2:	0003      	movs	r3, r0
 80021f4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 80021f6:	197b      	adds	r3, r7, r5
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <LightingHandler+0xd50>
 80021fe:	197b      	adds	r3, r7, r5
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	e0d0      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED4, Adjust_Color_Brightness((r << 16) | (g << 8) | b, activeLightingConfig->brightness));
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	041a      	lsls	r2, r3, #16
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4313      	orrs	r3, r2
 8002212:	001a      	movs	r2, r3
 8002214:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <LightingHandler+0xe0c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	789b      	ldrb	r3, [r3, #2]
 800221a:	0019      	movs	r1, r3
 800221c:	0010      	movs	r0, r2
 800221e:	f000 f9e3 	bl	80025e8 <Adjust_Color_Brightness>
 8002222:	0003      	movs	r3, r0
 8002224:	2527      	movs	r5, #39	; 0x27
 8002226:	197c      	adds	r4, r7, r5
 8002228:	0019      	movs	r1, r3
 800222a:	201b      	movs	r0, #27
 800222c:	f000 f914 	bl	8002458 <LP5024_SetColor>
 8002230:	0003      	movs	r3, r0
 8002232:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8002234:	197b      	adds	r3, r7, r5
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <LightingHandler+0xd8e>
 800223c:	197b      	adds	r3, r7, r5
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	e0b1      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED3, Adjust_Color_Brightness((r << 16) | (g << 8) | b, activeLightingConfig->brightness));
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4313      	orrs	r3, r2
 8002250:	001a      	movs	r2, r3
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <LightingHandler+0xe0c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	789b      	ldrb	r3, [r3, #2]
 8002258:	0019      	movs	r1, r3
 800225a:	0010      	movs	r0, r2
 800225c:	f000 f9c4 	bl	80025e8 <Adjust_Color_Brightness>
 8002260:	0003      	movs	r3, r0
 8002262:	2527      	movs	r5, #39	; 0x27
 8002264:	197c      	adds	r4, r7, r5
 8002266:	0019      	movs	r1, r3
 8002268:	2018      	movs	r0, #24
 800226a:	f000 f8f5 	bl	8002458 <LP5024_SetColor>
 800226e:	0003      	movs	r3, r0
 8002270:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8002272:	197b      	adds	r3, r7, r5
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <LightingHandler+0xdcc>
 800227a:	197b      	adds	r3, r7, r5
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	e092      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED2, Adjust_Color_Brightness((r << 16) | (g << 8) | b, activeLightingConfig->brightness));
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	041a      	lsls	r2, r3, #16
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4313      	orrs	r3, r2
 800228e:	001a      	movs	r2, r3
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <LightingHandler+0xe0c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	789b      	ldrb	r3, [r3, #2]
 8002296:	0019      	movs	r1, r3
 8002298:	0010      	movs	r0, r2
 800229a:	f000 f9a5 	bl	80025e8 <Adjust_Color_Brightness>
 800229e:	0003      	movs	r3, r0
 80022a0:	2527      	movs	r5, #39	; 0x27
 80022a2:	197c      	adds	r4, r7, r5
 80022a4:	0019      	movs	r1, r3
 80022a6:	2015      	movs	r0, #21
 80022a8:	f000 f8d6 	bl	8002458 <LP5024_SetColor>
 80022ac:	0003      	movs	r3, r0
 80022ae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 80022b0:	197b      	adds	r3, r7, r5
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <LightingHandler+0xe2c>
 80022b8:	197b      	adds	r3, r7, r5
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	e073      	b.n	80023a6 <LightingHandler+0xef2>
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	20000000 	.word	0x20000000
 80022c4:	20000220 	.word	0x20000220
 80022c8:	3dcac083 	.word	0x3dcac083
 80022cc:	42c80000 	.word	0x42c80000
 80022d0:	3a83126f 	.word	0x3a83126f
 80022d4:	20000004 	.word	0x20000004
 80022d8:	41700000 	.word	0x41700000
 80022dc:	2000021c 	.word	0x2000021c
      status = LP5024_SetColor(LED1, Adjust_Color_Brightness((r << 16) | (g << 8) | b, activeLightingConfig->brightness));
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	041a      	lsls	r2, r3, #16
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	001a      	movs	r2, r3
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <LightingHandler+0xefc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	789b      	ldrb	r3, [r3, #2]
 80022f6:	0019      	movs	r1, r3
 80022f8:	0010      	movs	r0, r2
 80022fa:	f000 f975 	bl	80025e8 <Adjust_Color_Brightness>
 80022fe:	0003      	movs	r3, r0
 8002300:	2527      	movs	r5, #39	; 0x27
 8002302:	197c      	adds	r4, r7, r5
 8002304:	0019      	movs	r1, r3
 8002306:	2012      	movs	r0, #18
 8002308:	f000 f8a6 	bl	8002458 <LP5024_SetColor>
 800230c:	0003      	movs	r3, r0
 800230e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 8002310:	197b      	adds	r3, r7, r5
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <LightingHandler+0xe6a>
 8002318:	197b      	adds	r3, r7, r5
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	e043      	b.n	80023a6 <LightingHandler+0xef2>
      status = LP5024_SetColor(LED0, Adjust_Color_Brightness((r << 16) | (g << 8) | b, activeLightingConfig->brightness));
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4313      	orrs	r3, r2
 800232c:	001a      	movs	r2, r3
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <LightingHandler+0xefc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	0019      	movs	r1, r3
 8002336:	0010      	movs	r0, r2
 8002338:	f000 f956 	bl	80025e8 <Adjust_Color_Brightness>
 800233c:	0003      	movs	r3, r0
 800233e:	2527      	movs	r5, #39	; 0x27
 8002340:	197c      	adds	r4, r7, r5
 8002342:	0019      	movs	r1, r3
 8002344:	200f      	movs	r0, #15
 8002346:	f000 f887 	bl	8002458 <LP5024_SetColor>
 800234a:	0003      	movs	r3, r0
 800234c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK) return status;
 800234e:	197b      	adds	r3, r7, r5
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <LightingHandler+0xea8>
 8002356:	197b      	adds	r3, r7, r5
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	e024      	b.n	80023a6 <LightingHandler+0xef2>
      // Update hue
      hue = fmodf((hue + hueIncrement), HUE_MAX);
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <LightingHandler+0xf00>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0018      	movs	r0, r3
 8002362:	f7fe ff0f 	bl	8001184 <__aeabi_i2f>
 8002366:	1c03      	adds	r3, r0, #0
 8002368:	6a39      	ldr	r1, [r7, #32]
 800236a:	1c18      	adds	r0, r3, #0
 800236c:	f7fe f87c 	bl	8000468 <__aeabi_fadd>
 8002370:	1c03      	adds	r3, r0, #0
 8002372:	1c1a      	adds	r2, r3, #0
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <LightingHandler+0xf04>)
 8002376:	1c19      	adds	r1, r3, #0
 8002378:	1c10      	adds	r0, r2, #0
 800237a:	f009 fbdd 	bl	800bb38 <fmodf>
 800237e:	1c03      	adds	r3, r0, #0
 8002380:	1c18      	adds	r0, r3, #0
 8002382:	f7fe fedf 	bl	8001144 <__aeabi_f2iz>
 8002386:	0002      	movs	r2, r0
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <LightingHandler+0xf00>)
 800238a:	601a      	str	r2, [r3, #0]
      
      break;
 800238c:	e008      	b.n	80023a0 <LightingHandler+0xeec>
      
    default:
      // Unknown report type
      break;
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	e006      	b.n	80023a0 <LightingHandler+0xeec>
      break;
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	e004      	b.n	80023a0 <LightingHandler+0xeec>
      break;
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	e002      	b.n	80023a0 <LightingHandler+0xeec>
      break;
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	e000      	b.n	80023a0 <LightingHandler+0xeec>
      break;
 800239e:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80023a0:	2327      	movs	r3, #39	; 0x27
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	781b      	ldrb	r3, [r3, #0]
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b00a      	add	sp, #40	; 0x28
 80023ac:	bdb0      	pop	{r4, r5, r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000000 	.word	0x20000000
 80023b4:	2000021c 	.word	0x2000021c
 80023b8:	43b40000 	.word	0x43b40000

080023bc <LP5024_Init>:
#include "LP5024_Driver.h"

extern I2C_HandleTypeDef hi2c1;

HAL_StatusTypeDef LP5024_Init(void)
{
 80023bc:	b5b0      	push	{r4, r5, r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status;

    //Enable the LP5024 IC 
    uint8_t chip_en[] = {0x00, 0x40};
 80023c2:	210c      	movs	r1, #12
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	01d2      	lsls	r2, r2, #7
 80023ca:	801a      	strh	r2, [r3, #0]
    status = HAL_I2C_Master_Transmit(&hi2c1, LP5024_I2C_ADDR_BCST << 1, chip_en, sizeof(chip_en), HAL_MAX_DELAY);
 80023cc:	250f      	movs	r5, #15
 80023ce:	197c      	adds	r4, r7, r5
 80023d0:	187a      	adds	r2, r7, r1
 80023d2:	481f      	ldr	r0, [pc, #124]	; (8002450 <LP5024_Init+0x94>)
 80023d4:	2301      	movs	r3, #1
 80023d6:	425b      	negs	r3, r3
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2302      	movs	r3, #2
 80023dc:	2178      	movs	r1, #120	; 0x78
 80023de:	f001 f9d1 	bl	8003784 <HAL_I2C_Master_Transmit>
 80023e2:	0003      	movs	r3, r0
 80023e4:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) {
 80023e6:	197b      	adds	r3, r7, r5
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <LP5024_Init+0x38>
        return status; // Return the error status if the I2C transmission failed
 80023ee:	197b      	adds	r3, r7, r5
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	e029      	b.n	8002448 <LP5024_Init+0x8c>
    }

    //Enable auto increment feature
    uint8_t auto_inc_en[] = {0x01, 0x08};
 80023f4:	2108      	movs	r1, #8
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	4a16      	ldr	r2, [pc, #88]	; (8002454 <LP5024_Init+0x98>)
 80023fa:	801a      	strh	r2, [r3, #0]
    status = HAL_I2C_Master_Transmit(&hi2c1, LP5024_I2C_ADDR_BCST << 1, auto_inc_en, sizeof(auto_inc_en), HAL_MAX_DELAY);
 80023fc:	250f      	movs	r5, #15
 80023fe:	197c      	adds	r4, r7, r5
 8002400:	187a      	adds	r2, r7, r1
 8002402:	4813      	ldr	r0, [pc, #76]	; (8002450 <LP5024_Init+0x94>)
 8002404:	2301      	movs	r3, #1
 8002406:	425b      	negs	r3, r3
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2302      	movs	r3, #2
 800240c:	2178      	movs	r1, #120	; 0x78
 800240e:	f001 f9b9 	bl	8003784 <HAL_I2C_Master_Transmit>
 8002412:	0003      	movs	r3, r0
 8002414:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) {
 8002416:	197b      	adds	r3, r7, r5
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <LP5024_Init+0x68>
        return status; // Return the error status if the I2C transmission failed
 800241e:	197b      	adds	r3, r7, r5
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	e011      	b.n	8002448 <LP5024_Init+0x8c>
    }

    uint8_t i2cCmd3[] = {0x02, 0x00};
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2202      	movs	r2, #2
 8002428:	801a      	strh	r2, [r3, #0]
    status = HAL_I2C_Master_Transmit(&hi2c1, LP5024_I2C_ADDR_BCST << 1, i2cCmd3, sizeof(i2cCmd3), HAL_MAX_DELAY);
 800242a:	250f      	movs	r5, #15
 800242c:	197c      	adds	r4, r7, r5
 800242e:	1d3a      	adds	r2, r7, #4
 8002430:	4807      	ldr	r0, [pc, #28]	; (8002450 <LP5024_Init+0x94>)
 8002432:	2301      	movs	r3, #1
 8002434:	425b      	negs	r3, r3
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2302      	movs	r3, #2
 800243a:	2178      	movs	r1, #120	; 0x78
 800243c:	f001 f9a2 	bl	8003784 <HAL_I2C_Master_Transmit>
 8002440:	0003      	movs	r3, r0
 8002442:	7023      	strb	r3, [r4, #0]

    return status; // Return status
 8002444:	197b      	adds	r3, r7, r5
 8002446:	781b      	ldrb	r3, [r3, #0]
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	b004      	add	sp, #16
 800244e:	bdb0      	pop	{r4, r5, r7, pc}
 8002450:	20000228 	.word	0x20000228
 8002454:	00000801 	.word	0x00000801

08002458 <LP5024_SetColor>:

HAL_StatusTypeDef LP5024_SetColor(enum LED_Color_Reg led_register, int hex_color)
{
 8002458:	b5b0      	push	{r4, r5, r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af02      	add	r7, sp, #8
 800245e:	0002      	movs	r2, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status;

    int red = (hex_color >> 16) & 0xFF;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	141b      	asrs	r3, r3, #16
 800246a:	22ff      	movs	r2, #255	; 0xff
 800246c:	4013      	ands	r3, r2
 800246e:	61fb      	str	r3, [r7, #28]
    int green = (hex_color >> 8) & 0xFF;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	121b      	asrs	r3, r3, #8
 8002474:	22ff      	movs	r2, #255	; 0xff
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
    int blue = hex_color & 0xFF;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	4013      	ands	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
    
    uint8_t i2cCmd[] = {led_register, red, green, blue};
 8002482:	210c      	movs	r1, #12
 8002484:	187b      	adds	r3, r7, r1
 8002486:	1dfa      	adds	r2, r7, #7
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	187b      	adds	r3, r7, r1
 8002492:	705a      	strb	r2, [r3, #1]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	187b      	adds	r3, r7, r1
 800249a:	709a      	strb	r2, [r3, #2]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	70da      	strb	r2, [r3, #3]
    status = HAL_I2C_Master_Transmit(&hi2c1, LP5024_I2C_ADDR_BCST << 1, i2cCmd, sizeof(i2cCmd), HAL_MAX_DELAY);
 80024a4:	2513      	movs	r5, #19
 80024a6:	197c      	adds	r4, r7, r5
 80024a8:	187a      	adds	r2, r7, r1
 80024aa:	4808      	ldr	r0, [pc, #32]	; (80024cc <LP5024_SetColor+0x74>)
 80024ac:	2301      	movs	r3, #1
 80024ae:	425b      	negs	r3, r3
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2304      	movs	r3, #4
 80024b4:	2178      	movs	r1, #120	; 0x78
 80024b6:	f001 f965 	bl	8003784 <HAL_I2C_Master_Transmit>
 80024ba:	0003      	movs	r3, r0
 80024bc:	7023      	strb	r3, [r4, #0]

    return status; // Return status
 80024be:	197b      	adds	r3, r7, r5
 80024c0:	781b      	ldrb	r3, [r3, #0]
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b008      	add	sp, #32
 80024c8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	20000228 	.word	0x20000228

080024d0 <LP5024_SetColor_All>:

HAL_StatusTypeDef LP5024_SetColor_All(int hex_color){
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status;

    int red = (hex_color >> 16) & 0xFF;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	141b      	asrs	r3, r3, #16
 80024dc:	22ff      	movs	r2, #255	; 0xff
 80024de:	4013      	ands	r3, r2
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int green = (hex_color >> 8) & 0xFF;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	121b      	asrs	r3, r3, #8
 80024e6:	22ff      	movs	r2, #255	; 0xff
 80024e8:	4013      	ands	r3, r2
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
    int blue = hex_color & 0xFF;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	22ff      	movs	r2, #255	; 0xff
 80024f0:	4013      	ands	r3, r2
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    
    uint8_t i2cCmd[] = {
 80024f4:	2108      	movs	r1, #8
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	220f      	movs	r2, #15
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	187b      	adds	r3, r7, r1
 8002502:	705a      	strb	r2, [r3, #1]
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002506:	b2da      	uxtb	r2, r3
 8002508:	187b      	adds	r3, r7, r1
 800250a:	709a      	strb	r2, [r3, #2]
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	b2da      	uxtb	r2, r3
 8002510:	187b      	adds	r3, r7, r1
 8002512:	70da      	strb	r2, [r3, #3]
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	b2da      	uxtb	r2, r3
 8002518:	187b      	adds	r3, r7, r1
 800251a:	711a      	strb	r2, [r3, #4]
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	187b      	adds	r3, r7, r1
 8002522:	715a      	strb	r2, [r3, #5]
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	b2da      	uxtb	r2, r3
 8002528:	187b      	adds	r3, r7, r1
 800252a:	719a      	strb	r2, [r3, #6]
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	b2da      	uxtb	r2, r3
 8002530:	187b      	adds	r3, r7, r1
 8002532:	71da      	strb	r2, [r3, #7]
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	b2da      	uxtb	r2, r3
 8002538:	187b      	adds	r3, r7, r1
 800253a:	721a      	strb	r2, [r3, #8]
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	b2da      	uxtb	r2, r3
 8002540:	187b      	adds	r3, r7, r1
 8002542:	725a      	strb	r2, [r3, #9]
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	b2da      	uxtb	r2, r3
 8002548:	187b      	adds	r3, r7, r1
 800254a:	729a      	strb	r2, [r3, #10]
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	b2da      	uxtb	r2, r3
 8002550:	187b      	adds	r3, r7, r1
 8002552:	72da      	strb	r2, [r3, #11]
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	b2da      	uxtb	r2, r3
 8002558:	187b      	adds	r3, r7, r1
 800255a:	731a      	strb	r2, [r3, #12]
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	b2da      	uxtb	r2, r3
 8002560:	187b      	adds	r3, r7, r1
 8002562:	735a      	strb	r2, [r3, #13]
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	b2da      	uxtb	r2, r3
 8002568:	187b      	adds	r3, r7, r1
 800256a:	739a      	strb	r2, [r3, #14]
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	b2da      	uxtb	r2, r3
 8002570:	187b      	adds	r3, r7, r1
 8002572:	73da      	strb	r2, [r3, #15]
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	b2da      	uxtb	r2, r3
 8002578:	187b      	adds	r3, r7, r1
 800257a:	741a      	strb	r2, [r3, #16]
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	b2da      	uxtb	r2, r3
 8002580:	187b      	adds	r3, r7, r1
 8002582:	745a      	strb	r2, [r3, #17]
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	b2da      	uxtb	r2, r3
 8002588:	187b      	adds	r3, r7, r1
 800258a:	749a      	strb	r2, [r3, #18]
 800258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258e:	b2da      	uxtb	r2, r3
 8002590:	187b      	adds	r3, r7, r1
 8002592:	74da      	strb	r2, [r3, #19]
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	b2da      	uxtb	r2, r3
 8002598:	187b      	adds	r3, r7, r1
 800259a:	751a      	strb	r2, [r3, #20]
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	755a      	strb	r2, [r3, #21]
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	759a      	strb	r2, [r3, #22]
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	75da      	strb	r2, [r3, #23]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	761a      	strb	r2, [r3, #24]
        red, green, blue,
        red, green, blue,
        red, green, blue,
        red, green, blue };
    
    status = HAL_I2C_Master_Transmit(&hi2c1, LP5024_I2C_ADDR_BCST << 1, i2cCmd, sizeof(i2cCmd), HAL_MAX_DELAY);
 80025bc:	2523      	movs	r5, #35	; 0x23
 80025be:	197c      	adds	r4, r7, r5
 80025c0:	187a      	adds	r2, r7, r1
 80025c2:	4808      	ldr	r0, [pc, #32]	; (80025e4 <LP5024_SetColor_All+0x114>)
 80025c4:	2301      	movs	r3, #1
 80025c6:	425b      	negs	r3, r3
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2319      	movs	r3, #25
 80025cc:	2178      	movs	r1, #120	; 0x78
 80025ce:	f001 f8d9 	bl	8003784 <HAL_I2C_Master_Transmit>
 80025d2:	0003      	movs	r3, r0
 80025d4:	7023      	strb	r3, [r4, #0]

    return status; // Return status
 80025d6:	197b      	adds	r3, r7, r5
 80025d8:	781b      	ldrb	r3, [r3, #0]
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b00c      	add	sp, #48	; 0x30
 80025e0:	bdb0      	pop	{r4, r5, r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	20000228 	.word	0x20000228

080025e8 <Adjust_Color_Brightness>:
    status = HAL_I2C_Master_Transmit(&hi2c1, LP5024_I2C_ADDR_BCST << 1, i2cCmd1, sizeof(i2cCmd1), HAL_MAX_DELAY);

    return status; // Return status
}

uint32_t Adjust_Color_Brightness(uint32_t color, uint8_t brightness_level) {
 80025e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	000a      	movs	r2, r1
 80025f2:	1cfb      	adds	r3, r7, #3
 80025f4:	701a      	strb	r2, [r3, #0]
    // Extract the individual color components (red, green, and blue)
    uint8_t red = (color >> 16) & 0xFF;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0c1a      	lsrs	r2, r3, #16
 80025fa:	240f      	movs	r4, #15
 80025fc:	193b      	adds	r3, r7, r4
 80025fe:	701a      	strb	r2, [r3, #0]
    uint8_t green = (color >> 8) & 0xFF;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0a1a      	lsrs	r2, r3, #8
 8002604:	250e      	movs	r5, #14
 8002606:	197b      	adds	r3, r7, r5
 8002608:	701a      	strb	r2, [r3, #0]
    uint8_t blue = color & 0xFF;
 800260a:	260d      	movs	r6, #13
 800260c:	19bb      	adds	r3, r7, r6
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	701a      	strb	r2, [r3, #0]

    // Scale the color components based on the brightness level
    red = (red * brightness_level) / 255;
 8002612:	193b      	adds	r3, r7, r4
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	1cfa      	adds	r2, r7, #3
 8002618:	7812      	ldrb	r2, [r2, #0]
 800261a:	4353      	muls	r3, r2
 800261c:	21ff      	movs	r1, #255	; 0xff
 800261e:	0018      	movs	r0, r3
 8002620:	f7fd fdfc 	bl	800021c <__divsi3>
 8002624:	0003      	movs	r3, r0
 8002626:	001a      	movs	r2, r3
 8002628:	193b      	adds	r3, r7, r4
 800262a:	701a      	strb	r2, [r3, #0]
    green = (green * brightness_level) / 255;
 800262c:	197b      	adds	r3, r7, r5
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	1cfa      	adds	r2, r7, #3
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	4353      	muls	r3, r2
 8002636:	21ff      	movs	r1, #255	; 0xff
 8002638:	0018      	movs	r0, r3
 800263a:	f7fd fdef 	bl	800021c <__divsi3>
 800263e:	0003      	movs	r3, r0
 8002640:	001a      	movs	r2, r3
 8002642:	197b      	adds	r3, r7, r5
 8002644:	701a      	strb	r2, [r3, #0]
    blue = (blue * brightness_level) / 255;
 8002646:	19bb      	adds	r3, r7, r6
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	1cfa      	adds	r2, r7, #3
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	4353      	muls	r3, r2
 8002650:	21ff      	movs	r1, #255	; 0xff
 8002652:	0018      	movs	r0, r3
 8002654:	f7fd fde2 	bl	800021c <__divsi3>
 8002658:	0003      	movs	r3, r0
 800265a:	001a      	movs	r2, r3
 800265c:	19bb      	adds	r3, r7, r6
 800265e:	701a      	strb	r2, [r3, #0]

    // Combine the modified color components back into a single value
    return (red << 16) | (green << 8) | blue;
 8002660:	193b      	adds	r3, r7, r4
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	197b      	adds	r3, r7, r5
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	431a      	orrs	r2, r3
 800266e:	19bb      	adds	r3, r7, r6
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4313      	orrs	r3, r2
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b005      	add	sp, #20
 800267a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800267c <HSVtoRGB>:
            return LEDERR;
    }
}

void HSVtoRGB(float h, float s, float v, int *r, int *g, int *b)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b08b      	sub	sp, #44	; 0x2c
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
    float f, p, q, t;
    int hi;

    hi = ((int)(h / 60)) % 6;
 800268a:	4996      	ldr	r1, [pc, #600]	; (80028e4 <HSVtoRGB+0x268>)
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7fe f88b 	bl	80007a8 <__aeabi_fdiv>
 8002692:	1c03      	adds	r3, r0, #0
 8002694:	1c18      	adds	r0, r3, #0
 8002696:	f7fe fd55 	bl	8001144 <__aeabi_f2iz>
 800269a:	0003      	movs	r3, r0
 800269c:	2106      	movs	r1, #6
 800269e:	0018      	movs	r0, r3
 80026a0:	f7fd fea2 	bl	80003e8 <__aeabi_idivmod>
 80026a4:	000b      	movs	r3, r1
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    f = h / 60 - hi;
 80026a8:	498e      	ldr	r1, [pc, #568]	; (80028e4 <HSVtoRGB+0x268>)
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7fe f87c 	bl	80007a8 <__aeabi_fdiv>
 80026b0:	1c03      	adds	r3, r0, #0
 80026b2:	1c1c      	adds	r4, r3, #0
 80026b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026b6:	f7fe fd65 	bl	8001184 <__aeabi_i2f>
 80026ba:	1c03      	adds	r3, r0, #0
 80026bc:	1c19      	adds	r1, r3, #0
 80026be:	1c20      	adds	r0, r4, #0
 80026c0:	f7fe fb8a 	bl	8000dd8 <__aeabi_fsub>
 80026c4:	1c03      	adds	r3, r0, #0
 80026c6:	623b      	str	r3, [r7, #32]
    p = v * (1 - s);
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	20fe      	movs	r0, #254	; 0xfe
 80026cc:	0580      	lsls	r0, r0, #22
 80026ce:	f7fe fb83 	bl	8000dd8 <__aeabi_fsub>
 80026d2:	1c03      	adds	r3, r0, #0
 80026d4:	1c19      	adds	r1, r3, #0
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fa30 	bl	8000b3c <__aeabi_fmul>
 80026dc:	1c03      	adds	r3, r0, #0
 80026de:	61fb      	str	r3, [r7, #28]
    q = v * (1 - f * s);
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	6a38      	ldr	r0, [r7, #32]
 80026e4:	f7fe fa2a 	bl	8000b3c <__aeabi_fmul>
 80026e8:	1c03      	adds	r3, r0, #0
 80026ea:	1c19      	adds	r1, r3, #0
 80026ec:	20fe      	movs	r0, #254	; 0xfe
 80026ee:	0580      	lsls	r0, r0, #22
 80026f0:	f7fe fb72 	bl	8000dd8 <__aeabi_fsub>
 80026f4:	1c03      	adds	r3, r0, #0
 80026f6:	1c19      	adds	r1, r3, #0
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7fe fa1f 	bl	8000b3c <__aeabi_fmul>
 80026fe:	1c03      	adds	r3, r0, #0
 8002700:	61bb      	str	r3, [r7, #24]
    t = v * (1 - (1 - f) * s);
 8002702:	6a39      	ldr	r1, [r7, #32]
 8002704:	20fe      	movs	r0, #254	; 0xfe
 8002706:	0580      	lsls	r0, r0, #22
 8002708:	f7fe fb66 	bl	8000dd8 <__aeabi_fsub>
 800270c:	1c03      	adds	r3, r0, #0
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	1c18      	adds	r0, r3, #0
 8002712:	f7fe fa13 	bl	8000b3c <__aeabi_fmul>
 8002716:	1c03      	adds	r3, r0, #0
 8002718:	1c19      	adds	r1, r3, #0
 800271a:	20fe      	movs	r0, #254	; 0xfe
 800271c:	0580      	lsls	r0, r0, #22
 800271e:	f7fe fb5b 	bl	8000dd8 <__aeabi_fsub>
 8002722:	1c03      	adds	r3, r0, #0
 8002724:	1c19      	adds	r1, r3, #0
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fa08 	bl	8000b3c <__aeabi_fmul>
 800272c:	1c03      	adds	r3, r0, #0
 800272e:	617b      	str	r3, [r7, #20]

    switch(hi) {
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	2b05      	cmp	r3, #5
 8002734:	d900      	bls.n	8002738 <HSVtoRGB+0xbc>
 8002736:	e0d1      	b.n	80028dc <HSVtoRGB+0x260>
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	009a      	lsls	r2, r3, #2
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HSVtoRGB+0x26c>)
 800273e:	18d3      	adds	r3, r2, r3
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	469f      	mov	pc, r3
        case 0: *r = v * 255, *g = t * 255, *b = p * 255; break;
 8002744:	4969      	ldr	r1, [pc, #420]	; (80028ec <HSVtoRGB+0x270>)
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe f9f8 	bl	8000b3c <__aeabi_fmul>
 800274c:	1c03      	adds	r3, r0, #0
 800274e:	1c18      	adds	r0, r3, #0
 8002750:	f7fe fcf8 	bl	8001144 <__aeabi_f2iz>
 8002754:	0002      	movs	r2, r0
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	4964      	ldr	r1, [pc, #400]	; (80028ec <HSVtoRGB+0x270>)
 800275c:	6978      	ldr	r0, [r7, #20]
 800275e:	f7fe f9ed 	bl	8000b3c <__aeabi_fmul>
 8002762:	1c03      	adds	r3, r0, #0
 8002764:	1c18      	adds	r0, r3, #0
 8002766:	f7fe fced 	bl	8001144 <__aeabi_f2iz>
 800276a:	0002      	movs	r2, r0
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	495e      	ldr	r1, [pc, #376]	; (80028ec <HSVtoRGB+0x270>)
 8002772:	69f8      	ldr	r0, [r7, #28]
 8002774:	f7fe f9e2 	bl	8000b3c <__aeabi_fmul>
 8002778:	1c03      	adds	r3, r0, #0
 800277a:	1c18      	adds	r0, r3, #0
 800277c:	f7fe fce2 	bl	8001144 <__aeabi_f2iz>
 8002780:	0002      	movs	r2, r0
 8002782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e0a9      	b.n	80028dc <HSVtoRGB+0x260>
        case 1: *r = q * 255, *g = v * 255, *b = p * 255; break;
 8002788:	4958      	ldr	r1, [pc, #352]	; (80028ec <HSVtoRGB+0x270>)
 800278a:	69b8      	ldr	r0, [r7, #24]
 800278c:	f7fe f9d6 	bl	8000b3c <__aeabi_fmul>
 8002790:	1c03      	adds	r3, r0, #0
 8002792:	1c18      	adds	r0, r3, #0
 8002794:	f7fe fcd6 	bl	8001144 <__aeabi_f2iz>
 8002798:	0002      	movs	r2, r0
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	4953      	ldr	r1, [pc, #332]	; (80028ec <HSVtoRGB+0x270>)
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fe f9cb 	bl	8000b3c <__aeabi_fmul>
 80027a6:	1c03      	adds	r3, r0, #0
 80027a8:	1c18      	adds	r0, r3, #0
 80027aa:	f7fe fccb 	bl	8001144 <__aeabi_f2iz>
 80027ae:	0002      	movs	r2, r0
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	494d      	ldr	r1, [pc, #308]	; (80028ec <HSVtoRGB+0x270>)
 80027b6:	69f8      	ldr	r0, [r7, #28]
 80027b8:	f7fe f9c0 	bl	8000b3c <__aeabi_fmul>
 80027bc:	1c03      	adds	r3, r0, #0
 80027be:	1c18      	adds	r0, r3, #0
 80027c0:	f7fe fcc0 	bl	8001144 <__aeabi_f2iz>
 80027c4:	0002      	movs	r2, r0
 80027c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e087      	b.n	80028dc <HSVtoRGB+0x260>
        case 2: *r = p * 255, *g = v * 255, *b = t * 255; break;
 80027cc:	4947      	ldr	r1, [pc, #284]	; (80028ec <HSVtoRGB+0x270>)
 80027ce:	69f8      	ldr	r0, [r7, #28]
 80027d0:	f7fe f9b4 	bl	8000b3c <__aeabi_fmul>
 80027d4:	1c03      	adds	r3, r0, #0
 80027d6:	1c18      	adds	r0, r3, #0
 80027d8:	f7fe fcb4 	bl	8001144 <__aeabi_f2iz>
 80027dc:	0002      	movs	r2, r0
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	4942      	ldr	r1, [pc, #264]	; (80028ec <HSVtoRGB+0x270>)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7fe f9a9 	bl	8000b3c <__aeabi_fmul>
 80027ea:	1c03      	adds	r3, r0, #0
 80027ec:	1c18      	adds	r0, r3, #0
 80027ee:	f7fe fca9 	bl	8001144 <__aeabi_f2iz>
 80027f2:	0002      	movs	r2, r0
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	493c      	ldr	r1, [pc, #240]	; (80028ec <HSVtoRGB+0x270>)
 80027fa:	6978      	ldr	r0, [r7, #20]
 80027fc:	f7fe f99e 	bl	8000b3c <__aeabi_fmul>
 8002800:	1c03      	adds	r3, r0, #0
 8002802:	1c18      	adds	r0, r3, #0
 8002804:	f7fe fc9e 	bl	8001144 <__aeabi_f2iz>
 8002808:	0002      	movs	r2, r0
 800280a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e065      	b.n	80028dc <HSVtoRGB+0x260>
        case 3: *r = p * 255, *g = q * 255, *b = v * 255; break;
 8002810:	4936      	ldr	r1, [pc, #216]	; (80028ec <HSVtoRGB+0x270>)
 8002812:	69f8      	ldr	r0, [r7, #28]
 8002814:	f7fe f992 	bl	8000b3c <__aeabi_fmul>
 8002818:	1c03      	adds	r3, r0, #0
 800281a:	1c18      	adds	r0, r3, #0
 800281c:	f7fe fc92 	bl	8001144 <__aeabi_f2iz>
 8002820:	0002      	movs	r2, r0
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	4931      	ldr	r1, [pc, #196]	; (80028ec <HSVtoRGB+0x270>)
 8002828:	69b8      	ldr	r0, [r7, #24]
 800282a:	f7fe f987 	bl	8000b3c <__aeabi_fmul>
 800282e:	1c03      	adds	r3, r0, #0
 8002830:	1c18      	adds	r0, r3, #0
 8002832:	f7fe fc87 	bl	8001144 <__aeabi_f2iz>
 8002836:	0002      	movs	r2, r0
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	492b      	ldr	r1, [pc, #172]	; (80028ec <HSVtoRGB+0x270>)
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe f97c 	bl	8000b3c <__aeabi_fmul>
 8002844:	1c03      	adds	r3, r0, #0
 8002846:	1c18      	adds	r0, r3, #0
 8002848:	f7fe fc7c 	bl	8001144 <__aeabi_f2iz>
 800284c:	0002      	movs	r2, r0
 800284e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e043      	b.n	80028dc <HSVtoRGB+0x260>
        case 4: *r = t * 255, *g = p * 255, *b = v * 255; break;
 8002854:	4925      	ldr	r1, [pc, #148]	; (80028ec <HSVtoRGB+0x270>)
 8002856:	6978      	ldr	r0, [r7, #20]
 8002858:	f7fe f970 	bl	8000b3c <__aeabi_fmul>
 800285c:	1c03      	adds	r3, r0, #0
 800285e:	1c18      	adds	r0, r3, #0
 8002860:	f7fe fc70 	bl	8001144 <__aeabi_f2iz>
 8002864:	0002      	movs	r2, r0
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	4920      	ldr	r1, [pc, #128]	; (80028ec <HSVtoRGB+0x270>)
 800286c:	69f8      	ldr	r0, [r7, #28]
 800286e:	f7fe f965 	bl	8000b3c <__aeabi_fmul>
 8002872:	1c03      	adds	r3, r0, #0
 8002874:	1c18      	adds	r0, r3, #0
 8002876:	f7fe fc65 	bl	8001144 <__aeabi_f2iz>
 800287a:	0002      	movs	r2, r0
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	491a      	ldr	r1, [pc, #104]	; (80028ec <HSVtoRGB+0x270>)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe f95a 	bl	8000b3c <__aeabi_fmul>
 8002888:	1c03      	adds	r3, r0, #0
 800288a:	1c18      	adds	r0, r3, #0
 800288c:	f7fe fc5a 	bl	8001144 <__aeabi_f2iz>
 8002890:	0002      	movs	r2, r0
 8002892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e021      	b.n	80028dc <HSVtoRGB+0x260>
        case 5: *r = v * 255, *g = p * 255, *b = q * 255; break;
 8002898:	4914      	ldr	r1, [pc, #80]	; (80028ec <HSVtoRGB+0x270>)
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe f94e 	bl	8000b3c <__aeabi_fmul>
 80028a0:	1c03      	adds	r3, r0, #0
 80028a2:	1c18      	adds	r0, r3, #0
 80028a4:	f7fe fc4e 	bl	8001144 <__aeabi_f2iz>
 80028a8:	0002      	movs	r2, r0
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	490f      	ldr	r1, [pc, #60]	; (80028ec <HSVtoRGB+0x270>)
 80028b0:	69f8      	ldr	r0, [r7, #28]
 80028b2:	f7fe f943 	bl	8000b3c <__aeabi_fmul>
 80028b6:	1c03      	adds	r3, r0, #0
 80028b8:	1c18      	adds	r0, r3, #0
 80028ba:	f7fe fc43 	bl	8001144 <__aeabi_f2iz>
 80028be:	0002      	movs	r2, r0
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	4909      	ldr	r1, [pc, #36]	; (80028ec <HSVtoRGB+0x270>)
 80028c6:	69b8      	ldr	r0, [r7, #24]
 80028c8:	f7fe f938 	bl	8000b3c <__aeabi_fmul>
 80028cc:	1c03      	adds	r3, r0, #0
 80028ce:	1c18      	adds	r0, r3, #0
 80028d0:	f7fe fc38 	bl	8001144 <__aeabi_f2iz>
 80028d4:	0002      	movs	r2, r0
 80028d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	46c0      	nop			; (mov r8, r8)
    }
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b00b      	add	sp, #44	; 0x2c
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	42700000 	.word	0x42700000
 80028e8:	0800be20 	.word	0x0800be20
 80028ec:	437f0000 	.word	0x437f0000

080028f0 <Button_ISR>:
{
    // Add initialization code if necessary. For now, it's empty as GPIO is assumed to be initialized elsewhere.
}

void Button_ISR(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	if((HAL_GetTick() - lastTick) > 20)  // Debounce time of 20ms
 80028f4:	f000 fb9e 	bl	8003034 <HAL_GetTick>
 80028f8:	0002      	movs	r2, r0
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <Button_ISR+0x24>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b14      	cmp	r3, #20
 8002902:	d904      	bls.n	800290e <Button_ISR+0x1e>
	    {
	        lastTick = HAL_GetTick();
 8002904:	f000 fb96 	bl	8003034 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	4b02      	ldr	r3, [pc, #8]	; (8002914 <Button_ISR+0x24>)
 800290c:	601a      	str	r2, [r3, #0]
	    }
}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000224 	.word	0x20000224

08002918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800291c:	f000 fb30 	bl	8002f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002920:	f000 f87a 	bl	8002a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002924:	f000 f944 	bl	8002bb0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8002928:	f008 fbc2 	bl	800b0b0 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800292c:	f000 f8de 	bl	8002aec <MX_I2C1_Init>
  MX_TIM6_Init();
 8002930:	f000 f91c 	bl	8002b6c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LP5024_EN_GPIO_Port, LP5024_EN_Pin, GPIO_PIN_SET);
 8002934:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <main+0xc8>)
 8002936:	2201      	movs	r2, #1
 8002938:	2120      	movs	r1, #32
 800293a:	0018      	movs	r0, r3
 800293c:	f000 fe48 	bl	80035d0 <HAL_GPIO_WritePin>
  HAL_Delay(500); // Delay of 0.5 second
 8002940:	23fa      	movs	r3, #250	; 0xfa
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	0018      	movs	r0, r3
 8002946:	f000 fb7f 	bl	8003048 <HAL_Delay>
  LP5024_Init();
 800294a:	f7ff fd37 	bl	80023bc <LP5024_Init>

  /* Start TIM2 */
  HAL_TIM_Base_Start_IT(&htim6);
 800294e:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <main+0xcc>)
 8002950:	0018      	movs	r0, r3
 8002952:	f004 fc6f 	bl	8007234 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //CheckButtonHoldStatus();

    if(flag_settingReq){
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <main+0xd0>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d011      	beq.n	8002984 <main+0x6c>
      tx_buffer[0] = '\0';
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <main+0xd4>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
      memcpy(tx_buffer, SETT_REQ_CMD, sizeof(SETT_REQ_CMD));
 8002966:	4922      	ldr	r1, [pc, #136]	; (80029f0 <main+0xd8>)
 8002968:	4b20      	ldr	r3, [pc, #128]	; (80029ec <main+0xd4>)
 800296a:	2204      	movs	r2, #4
 800296c:	0018      	movs	r0, r3
 800296e:	f009 f9b5 	bl	800bcdc <memcpy>
      USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, tx_buffer, sizeof(tx_buffer));
 8002972:	491e      	ldr	r1, [pc, #120]	; (80029ec <main+0xd4>)
 8002974:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <main+0xdc>)
 8002976:	2240      	movs	r2, #64	; 0x40
 8002978:	0018      	movs	r0, r3
 800297a:	f007 f8bb 	bl	8009af4 <USBD_CUSTOM_HID_SendReport>
      flag_settingReq = false;
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <main+0xd0>)
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    }

    if(flag_btnLight)
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <main+0xe0>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <main+0x7e>
    {
    	activeLightingConfig = &buttonPressLightingConfig;
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <main+0xe4>)
 8002990:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <main+0xe8>)
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e00e      	b.n	80029b4 <main+0x9c>
    }
    else if(!hse_flag)
 8002996:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <main+0xec>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2201      	movs	r2, #1
 800299e:	4053      	eors	r3, r2
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <main+0x96>
    {
    	activeLightingConfig = &lidLiftLightingConfig;
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <main+0xe4>)
 80029a8:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <main+0xf0>)
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e002      	b.n	80029b4 <main+0x9c>
    } 
    else
    {
    	activeLightingConfig = &idleLightingConfig;
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <main+0xe4>)
 80029b0:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <main+0xf4>)
 80029b2:	601a      	str	r2, [r3, #0]
    }

	if (update_led) {
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <main+0xf8>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0cb      	beq.n	8002956 <main+0x3e>
      
		LightingHandler();
 80029be:	f7fe fd79 	bl	80014b4 <LightingHandler>


		// Reset flag
		update_led = false;
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <main+0xf8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]

		if(reqSettingCnt > 180)
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <main+0xfc>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2bb4      	cmp	r3, #180	; 0xb4
 80029d0:	d9c1      	bls.n	8002956 <main+0x3e>
		{
			flag_settingReq = true;
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <main+0xd0>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
			reqSettingCnt = 0;
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <main+0xfc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	801a      	strh	r2, [r3, #0]
    if(flag_settingReq){
 80029de:	e7ba      	b.n	8002956 <main+0x3e>
 80029e0:	48000400 	.word	0x48000400
 80029e4:	2000027c 	.word	0x2000027c
 80029e8:	20000304 	.word	0x20000304
 80029ec:	200002c4 	.word	0x200002c4
 80029f0:	0800bd14 	.word	0x0800bd14
 80029f4:	20000314 	.word	0x20000314
 80029f8:	20000305 	.word	0x20000305
 80029fc:	20000000 	.word	0x20000000
 8002a00:	200001f0 	.word	0x200001f0
 8002a04:	20000008 	.word	0x20000008
 8002a08:	20000204 	.word	0x20000204
 8002a0c:	200001dc 	.word	0x200001dc
 8002a10:	20000309 	.word	0x20000309
 8002a14:	20000306 	.word	0x20000306

08002a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b097      	sub	sp, #92	; 0x5c
 8002a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1e:	2428      	movs	r4, #40	; 0x28
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	0018      	movs	r0, r3
 8002a24:	2330      	movs	r3, #48	; 0x30
 8002a26:	001a      	movs	r2, r3
 8002a28:	2100      	movs	r1, #0
 8002a2a:	f009 f925 	bl	800bc78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a2e:	2318      	movs	r3, #24
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	0018      	movs	r0, r3
 8002a34:	2310      	movs	r3, #16
 8002a36:	001a      	movs	r2, r3
 8002a38:	2100      	movs	r1, #0
 8002a3a:	f009 f91d 	bl	800bc78 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	0018      	movs	r0, r3
 8002a42:	2314      	movs	r3, #20
 8002a44:	001a      	movs	r2, r3
 8002a46:	2100      	movs	r1, #0
 8002a48:	f009 f916 	bl	800bc78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002a4c:	0021      	movs	r1, r4
 8002a4e:	187b      	adds	r3, r7, r1
 8002a50:	2203      	movs	r2, #3
 8002a52:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	2201      	movs	r2, #1
 8002a58:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	2210      	movs	r2, #16
 8002a64:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	2202      	movs	r2, #2
 8002a6a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	0252      	lsls	r2, r2, #9
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	0352      	lsls	r2, r2, #13
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	2200      	movs	r2, #0
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	0018      	movs	r0, r3
 8002a86:	f003 fe63 	bl	8006750 <HAL_RCC_OscConfig>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002a8e:	f000 f949 	bl	8002d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a92:	2118      	movs	r1, #24
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2207      	movs	r2, #7
 8002a98:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2101      	movs	r1, #1
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f004 f96b 	bl	8006d8c <HAL_RCC_ClockConfig>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d001      	beq.n	8002abe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002aba:	f000 f933 	bl	8002d24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <SystemClock_Config+0xd0>)
 8002ac2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2280      	movs	r2, #128	; 0x80
 8002ace:	611a      	str	r2, [r3, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f004 fa80 	bl	8006fd8 <HAL_RCCEx_PeriphCLKConfig>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002adc:	f000 f922 	bl	8002d24 <Error_Handler>
  }
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b017      	add	sp, #92	; 0x5c
 8002ae6:	bd90      	pop	{r4, r7, pc}
 8002ae8:	00020020 	.word	0x00020020

08002aec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <MX_I2C1_Init+0x78>)
 8002af4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002af8:	4a1b      	ldr	r2, [pc, #108]	; (8002b68 <MX_I2C1_Init+0x7c>)
 8002afa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002afc:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 fd95 	bl	8003658 <HAL_I2C_Init>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d001      	beq.n	8002b36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b32:	f000 f8f7 	bl	8002d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b38:	2100      	movs	r1, #0
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f001 ff38 	bl	80049b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002b40:	1e03      	subs	r3, r0, #0
 8002b42:	d001      	beq.n	8002b48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b44:	f000 f8ee 	bl	8002d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <MX_I2C1_Init+0x74>)
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f001 ff7b 	bl	8004a48 <HAL_I2CEx_ConfigDigitalFilter>
 8002b52:	1e03      	subs	r3, r0, #0
 8002b54:	d001      	beq.n	8002b5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b56:	f000 f8e5 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000228 	.word	0x20000228
 8002b64:	40005400 	.word	0x40005400
 8002b68:	2000090e 	.word	0x2000090e

08002b6c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <MX_TIM6_Init+0x38>)
 8002b72:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <MX_TIM6_Init+0x3c>)
 8002b74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <MX_TIM6_Init+0x38>)
 8002b78:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <MX_TIM6_Init+0x40>)
 8002b7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <MX_TIM6_Init+0x38>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 166;
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <MX_TIM6_Init+0x38>)
 8002b84:	22a6      	movs	r2, #166	; 0xa6
 8002b86:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b88:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <MX_TIM6_Init+0x38>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <MX_TIM6_Init+0x38>)
 8002b90:	0018      	movs	r0, r3
 8002b92:	f004 faff 	bl	8007194 <HAL_TIM_Base_Init>
 8002b96:	1e03      	subs	r3, r0, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8002b9a:	f000 f8c3 	bl	8002d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2000027c 	.word	0x2000027c
 8002ba8:	40001000 	.word	0x40001000
 8002bac:	0000063f 	.word	0x0000063f

08002bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b08b      	sub	sp, #44	; 0x2c
 8002bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	2414      	movs	r4, #20
 8002bb8:	193b      	adds	r3, r7, r4
 8002bba:	0018      	movs	r0, r3
 8002bbc:	2314      	movs	r3, #20
 8002bbe:	001a      	movs	r2, r3
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f009 f859 	bl	800bc78 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc6:	4b40      	ldr	r3, [pc, #256]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	0309      	lsls	r1, r1, #12
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	615a      	str	r2, [r3, #20]
 8002bd4:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	031b      	lsls	r3, r3, #12
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be2:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	03c9      	lsls	r1, r1, #15
 8002bec:	430a      	orrs	r2, r1
 8002bee:	615a      	str	r2, [r3, #20]
 8002bf0:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	03db      	lsls	r3, r3, #15
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0289      	lsls	r1, r1, #10
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	615a      	str	r2, [r3, #20]
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	029b      	lsls	r3, r3, #10
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	02c9      	lsls	r1, r1, #11
 8002c24:	430a      	orrs	r2, r1
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <MX_GPIO_Init+0x118>)
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	02db      	lsls	r3, r3, #11
 8002c30:	4013      	ands	r3, r2
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LP5024_EN_GPIO_Port, LP5024_EN_Pin, GPIO_PIN_RESET);
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <MX_GPIO_Init+0x11c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2120      	movs	r1, #32
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f000 fcc7 	bl	80035d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8002c42:	193b      	adds	r3, r7, r4
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	0192      	lsls	r2, r2, #6
 8002c48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	22c4      	movs	r2, #196	; 0xc4
 8002c4e:	0392      	lsls	r2, r2, #14
 8002c50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	2201      	movs	r2, #1
 8002c56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <MX_GPIO_Init+0x120>)
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	0010      	movs	r0, r2
 8002c60:	f000 fb46 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HES_OUT2_Pin HES_OUT1_Pin */
  GPIO_InitStruct.Pin = HES_OUT2_Pin|HES_OUT1_Pin;
 8002c64:	193b      	adds	r3, r7, r4
 8002c66:	2281      	movs	r2, #129	; 0x81
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c6c:	193b      	adds	r3, r7, r4
 8002c6e:	2288      	movs	r2, #136	; 0x88
 8002c70:	0352      	lsls	r2, r2, #13
 8002c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	2202      	movs	r2, #2
 8002c78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7a:	193a      	adds	r2, r7, r4
 8002c7c:	2390      	movs	r3, #144	; 0x90
 8002c7e:	05db      	lsls	r3, r3, #23
 8002c80:	0011      	movs	r1, r2
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 fb34 	bl	80032f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LP5024_EN_Pin */
  GPIO_InitStruct.Pin = LP5024_EN_Pin;
 8002c88:	0021      	movs	r1, r4
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2201      	movs	r2, #1
 8002c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LP5024_EN_GPIO_Port, &GPIO_InitStruct);
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <MX_GPIO_Init+0x11c>)
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f000 fb21 	bl	80032f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	2007      	movs	r0, #7
 8002cb4:	f000 fa98 	bl	80031e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002cb8:	2007      	movs	r0, #7
 8002cba:	f000 faaa 	bl	8003212 <HAL_NVIC_EnableIRQ>

}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b00b      	add	sp, #44	; 0x2c
 8002cc4:	bd90      	pop	{r4, r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	48000400 	.word	0x48000400
 8002cd0:	48000800 	.word	0x48000800

08002cd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(htim->Instance == TIM6){
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d111      	bne.n	8002d0a <HAL_TIM_PeriodElapsedCallback+0x36>
		// Set flag to update LED
		update_led = true;
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]

    if(!settingsLoaded)
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4053      	eors	r3, r2
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_TIM_PeriodElapsedCallback+0x36>
      reqSettingCnt++;
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3301      	adds	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002d08:	801a      	strh	r2, [r3, #0]
	}
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	40001000 	.word	0x40001000
 8002d18:	20000309 	.word	0x20000309
 8002d1c:	20000308 	.word	0x20000308
 8002d20:	20000306 	.word	0x20000306

08002d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d28:	b672      	cpsid	i
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <Error_Handler+0x8>
	...

08002d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_MspInit+0x44>)
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_MspInit+0x44>)
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	619a      	str	r2, [r3, #24]
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_MspInit+0x44>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2201      	movs	r2, #1
 8002d48:	4013      	ands	r3, r2
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_MspInit+0x44>)
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <HAL_MspInit+0x44>)
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	0549      	lsls	r1, r1, #21
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	61da      	str	r2, [r3, #28]
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_MspInit+0x44>)
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	2380      	movs	r3, #128	; 0x80
 8002d62:	055b      	lsls	r3, r3, #21
 8002d64:	4013      	ands	r3, r2
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b08b      	sub	sp, #44	; 0x2c
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	2414      	movs	r4, #20
 8002d82:	193b      	adds	r3, r7, r4
 8002d84:	0018      	movs	r0, r3
 8002d86:	2314      	movs	r3, #20
 8002d88:	001a      	movs	r2, r3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f008 ff74 	bl	800bc78 <memset>
  if(hi2c->Instance==I2C1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a20      	ldr	r2, [pc, #128]	; (8002e18 <HAL_I2C_MspInit+0xa0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d139      	bne.n	8002e0e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_I2C_MspInit+0xa4>)
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_I2C_MspInit+0xa4>)
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	02c9      	lsls	r1, r1, #11
 8002da4:	430a      	orrs	r2, r1
 8002da6:	615a      	str	r2, [r3, #20]
 8002da8:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <HAL_I2C_MspInit+0xa4>)
 8002daa:	695a      	ldr	r2, [r3, #20]
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	02db      	lsls	r3, r3, #11
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002db6:	0021      	movs	r1, r4
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	22c0      	movs	r2, #192	; 0xc0
 8002dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	2212      	movs	r2, #18
 8002dc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	4a11      	ldr	r2, [pc, #68]	; (8002e20 <HAL_I2C_MspInit+0xa8>)
 8002dda:	0019      	movs	r1, r3
 8002ddc:	0010      	movs	r0, r2
 8002dde:	f000 fa87 	bl	80032f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_I2C_MspInit+0xa4>)
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <HAL_I2C_MspInit+0xa4>)
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	0389      	lsls	r1, r1, #14
 8002dec:	430a      	orrs	r2, r1
 8002dee:	61da      	str	r2, [r3, #28]
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_I2C_MspInit+0xa4>)
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	039b      	lsls	r3, r3, #14
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2101      	movs	r1, #1
 8002e02:	2017      	movs	r0, #23
 8002e04:	f000 f9f0 	bl	80031e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002e08:	2017      	movs	r0, #23
 8002e0a:	f000 fa02 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b00b      	add	sp, #44	; 0x2c
 8002e14:	bd90      	pop	{r4, r7, pc}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	40005400 	.word	0x40005400
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	48000400 	.word	0x48000400

08002e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_TIM_Base_MspInit+0x44>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d113      	bne.n	8002e5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <HAL_TIM_Base_MspInit+0x48>)
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_TIM_Base_MspInit+0x48>)
 8002e3c:	2110      	movs	r1, #16
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	61da      	str	r2, [r3, #28]
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_TIM_Base_MspInit+0x48>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	2210      	movs	r2, #16
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2102      	movs	r1, #2
 8002e52:	2011      	movs	r0, #17
 8002e54:	f000 f9c8 	bl	80031e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002e58:	2011      	movs	r0, #17
 8002e5a:	f000 f9da 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b004      	add	sp, #16
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	40001000 	.word	0x40001000
 8002e6c:	40021000 	.word	0x40021000

08002e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e74:	e7fe      	b.n	8002e74 <NMI_Handler+0x4>

08002e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <HardFault_Handler+0x4>

08002e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e94:	f000 f8bc 	bl	8003010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  Button_ISR();
 8002ea2:	f7ff fd25 	bl	80028f0 <Button_ISR>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HES_OUT1_Pin);
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fbae 	bl	800360c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	019b      	lsls	r3, r3, #6
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 fba9 	bl	800360c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <TIM6_IRQHandler+0x14>)
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f004 fa00 	bl	80072cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	2000027c 	.word	0x2000027c

08002ed8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <I2C1_IRQHandler+0x2c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	23e0      	movs	r3, #224	; 0xe0
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <I2C1_IRQHandler+0x2c>)
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 fd6b 	bl	80039c8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002ef2:	e003      	b.n	8002efc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <I2C1_IRQHandler+0x2c>)
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 fd4c 	bl	8003994 <HAL_I2C_EV_IRQHandler>
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	20000228 	.word	0x20000228

08002f08 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <USB_IRQHandler+0x14>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f001 ff0c 	bl	8004d2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	200007d8 	.word	0x200007d8

08002f20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f2c:	480d      	ldr	r0, [pc, #52]	; (8002f64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f30:	f7ff fff6 	bl	8002f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f36:	490d      	ldr	r1, [pc, #52]	; (8002f6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f38:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <LoopForever+0xe>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f3c:	e002      	b.n	8002f44 <LoopCopyDataInit>

08002f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f42:	3304      	adds	r3, #4

08002f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f48:	d3f9      	bcc.n	8002f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4a:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f4c:	4c0a      	ldr	r4, [pc, #40]	; (8002f78 <LoopForever+0x16>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f50:	e001      	b.n	8002f56 <LoopFillZerobss>

08002f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f54:	3204      	adds	r2, #4

08002f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f58:	d3fb      	bcc.n	8002f52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f5a:	f008 fe9b 	bl	800bc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f5e:	f7ff fcdb 	bl	8002918 <main>

08002f62 <LoopForever>:

LoopForever:
    b LoopForever
 8002f62:	e7fe      	b.n	8002f62 <LoopForever>
  ldr   r0, =_estack
 8002f64:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f6c:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8002f70:	0800bf08 	.word	0x0800bf08
  ldr r2, =_sbss
 8002f74:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8002f78:	20000c3c 	.word	0x20000c3c

08002f7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f7c:	e7fe      	b.n	8002f7c <ADC1_IRQHandler>
	...

08002f80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <HAL_Init+0x24>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_Init+0x24>)
 8002f8a:	2110      	movs	r1, #16
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002f90:	2003      	movs	r0, #3
 8002f92:	f000 f809 	bl	8002fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f96:	f7ff fecb 	bl	8002d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	40022000 	.word	0x40022000

08002fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <HAL_InitTick+0x5c>)
 8002fb2:	681c      	ldr	r4, [r3, #0]
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_InitTick+0x60>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	0019      	movs	r1, r3
 8002fba:	23fa      	movs	r3, #250	; 0xfa
 8002fbc:	0098      	lsls	r0, r3, #2
 8002fbe:	f7fd f8a3 	bl	8000108 <__udivsi3>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	0020      	movs	r0, r4
 8002fc8:	f7fd f89e 	bl	8000108 <__udivsi3>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 f92f 	bl	8003232 <HAL_SYSTICK_Config>
 8002fd4:	1e03      	subs	r3, r0, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e00f      	b.n	8002ffc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d80b      	bhi.n	8002ffa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	425b      	negs	r3, r3
 8002fe8:	2200      	movs	r2, #0
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 f8fc 	bl	80031e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_InitTick+0x64>)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b003      	add	sp, #12
 8003002:	bd90      	pop	{r4, r7, pc}
 8003004:	2000000c 	.word	0x2000000c
 8003008:	20000014 	.word	0x20000014
 800300c:	20000010 	.word	0x20000010

08003010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_IncTick+0x1c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	001a      	movs	r2, r3
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_IncTick+0x20>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	18d2      	adds	r2, r2, r3
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_IncTick+0x20>)
 8003022:	601a      	str	r2, [r3, #0]
}
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	20000014 	.word	0x20000014
 8003030:	2000030c 	.word	0x2000030c

08003034 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  return uwTick;
 8003038:	4b02      	ldr	r3, [pc, #8]	; (8003044 <HAL_GetTick+0x10>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	2000030c 	.word	0x2000030c

08003048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7ff fff0 	bl	8003034 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3301      	adds	r3, #1
 8003060:	d005      	beq.n	800306e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_Delay+0x44>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	001a      	movs	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	189b      	adds	r3, r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	f7ff ffe0 	bl	8003034 <HAL_GetTick>
 8003074:	0002      	movs	r2, r0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	429a      	cmp	r2, r3
 800307e:	d8f7      	bhi.n	8003070 <HAL_Delay+0x28>
  {
  }
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b004      	add	sp, #16
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	20000014 	.word	0x20000014

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	0002      	movs	r2, r0
 8003098:	1dfb      	adds	r3, r7, #7
 800309a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800309c:	1dfb      	adds	r3, r7, #7
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b7f      	cmp	r3, #127	; 0x7f
 80030a2:	d809      	bhi.n	80030b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a4:	1dfb      	adds	r3, r7, #7
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	001a      	movs	r2, r3
 80030aa:	231f      	movs	r3, #31
 80030ac:	401a      	ands	r2, r3
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <__NVIC_EnableIRQ+0x30>)
 80030b0:	2101      	movs	r1, #1
 80030b2:	4091      	lsls	r1, r2
 80030b4:	000a      	movs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]
  }
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b002      	add	sp, #8
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	e000e100 	.word	0xe000e100

080030c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	0002      	movs	r2, r0
 80030cc:	6039      	str	r1, [r7, #0]
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030d2:	1dfb      	adds	r3, r7, #7
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b7f      	cmp	r3, #127	; 0x7f
 80030d8:	d828      	bhi.n	800312c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030da:	4a2f      	ldr	r2, [pc, #188]	; (8003198 <__NVIC_SetPriority+0xd4>)
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b25b      	sxtb	r3, r3
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	33c0      	adds	r3, #192	; 0xc0
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	589b      	ldr	r3, [r3, r2]
 80030ea:	1dfa      	adds	r2, r7, #7
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	0011      	movs	r1, r2
 80030f0:	2203      	movs	r2, #3
 80030f2:	400a      	ands	r2, r1
 80030f4:	00d2      	lsls	r2, r2, #3
 80030f6:	21ff      	movs	r1, #255	; 0xff
 80030f8:	4091      	lsls	r1, r2
 80030fa:	000a      	movs	r2, r1
 80030fc:	43d2      	mvns	r2, r2
 80030fe:	401a      	ands	r2, r3
 8003100:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	019b      	lsls	r3, r3, #6
 8003106:	22ff      	movs	r2, #255	; 0xff
 8003108:	401a      	ands	r2, r3
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	0018      	movs	r0, r3
 8003110:	2303      	movs	r3, #3
 8003112:	4003      	ands	r3, r0
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003118:	481f      	ldr	r0, [pc, #124]	; (8003198 <__NVIC_SetPriority+0xd4>)
 800311a:	1dfb      	adds	r3, r7, #7
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b25b      	sxtb	r3, r3
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	430a      	orrs	r2, r1
 8003124:	33c0      	adds	r3, #192	; 0xc0
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800312a:	e031      	b.n	8003190 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <__NVIC_SetPriority+0xd8>)
 800312e:	1dfb      	adds	r3, r7, #7
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	0019      	movs	r1, r3
 8003134:	230f      	movs	r3, #15
 8003136:	400b      	ands	r3, r1
 8003138:	3b08      	subs	r3, #8
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	3306      	adds	r3, #6
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	18d3      	adds	r3, r2, r3
 8003142:	3304      	adds	r3, #4
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	1dfa      	adds	r2, r7, #7
 8003148:	7812      	ldrb	r2, [r2, #0]
 800314a:	0011      	movs	r1, r2
 800314c:	2203      	movs	r2, #3
 800314e:	400a      	ands	r2, r1
 8003150:	00d2      	lsls	r2, r2, #3
 8003152:	21ff      	movs	r1, #255	; 0xff
 8003154:	4091      	lsls	r1, r2
 8003156:	000a      	movs	r2, r1
 8003158:	43d2      	mvns	r2, r2
 800315a:	401a      	ands	r2, r3
 800315c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	019b      	lsls	r3, r3, #6
 8003162:	22ff      	movs	r2, #255	; 0xff
 8003164:	401a      	ands	r2, r3
 8003166:	1dfb      	adds	r3, r7, #7
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	0018      	movs	r0, r3
 800316c:	2303      	movs	r3, #3
 800316e:	4003      	ands	r3, r0
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003174:	4809      	ldr	r0, [pc, #36]	; (800319c <__NVIC_SetPriority+0xd8>)
 8003176:	1dfb      	adds	r3, r7, #7
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	001c      	movs	r4, r3
 800317c:	230f      	movs	r3, #15
 800317e:	4023      	ands	r3, r4
 8003180:	3b08      	subs	r3, #8
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	430a      	orrs	r2, r1
 8003186:	3306      	adds	r3, #6
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	18c3      	adds	r3, r0, r3
 800318c:	3304      	adds	r3, #4
 800318e:	601a      	str	r2, [r3, #0]
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b003      	add	sp, #12
 8003196:	bd90      	pop	{r4, r7, pc}
 8003198:	e000e100 	.word	0xe000e100
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	1e5a      	subs	r2, r3, #1
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	045b      	lsls	r3, r3, #17
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d301      	bcc.n	80031b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b4:	2301      	movs	r3, #1
 80031b6:	e010      	b.n	80031da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <SysTick_Config+0x44>)
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	3a01      	subs	r2, #1
 80031be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c0:	2301      	movs	r3, #1
 80031c2:	425b      	negs	r3, r3
 80031c4:	2103      	movs	r1, #3
 80031c6:	0018      	movs	r0, r3
 80031c8:	f7ff ff7c 	bl	80030c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <SysTick_Config+0x44>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <SysTick_Config+0x44>)
 80031d4:	2207      	movs	r2, #7
 80031d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d8:	2300      	movs	r3, #0
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	e000e010 	.word	0xe000e010

080031e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	210f      	movs	r1, #15
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	1c02      	adds	r2, r0, #0
 80031f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	b25b      	sxtb	r3, r3
 8003202:	0011      	movs	r1, r2
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff ff5d 	bl	80030c4 <__NVIC_SetPriority>
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b004      	add	sp, #16
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	0002      	movs	r2, r0
 800321a:	1dfb      	adds	r3, r7, #7
 800321c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321e:	1dfb      	adds	r3, r7, #7
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b25b      	sxtb	r3, r3
 8003224:	0018      	movs	r0, r3
 8003226:	f7ff ff33 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b002      	add	sp, #8
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f7ff ffaf 	bl	80031a0 <SysTick_Config>
 8003242:	0003      	movs	r3, r0
}
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003254:	210f      	movs	r1, #15
 8003256:	187b      	adds	r3, r7, r1
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2221      	movs	r2, #33	; 0x21
 8003260:	5c9b      	ldrb	r3, [r3, r2]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d006      	beq.n	8003276 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2204      	movs	r2, #4
 800326c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800326e:	187b      	adds	r3, r7, r1
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e028      	b.n	80032c8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	210e      	movs	r1, #14
 8003282:	438a      	bics	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	438a      	bics	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329e:	2101      	movs	r1, #1
 80032a0:	4091      	lsls	r1, r2
 80032a2:	000a      	movs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2221      	movs	r2, #33	; 0x21
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d004      	beq.n	80032c8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	0010      	movs	r0, r2
 80032c6:	4798      	blx	r3
    }
  }
  return status;
 80032c8:	230f      	movs	r3, #15
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	781b      	ldrb	r3, [r3, #0]
}
 80032ce:	0018      	movs	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b004      	add	sp, #16
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2221      	movs	r2, #33	; 0x21
 80032e2:	5c9b      	ldrb	r3, [r3, r2]
 80032e4:	b2db      	uxtb	r3, r3
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b002      	add	sp, #8
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fe:	e14f      	b.n	80035a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2101      	movs	r1, #1
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4091      	lsls	r1, r2
 800330a:	000a      	movs	r2, r1
 800330c:	4013      	ands	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d100      	bne.n	8003318 <HAL_GPIO_Init+0x28>
 8003316:	e140      	b.n	800359a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	4013      	ands	r3, r2
 8003320:	2b01      	cmp	r3, #1
 8003322:	d005      	beq.n	8003330 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2203      	movs	r2, #3
 800332a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800332c:	2b02      	cmp	r3, #2
 800332e:	d130      	bne.n	8003392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	409a      	lsls	r2, r3
 800333e:	0013      	movs	r3, r2
 8003340:	43da      	mvns	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	409a      	lsls	r2, r3
 8003352:	0013      	movs	r3, r2
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003366:	2201      	movs	r2, #1
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	43da      	mvns	r2, r3
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	091b      	lsrs	r3, r3, #4
 800337c:	2201      	movs	r2, #1
 800337e:	401a      	ands	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	409a      	lsls	r2, r3
 8003384:	0013      	movs	r3, r2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2203      	movs	r2, #3
 8003398:	4013      	ands	r3, r2
 800339a:	2b03      	cmp	r3, #3
 800339c:	d017      	beq.n	80033ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	409a      	lsls	r2, r3
 80033ac:	0013      	movs	r3, r2
 80033ae:	43da      	mvns	r2, r3
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	0013      	movs	r3, r2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2203      	movs	r2, #3
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d123      	bne.n	8003422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	08da      	lsrs	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3208      	adds	r2, #8
 80033e2:	0092      	lsls	r2, r2, #2
 80033e4:	58d3      	ldr	r3, [r2, r3]
 80033e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2207      	movs	r2, #7
 80033ec:	4013      	ands	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	220f      	movs	r2, #15
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0013      	movs	r3, r2
 80033f6:	43da      	mvns	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4013      	ands	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2107      	movs	r1, #7
 8003406:	400b      	ands	r3, r1
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	409a      	lsls	r2, r3
 800340c:	0013      	movs	r3, r2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	08da      	lsrs	r2, r3, #3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3208      	adds	r2, #8
 800341c:	0092      	lsls	r2, r2, #2
 800341e:	6939      	ldr	r1, [r7, #16]
 8003420:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2203      	movs	r2, #3
 800342e:	409a      	lsls	r2, r3
 8003430:	0013      	movs	r3, r2
 8003432:	43da      	mvns	r2, r3
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2203      	movs	r2, #3
 8003440:	401a      	ands	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	409a      	lsls	r2, r3
 8003448:	0013      	movs	r3, r2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	23c0      	movs	r3, #192	; 0xc0
 800345c:	029b      	lsls	r3, r3, #10
 800345e:	4013      	ands	r3, r2
 8003460:	d100      	bne.n	8003464 <HAL_GPIO_Init+0x174>
 8003462:	e09a      	b.n	800359a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003464:	4b54      	ldr	r3, [pc, #336]	; (80035b8 <HAL_GPIO_Init+0x2c8>)
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_GPIO_Init+0x2c8>)
 800346a:	2101      	movs	r1, #1
 800346c:	430a      	orrs	r2, r1
 800346e:	619a      	str	r2, [r3, #24]
 8003470:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <HAL_GPIO_Init+0x2c8>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2201      	movs	r2, #1
 8003476:	4013      	ands	r3, r2
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800347c:	4a4f      	ldr	r2, [pc, #316]	; (80035bc <HAL_GPIO_Init+0x2cc>)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	089b      	lsrs	r3, r3, #2
 8003482:	3302      	adds	r3, #2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	589b      	ldr	r3, [r3, r2]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2203      	movs	r2, #3
 800348e:	4013      	ands	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	409a      	lsls	r2, r3
 8003496:	0013      	movs	r3, r2
 8003498:	43da      	mvns	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4013      	ands	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	2390      	movs	r3, #144	; 0x90
 80034a4:	05db      	lsls	r3, r3, #23
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d013      	beq.n	80034d2 <HAL_GPIO_Init+0x1e2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a44      	ldr	r2, [pc, #272]	; (80035c0 <HAL_GPIO_Init+0x2d0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00d      	beq.n	80034ce <HAL_GPIO_Init+0x1de>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a43      	ldr	r2, [pc, #268]	; (80035c4 <HAL_GPIO_Init+0x2d4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <HAL_GPIO_Init+0x1da>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a42      	ldr	r2, [pc, #264]	; (80035c8 <HAL_GPIO_Init+0x2d8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_GPIO_Init+0x1d6>
 80034c2:	2303      	movs	r3, #3
 80034c4:	e006      	b.n	80034d4 <HAL_GPIO_Init+0x1e4>
 80034c6:	2305      	movs	r3, #5
 80034c8:	e004      	b.n	80034d4 <HAL_GPIO_Init+0x1e4>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e002      	b.n	80034d4 <HAL_GPIO_Init+0x1e4>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <HAL_GPIO_Init+0x1e4>
 80034d2:	2300      	movs	r3, #0
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	2103      	movs	r1, #3
 80034d8:	400a      	ands	r2, r1
 80034da:	0092      	lsls	r2, r2, #2
 80034dc:	4093      	lsls	r3, r2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034e4:	4935      	ldr	r1, [pc, #212]	; (80035bc <HAL_GPIO_Init+0x2cc>)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	3302      	adds	r3, #2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034f2:	4b36      	ldr	r3, [pc, #216]	; (80035cc <HAL_GPIO_Init+0x2dc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	43da      	mvns	r2, r3
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	035b      	lsls	r3, r3, #13
 800350a:	4013      	ands	r3, r2
 800350c:	d003      	beq.n	8003516 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003516:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <HAL_GPIO_Init+0x2dc>)
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800351c:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <HAL_GPIO_Init+0x2dc>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	43da      	mvns	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	039b      	lsls	r3, r3, #14
 8003534:	4013      	ands	r3, r2
 8003536:	d003      	beq.n	8003540 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_GPIO_Init+0x2dc>)
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003546:	4b21      	ldr	r3, [pc, #132]	; (80035cc <HAL_GPIO_Init+0x2dc>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	43da      	mvns	r2, r3
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	029b      	lsls	r3, r3, #10
 800355e:	4013      	ands	r3, r2
 8003560:	d003      	beq.n	800356a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <HAL_GPIO_Init+0x2dc>)
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_GPIO_Init+0x2dc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	43da      	mvns	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	025b      	lsls	r3, r3, #9
 8003588:	4013      	ands	r3, r2
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <HAL_GPIO_Init+0x2dc>)
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3301      	adds	r3, #1
 800359e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	40da      	lsrs	r2, r3
 80035a8:	1e13      	subs	r3, r2, #0
 80035aa:	d000      	beq.n	80035ae <HAL_GPIO_Init+0x2be>
 80035ac:	e6a8      	b.n	8003300 <HAL_GPIO_Init+0x10>
  } 
}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b006      	add	sp, #24
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40010000 	.word	0x40010000
 80035c0:	48000400 	.word	0x48000400
 80035c4:	48000800 	.word	0x48000800
 80035c8:	48000c00 	.word	0x48000c00
 80035cc:	40010400 	.word	0x40010400

080035d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	0008      	movs	r0, r1
 80035da:	0011      	movs	r1, r2
 80035dc:	1cbb      	adds	r3, r7, #2
 80035de:	1c02      	adds	r2, r0, #0
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	1c7b      	adds	r3, r7, #1
 80035e4:	1c0a      	adds	r2, r1, #0
 80035e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035e8:	1c7b      	adds	r3, r7, #1
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035f0:	1cbb      	adds	r3, r7, #2
 80035f2:	881a      	ldrh	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035f8:	e003      	b.n	8003602 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035fa:	1cbb      	adds	r3, r7, #2
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	0002      	movs	r2, r0
 8003614:	1dbb      	adds	r3, r7, #6
 8003616:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	1dba      	adds	r2, r7, #6
 800361e:	8812      	ldrh	r2, [r2, #0]
 8003620:	4013      	ands	r3, r2
 8003622:	d008      	beq.n	8003636 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003626:	1dba      	adds	r2, r7, #6
 8003628:	8812      	ldrh	r2, [r2, #0]
 800362a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800362c:	1dbb      	adds	r3, r7, #6
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f807 	bl	8003644 <HAL_GPIO_EXTI_Callback>
  }
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b002      	add	sp, #8
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	0002      	movs	r2, r0
 800364c:	1dbb      	adds	r3, r7, #6
 800364e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e082      	b.n	8003770 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2241      	movs	r2, #65	; 0x41
 800366e:	5c9b      	ldrb	r3, [r3, r2]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2240      	movs	r2, #64	; 0x40
 800367a:	2100      	movs	r1, #0
 800367c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	0018      	movs	r0, r3
 8003682:	f7ff fb79 	bl	8002d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2241      	movs	r2, #65	; 0x41
 800368a:	2124      	movs	r1, #36	; 0x24
 800368c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2101      	movs	r1, #1
 800369a:	438a      	bics	r2, r1
 800369c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4934      	ldr	r1, [pc, #208]	; (8003778 <HAL_I2C_Init+0x120>)
 80036a8:	400a      	ands	r2, r1
 80036aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4931      	ldr	r1, [pc, #196]	; (800377c <HAL_I2C_Init+0x124>)
 80036b8:	400a      	ands	r2, r1
 80036ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d108      	bne.n	80036d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	0209      	lsls	r1, r1, #8
 80036d0:	430a      	orrs	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	e007      	b.n	80036e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2184      	movs	r1, #132	; 0x84
 80036e0:	0209      	lsls	r1, r1, #8
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d104      	bne.n	80036f8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	491f      	ldr	r1, [pc, #124]	; (8003780 <HAL_I2C_Init+0x128>)
 8003704:	430a      	orrs	r2, r1
 8003706:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	491a      	ldr	r1, [pc, #104]	; (800377c <HAL_I2C_Init+0x124>)
 8003714:	400a      	ands	r2, r1
 8003716:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	431a      	orrs	r2, r3
 8003722:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69d9      	ldr	r1, [r3, #28]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1a      	ldr	r2, [r3, #32]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2101      	movs	r1, #1
 800374e:	430a      	orrs	r2, r1
 8003750:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2241      	movs	r2, #65	; 0x41
 800375c:	2120      	movs	r1, #32
 800375e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2242      	movs	r2, #66	; 0x42
 800376a:	2100      	movs	r1, #0
 800376c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}
 8003778:	f0ffffff 	.word	0xf0ffffff
 800377c:	ffff7fff 	.word	0xffff7fff
 8003780:	02008000 	.word	0x02008000

08003784 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b089      	sub	sp, #36	; 0x24
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	0008      	movs	r0, r1
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	0019      	movs	r1, r3
 8003792:	230a      	movs	r3, #10
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	1c02      	adds	r2, r0, #0
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	2308      	movs	r3, #8
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	1c0a      	adds	r2, r1, #0
 80037a0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2241      	movs	r2, #65	; 0x41
 80037a6:	5c9b      	ldrb	r3, [r3, r2]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d000      	beq.n	80037b0 <HAL_I2C_Master_Transmit+0x2c>
 80037ae:	e0e7      	b.n	8003980 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2240      	movs	r2, #64	; 0x40
 80037b4:	5c9b      	ldrb	r3, [r3, r2]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_I2C_Master_Transmit+0x3a>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0e1      	b.n	8003982 <HAL_I2C_Master_Transmit+0x1fe>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037c6:	f7ff fc35 	bl	8003034 <HAL_GetTick>
 80037ca:	0003      	movs	r3, r0
 80037cc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ce:	2380      	movs	r3, #128	; 0x80
 80037d0:	0219      	lsls	r1, r3, #8
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2319      	movs	r3, #25
 80037da:	2201      	movs	r2, #1
 80037dc:	f000 fe72 	bl	80044c4 <I2C_WaitOnFlagUntilTimeout>
 80037e0:	1e03      	subs	r3, r0, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0cc      	b.n	8003982 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2241      	movs	r2, #65	; 0x41
 80037ec:	2121      	movs	r1, #33	; 0x21
 80037ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2242      	movs	r2, #66	; 0x42
 80037f4:	2110      	movs	r1, #16
 80037f6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2208      	movs	r2, #8
 8003808:	18ba      	adds	r2, r7, r2
 800380a:	8812      	ldrh	r2, [r2, #0]
 800380c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2bff      	cmp	r3, #255	; 0xff
 800381c:	d911      	bls.n	8003842 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	22ff      	movs	r2, #255	; 0xff
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	b2da      	uxtb	r2, r3
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	045c      	lsls	r4, r3, #17
 800382e:	230a      	movs	r3, #10
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	8819      	ldrh	r1, [r3, #0]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	4b55      	ldr	r3, [pc, #340]	; (800398c <HAL_I2C_Master_Transmit+0x208>)
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	0023      	movs	r3, r4
 800383c:	f001 f81a 	bl	8004874 <I2C_TransferConfig>
 8003840:	e075      	b.n	800392e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	b2da      	uxtb	r2, r3
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	049c      	lsls	r4, r3, #18
 8003856:	230a      	movs	r3, #10
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	8819      	ldrh	r1, [r3, #0]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	4b4b      	ldr	r3, [pc, #300]	; (800398c <HAL_I2C_Master_Transmit+0x208>)
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	0023      	movs	r3, r4
 8003864:	f001 f806 	bl	8004874 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003868:	e061      	b.n	800392e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 fe75 	bl	8004560 <I2C_WaitOnTXISFlagUntilTimeout>
 8003876:	1e03      	subs	r3, r0, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e081      	b.n	8003982 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d03a      	beq.n	800392e <HAL_I2C_Master_Transmit+0x1aa>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d136      	bne.n	800392e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	0013      	movs	r3, r2
 80038ca:	2200      	movs	r2, #0
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	f000 fdf9 	bl	80044c4 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	1e03      	subs	r3, r0, #0
 80038d4:	d001      	beq.n	80038da <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e053      	b.n	8003982 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2bff      	cmp	r3, #255	; 0xff
 80038e2:	d911      	bls.n	8003908 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	22ff      	movs	r2, #255	; 0xff
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	045c      	lsls	r4, r3, #17
 80038f4:	230a      	movs	r3, #10
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	8819      	ldrh	r1, [r3, #0]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	2300      	movs	r3, #0
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	0023      	movs	r3, r4
 8003902:	f000 ffb7 	bl	8004874 <I2C_TransferConfig>
 8003906:	e012      	b.n	800392e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	b2da      	uxtb	r2, r3
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	049c      	lsls	r4, r3, #18
 800391c:	230a      	movs	r3, #10
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	8819      	ldrh	r1, [r3, #0]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	2300      	movs	r3, #0
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	0023      	movs	r3, r4
 800392a:	f000 ffa3 	bl	8004874 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d198      	bne.n	800386a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	0018      	movs	r0, r3
 8003940:	f000 fe54 	bl	80045ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d001      	beq.n	800394c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e01a      	b.n	8003982 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2220      	movs	r2, #32
 8003952:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	490c      	ldr	r1, [pc, #48]	; (8003990 <HAL_I2C_Master_Transmit+0x20c>)
 8003960:	400a      	ands	r2, r1
 8003962:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2241      	movs	r2, #65	; 0x41
 8003968:	2120      	movs	r1, #32
 800396a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2242      	movs	r2, #66	; 0x42
 8003970:	2100      	movs	r1, #0
 8003972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2240      	movs	r2, #64	; 0x40
 8003978:	2100      	movs	r1, #0
 800397a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b007      	add	sp, #28
 8003988:	bd90      	pop	{r4, r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	80002000 	.word	0x80002000
 8003990:	fe00e800 	.word	0xfe00e800

08003994 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
  }
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	4013      	ands	r3, r2
 80039e8:	d00e      	beq.n	8003a08 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2280      	movs	r2, #128	; 0x80
 80039ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80039f0:	d00a      	beq.n	8003a08 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	2201      	movs	r2, #1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	0052      	lsls	r2, r2, #1
 8003a06:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d00e      	beq.n	8003a30 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a18:	d00a      	beq.n	8003a30 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	2208      	movs	r2, #8
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2280      	movs	r2, #128	; 0x80
 8003a2c:	00d2      	lsls	r2, r2, #3
 8003a2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4013      	ands	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a40:	d00a      	beq.n	8003a58 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	2202      	movs	r2, #2
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	0092      	lsls	r2, r2, #2
 8003a56:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	220b      	movs	r2, #11
 8003a62:	4013      	ands	r3, r2
 8003a64:	d005      	beq.n	8003a72 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 fbbd 	bl	80041ec <I2C_ITError>
  }
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b006      	add	sp, #24
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b002      	add	sp, #8
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b002      	add	sp, #8
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	0008      	movs	r0, r1
 8003aa4:	0011      	movs	r1, r2
 8003aa6:	1cfb      	adds	r3, r7, #3
 8003aa8:	1c02      	adds	r2, r0, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	003b      	movs	r3, r7
 8003aae:	1c0a      	adds	r2, r1, #0
 8003ab0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b002      	add	sp, #8
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b002      	add	sp, #8
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ae2:	46c0      	nop			; (mov r8, r8)
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b002      	add	sp, #8
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2240      	movs	r2, #64	; 0x40
 8003b06:	5c9b      	ldrb	r3, [r3, r2]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <I2C_Slave_ISR_IT+0x24>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e0e6      	b.n	8003cde <I2C_Slave_ISR_IT+0x1f2>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2240      	movs	r2, #64	; 0x40
 8003b14:	2101      	movs	r1, #1
 8003b16:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d009      	beq.n	8003b34 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b26:	d005      	beq.n	8003b34 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	0011      	movs	r1, r2
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 f9e4 	bl	8003efc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2210      	movs	r2, #16
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d052      	beq.n	8003be2 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2210      	movs	r2, #16
 8003b40:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b42:	d04e      	beq.n	8003be2 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d12d      	bne.n	8003baa <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2241      	movs	r2, #65	; 0x41
 8003b52:	5c9b      	ldrb	r3, [r3, r2]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b28      	cmp	r3, #40	; 0x28
 8003b58:	d10b      	bne.n	8003b72 <I2C_Slave_ISR_IT+0x86>
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	049b      	lsls	r3, r3, #18
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d106      	bne.n	8003b72 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	0011      	movs	r1, r2
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 fae6 	bl	800413c <I2C_ITListenCplt>
 8003b70:	e036      	b.n	8003be0 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2241      	movs	r2, #65	; 0x41
 8003b76:	5c9b      	ldrb	r3, [r3, r2]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b29      	cmp	r3, #41	; 0x29
 8003b7c:	d110      	bne.n	8003ba0 <I2C_Slave_ISR_IT+0xb4>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	4a59      	ldr	r2, [pc, #356]	; (8003ce8 <I2C_Slave_ISR_IT+0x1fc>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00c      	beq.n	8003ba0 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 fc56 	bl	8004442 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 f94b 	bl	8003e34 <I2C_ITSlaveSeqCplt>
 8003b9e:	e01f      	b.n	8003be0 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2210      	movs	r2, #16
 8003ba6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003ba8:	e091      	b.n	8003cce <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2210      	movs	r2, #16
 8003bb0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <I2C_Slave_ISR_IT+0xe4>
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	045b      	lsls	r3, r3, #17
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d000      	beq.n	8003bd0 <I2C_Slave_ISR_IT+0xe4>
 8003bce:	e07e      	b.n	8003cce <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	0011      	movs	r1, r2
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 fb07 	bl	80041ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003bde:	e076      	b.n	8003cce <I2C_Slave_ISR_IT+0x1e2>
 8003be0:	e075      	b.n	8003cce <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2204      	movs	r2, #4
 8003be6:	4013      	ands	r3, r2
 8003be8:	d02f      	beq.n	8003c4a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2204      	movs	r2, #4
 8003bee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003bf0:	d02b      	beq.n	8003c4a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d018      	beq.n	8003c2e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d14c      	bne.n	8003cd2 <I2C_Slave_ISR_IT+0x1e6>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ce8 <I2C_Slave_ISR_IT+0x1fc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d048      	beq.n	8003cd2 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 f8f6 	bl	8003e34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003c48:	e043      	b.n	8003cd2 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d00a      	beq.n	8003c68 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2208      	movs	r2, #8
 8003c56:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c58:	d006      	beq.n	8003c68 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	0011      	movs	r1, r2
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 f843 	bl	8003cec <I2C_ITAddrCplt>
 8003c66:	e035      	b.n	8003cd4 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d031      	beq.n	8003cd4 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c76:	d02d      	beq.n	8003cd4 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d018      	beq.n	8003cb4 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	; 0x28
 8003cb2:	e00f      	b.n	8003cd4 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	045b      	lsls	r3, r3, #17
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d002      	beq.n	8003cc4 <I2C_Slave_ISR_IT+0x1d8>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d107      	bne.n	8003cd4 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 f8b4 	bl	8003e34 <I2C_ITSlaveSeqCplt>
 8003ccc:	e002      	b.n	8003cd4 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	e000      	b.n	8003cd4 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8003cd2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2240      	movs	r2, #64	; 0x40
 8003cd8:	2100      	movs	r1, #0
 8003cda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b006      	add	sp, #24
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	ffff0000 	.word	0xffff0000

08003cec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003cec:	b5b0      	push	{r4, r5, r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2241      	movs	r2, #65	; 0x41
 8003cfa:	5c9b      	ldrb	r3, [r3, r2]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	001a      	movs	r2, r3
 8003d00:	2328      	movs	r3, #40	; 0x28
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b28      	cmp	r3, #40	; 0x28
 8003d06:	d000      	beq.n	8003d0a <I2C_ITAddrCplt+0x1e>
 8003d08:	e088      	b.n	8003e1c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	250f      	movs	r5, #15
 8003d16:	197b      	adds	r3, r7, r5
 8003d18:	2101      	movs	r1, #1
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	200c      	movs	r0, #12
 8003d2a:	183b      	adds	r3, r7, r0
 8003d2c:	21fe      	movs	r1, #254	; 0xfe
 8003d2e:	400a      	ands	r2, r1
 8003d30:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	240a      	movs	r4, #10
 8003d3c:	193b      	adds	r3, r7, r4
 8003d3e:	0592      	lsls	r2, r2, #22
 8003d40:	0d92      	lsrs	r2, r2, #22
 8003d42:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	21fe      	movs	r1, #254	; 0xfe
 8003d52:	400a      	ands	r2, r1
 8003d54:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d148      	bne.n	8003df0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003d5e:	0021      	movs	r1, r4
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	09db      	lsrs	r3, r3, #7
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	183b      	adds	r3, r7, r0
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	4053      	eors	r3, r2
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	001a      	movs	r2, r3
 8003d72:	2306      	movs	r3, #6
 8003d74:	4013      	ands	r3, r2
 8003d76:	d120      	bne.n	8003dba <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003d78:	183b      	adds	r3, r7, r0
 8003d7a:	187a      	adds	r2, r7, r1
 8003d7c:	8812      	ldrh	r2, [r2, #0]
 8003d7e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d14c      	bne.n	8003e2c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2240      	movs	r2, #64	; 0x40
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003da8:	183b      	adds	r3, r7, r0
 8003daa:	881a      	ldrh	r2, [r3, #0]
 8003dac:	197b      	adds	r3, r7, r5
 8003dae:	7819      	ldrb	r1, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7ff fe71 	bl	8003a9a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003db8:	e038      	b.n	8003e2c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003dba:	240c      	movs	r4, #12
 8003dbc:	193b      	adds	r3, r7, r4
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	18ba      	adds	r2, r7, r2
 8003dc2:	8812      	ldrh	r2, [r2, #0]
 8003dc4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	021a      	lsls	r2, r3, #8
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0011      	movs	r1, r2
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f000 fd8a 	bl	80048e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2240      	movs	r2, #64	; 0x40
 8003dd8:	2100      	movs	r1, #0
 8003dda:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ddc:	193b      	adds	r3, r7, r4
 8003dde:	881a      	ldrh	r2, [r3, #0]
 8003de0:	230f      	movs	r3, #15
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	7819      	ldrb	r1, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f7ff fe56 	bl	8003a9a <HAL_I2C_AddrCallback>
}
 8003dee:	e01d      	b.n	8003e2c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003df0:	2380      	movs	r3, #128	; 0x80
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0011      	movs	r1, r2
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f000 fd75 	bl	80048e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2240      	movs	r2, #64	; 0x40
 8003e02:	2100      	movs	r1, #0
 8003e04:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e06:	230c      	movs	r3, #12
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	7819      	ldrb	r1, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7ff fe40 	bl	8003a9a <HAL_I2C_AddrCallback>
}
 8003e1a:	e007      	b.n	8003e2c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2208      	movs	r2, #8
 8003e22:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2240      	movs	r2, #64	; 0x40
 8003e28:	2100      	movs	r1, #0
 8003e2a:	5499      	strb	r1, [r3, r2]
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b004      	add	sp, #16
 8003e32:	bdb0      	pop	{r4, r5, r7, pc}

08003e34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2242      	movs	r2, #66	; 0x42
 8003e48:	2100      	movs	r1, #0
 8003e4a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	01db      	lsls	r3, r3, #7
 8003e52:	4013      	ands	r3, r2
 8003e54:	d008      	beq.n	8003e68 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4924      	ldr	r1, [pc, #144]	; (8003ef4 <I2C_ITSlaveSeqCplt+0xc0>)
 8003e62:	400a      	ands	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e00c      	b.n	8003e82 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d007      	beq.n	8003e82 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	491e      	ldr	r1, [pc, #120]	; (8003ef8 <I2C_ITSlaveSeqCplt+0xc4>)
 8003e7e:	400a      	ands	r2, r1
 8003e80:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2241      	movs	r2, #65	; 0x41
 8003e86:	5c9b      	ldrb	r3, [r3, r2]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b29      	cmp	r3, #41	; 0x29
 8003e8c:	d114      	bne.n	8003eb8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2241      	movs	r2, #65	; 0x41
 8003e92:	2128      	movs	r1, #40	; 0x28
 8003e94:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2221      	movs	r2, #33	; 0x21
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 fd21 	bl	80048e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2240      	movs	r2, #64	; 0x40
 8003eaa:	2100      	movs	r1, #0
 8003eac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff fde2 	bl	8003a7a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003eb6:	e019      	b.n	8003eec <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2241      	movs	r2, #65	; 0x41
 8003ebc:	5c9b      	ldrb	r3, [r3, r2]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ec2:	d113      	bne.n	8003eec <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2241      	movs	r2, #65	; 0x41
 8003ec8:	2128      	movs	r1, #40	; 0x28
 8003eca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2222      	movs	r2, #34	; 0x22
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 fd06 	bl	80048e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2240      	movs	r2, #64	; 0x40
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff fdcf 	bl	8003a8a <HAL_I2C_SlaveRxCpltCallback>
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b004      	add	sp, #16
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	ffffbfff 	.word	0xffffbfff
 8003ef8:	ffff7fff 	.word	0xffff7fff

08003efc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f12:	200f      	movs	r0, #15
 8003f14:	183b      	adds	r3, r7, r0
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	2141      	movs	r1, #65	; 0x41
 8003f1a:	5c52      	ldrb	r2, [r2, r1]
 8003f1c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2220      	movs	r2, #32
 8003f24:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f26:	183b      	adds	r3, r7, r0
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b21      	cmp	r3, #33	; 0x21
 8003f2c:	d003      	beq.n	8003f36 <I2C_ITSlaveCplt+0x3a>
 8003f2e:	183b      	adds	r3, r7, r0
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b29      	cmp	r3, #41	; 0x29
 8003f34:	d109      	bne.n	8003f4a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f36:	4a7b      	ldr	r2, [pc, #492]	; (8004124 <I2C_ITSlaveCplt+0x228>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	0011      	movs	r1, r2
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 fcd3 	bl	80048e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
 8003f48:	e011      	b.n	8003f6e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f4a:	220f      	movs	r2, #15
 8003f4c:	18bb      	adds	r3, r7, r2
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b22      	cmp	r3, #34	; 0x22
 8003f52:	d003      	beq.n	8003f5c <I2C_ITSlaveCplt+0x60>
 8003f54:	18bb      	adds	r3, r7, r2
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b2a      	cmp	r3, #42	; 0x2a
 8003f5a:	d108      	bne.n	8003f6e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f5c:	4a72      	ldr	r2, [pc, #456]	; (8004128 <I2C_ITSlaveCplt+0x22c>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0011      	movs	r1, r2
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 fcc0 	bl	80048e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2222      	movs	r2, #34	; 0x22
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2180      	movs	r1, #128	; 0x80
 8003f7a:	0209      	lsls	r1, r1, #8
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4968      	ldr	r1, [pc, #416]	; (800412c <I2C_ITSlaveCplt+0x230>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fa55 	bl	8004442 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	01db      	lsls	r3, r3, #7
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d013      	beq.n	8003fca <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4960      	ldr	r1, [pc, #384]	; (8004130 <I2C_ITSlaveCplt+0x234>)
 8003fae:	400a      	ands	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01f      	beq.n	8003ffa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fc8:	e017      	b.n	8003ffa <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d012      	beq.n	8003ffa <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4955      	ldr	r1, [pc, #340]	; (8004134 <I2C_ITSlaveCplt+0x238>)
 8003fe0:	400a      	ands	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d006      	beq.n	8003ffa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	4013      	ands	r3, r2
 8004000:	d020      	beq.n	8004044 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2204      	movs	r2, #4
 8004006:	4393      	bics	r3, r2
 8004008:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	2204      	movs	r2, #4
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2242      	movs	r2, #66	; 0x42
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	0011      	movs	r1, r2
 8004078:	0018      	movs	r0, r3
 800407a:	f000 f8b7 	bl	80041ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2241      	movs	r2, #65	; 0x41
 8004082:	5c9b      	ldrb	r3, [r3, r2]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b28      	cmp	r3, #40	; 0x28
 8004088:	d147      	bne.n	800411a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0011      	movs	r1, r2
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f853 	bl	800413c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004096:	e040      	b.n	800411a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4a26      	ldr	r2, [pc, #152]	; (8004138 <I2C_ITSlaveCplt+0x23c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d016      	beq.n	80040d0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7ff fec5 	bl	8003e34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a22      	ldr	r2, [pc, #136]	; (8004138 <I2C_ITSlaveCplt+0x23c>)
 80040ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2241      	movs	r2, #65	; 0x41
 80040b4:	2120      	movs	r1, #32
 80040b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2240      	movs	r2, #64	; 0x40
 80040c2:	2100      	movs	r1, #0
 80040c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff fcf6 	bl	8003aba <HAL_I2C_ListenCpltCallback>
}
 80040ce:	e024      	b.n	800411a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2241      	movs	r2, #65	; 0x41
 80040d4:	5c9b      	ldrb	r3, [r3, r2]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b22      	cmp	r3, #34	; 0x22
 80040da:	d10f      	bne.n	80040fc <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2241      	movs	r2, #65	; 0x41
 80040e0:	2120      	movs	r1, #32
 80040e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2240      	movs	r2, #64	; 0x40
 80040ee:	2100      	movs	r1, #0
 80040f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7ff fcc8 	bl	8003a8a <HAL_I2C_SlaveRxCpltCallback>
}
 80040fa:	e00e      	b.n	800411a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2241      	movs	r2, #65	; 0x41
 8004100:	2120      	movs	r1, #32
 8004102:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	2100      	movs	r1, #0
 8004110:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	0018      	movs	r0, r3
 8004116:	f7ff fcb0 	bl	8003a7a <HAL_I2C_SlaveTxCpltCallback>
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b006      	add	sp, #24
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	00008001 	.word	0x00008001
 8004128:	00008002 	.word	0x00008002
 800412c:	fe00e800 	.word	0xfe00e800
 8004130:	ffffbfff 	.word	0xffffbfff
 8004134:	ffff7fff 	.word	0xffff7fff
 8004138:	ffff0000 	.word	0xffff0000

0800413c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <I2C_ITListenCplt+0xa8>)
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2241      	movs	r2, #65	; 0x41
 8004156:	2120      	movs	r1, #32
 8004158:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2242      	movs	r2, #66	; 0x42
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2204      	movs	r2, #4
 800416c:	4013      	ands	r3, r2
 800416e:	d022      	beq.n	80041b6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	2b00      	cmp	r3, #0
 800418e:	d012      	beq.n	80041b6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	2204      	movs	r2, #4
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <I2C_ITListenCplt+0xac>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0011      	movs	r1, r2
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 fb93 	bl	80048e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2210      	movs	r2, #16
 80041c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2240      	movs	r2, #64	; 0x40
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7ff fc70 	bl	8003aba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	ffff0000 	.word	0xffff0000
 80041e8:	00008003 	.word	0x00008003

080041ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80041f6:	200f      	movs	r0, #15
 80041f8:	183b      	adds	r3, r7, r0
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	2141      	movs	r1, #65	; 0x41
 80041fe:	5c52      	ldrb	r2, [r2, r1]
 8004200:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2242      	movs	r2, #66	; 0x42
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a72      	ldr	r2, [pc, #456]	; (80043d8 <I2C_ITError+0x1ec>)
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004222:	183b      	adds	r3, r7, r0
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b28      	cmp	r3, #40	; 0x28
 8004228:	d007      	beq.n	800423a <I2C_ITError+0x4e>
 800422a:	183b      	adds	r3, r7, r0
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b29      	cmp	r3, #41	; 0x29
 8004230:	d003      	beq.n	800423a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004232:	183b      	adds	r3, r7, r0
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b2a      	cmp	r3, #42	; 0x2a
 8004238:	d10c      	bne.n	8004254 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2103      	movs	r1, #3
 800423e:	0018      	movs	r0, r3
 8004240:	f000 fb52 	bl	80048e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2241      	movs	r2, #65	; 0x41
 8004248:	2128      	movs	r1, #40	; 0x28
 800424a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a63      	ldr	r2, [pc, #396]	; (80043dc <I2C_ITError+0x1f0>)
 8004250:	635a      	str	r2, [r3, #52]	; 0x34
 8004252:	e032      	b.n	80042ba <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004254:	4a62      	ldr	r2, [pc, #392]	; (80043e0 <I2C_ITError+0x1f4>)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0011      	movs	r1, r2
 800425a:	0018      	movs	r0, r3
 800425c:	f000 fb44 	bl	80048e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	0018      	movs	r0, r3
 8004264:	f000 f8ed 	bl	8004442 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2241      	movs	r2, #65	; 0x41
 800426c:	5c9b      	ldrb	r3, [r3, r2]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b60      	cmp	r3, #96	; 0x60
 8004272:	d01f      	beq.n	80042b4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2241      	movs	r2, #65	; 0x41
 8004278:	2120      	movs	r1, #32
 800427a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2220      	movs	r2, #32
 8004284:	4013      	ands	r3, r2
 8004286:	2b20      	cmp	r3, #32
 8004288:	d114      	bne.n	80042b4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2210      	movs	r2, #16
 8004292:	4013      	ands	r3, r2
 8004294:	2b10      	cmp	r3, #16
 8004296:	d109      	bne.n	80042ac <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2210      	movs	r2, #16
 800429e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	2204      	movs	r2, #4
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2220      	movs	r2, #32
 80042b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d03b      	beq.n	8004340 <I2C_ITError+0x154>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b11      	cmp	r3, #17
 80042cc:	d002      	beq.n	80042d4 <I2C_ITError+0xe8>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b21      	cmp	r3, #33	; 0x21
 80042d2:	d135      	bne.n	8004340 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	01db      	lsls	r3, r3, #7
 80042de:	401a      	ands	r2, r3
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	01db      	lsls	r3, r3, #7
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d107      	bne.n	80042f8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	493c      	ldr	r1, [pc, #240]	; (80043e4 <I2C_ITError+0x1f8>)
 80042f4:	400a      	ands	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7fe ffea 	bl	80032d6 <HAL_DMA_GetState>
 8004302:	0003      	movs	r3, r0
 8004304:	2b01      	cmp	r3, #1
 8004306:	d016      	beq.n	8004336 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	4a36      	ldr	r2, [pc, #216]	; (80043e8 <I2C_ITError+0x1fc>)
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2240      	movs	r2, #64	; 0x40
 8004314:	2100      	movs	r1, #0
 8004316:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	0018      	movs	r0, r3
 800431e:	f7fe ff95 	bl	800324c <HAL_DMA_Abort_IT>
 8004322:	1e03      	subs	r3, r0, #0
 8004324:	d051      	beq.n	80043ca <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	0018      	movs	r0, r3
 8004332:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004334:	e049      	b.n	80043ca <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0018      	movs	r0, r3
 800433a:	f000 f859 	bl	80043f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800433e:	e044      	b.n	80043ca <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d03b      	beq.n	80043c0 <I2C_ITError+0x1d4>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b12      	cmp	r3, #18
 800434c:	d002      	beq.n	8004354 <I2C_ITError+0x168>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b22      	cmp	r3, #34	; 0x22
 8004352:	d135      	bne.n	80043c0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	401a      	ands	r2, r3
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	429a      	cmp	r2, r3
 8004366:	d107      	bne.n	8004378 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	491e      	ldr	r1, [pc, #120]	; (80043ec <I2C_ITError+0x200>)
 8004374:	400a      	ands	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	0018      	movs	r0, r3
 800437e:	f7fe ffaa 	bl	80032d6 <HAL_DMA_GetState>
 8004382:	0003      	movs	r3, r0
 8004384:	2b01      	cmp	r3, #1
 8004386:	d016      	beq.n	80043b6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <I2C_ITError+0x1fc>)
 800438e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	2100      	movs	r1, #0
 8004396:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	0018      	movs	r0, r3
 800439e:	f7fe ff55 	bl	800324c <HAL_DMA_Abort_IT>
 80043a2:	1e03      	subs	r3, r0, #0
 80043a4:	d013      	beq.n	80043ce <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b0:	0018      	movs	r0, r3
 80043b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043b4:	e00b      	b.n	80043ce <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 f819 	bl	80043f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043be:	e006      	b.n	80043ce <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	0018      	movs	r0, r3
 80043c4:	f000 f814 	bl	80043f0 <I2C_TreatErrorCallback>
  }
}
 80043c8:	e002      	b.n	80043d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	e000      	b.n	80043d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043ce:	46c0      	nop			; (mov r8, r8)
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b004      	add	sp, #16
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	ffff0000 	.word	0xffff0000
 80043dc:	08003aed 	.word	0x08003aed
 80043e0:	00008003 	.word	0x00008003
 80043e4:	ffffbfff 	.word	0xffffbfff
 80043e8:	08004487 	.word	0x08004487
 80043ec:	ffff7fff 	.word	0xffff7fff

080043f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2241      	movs	r2, #65	; 0x41
 80043fc:	5c9b      	ldrb	r3, [r3, r2]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b60      	cmp	r3, #96	; 0x60
 8004402:	d10f      	bne.n	8004424 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2241      	movs	r2, #65	; 0x41
 8004408:	2120      	movs	r1, #32
 800440a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2240      	movs	r2, #64	; 0x40
 8004416:	2100      	movs	r1, #0
 8004418:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0018      	movs	r0, r3
 800441e:	f7ff fb5c 	bl	8003ada <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004422:	e00a      	b.n	800443a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2240      	movs	r2, #64	; 0x40
 800442e:	2100      	movs	r1, #0
 8004430:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	0018      	movs	r0, r3
 8004436:	f7ff fb48 	bl	8003aca <HAL_I2C_ErrorCallback>
}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	46bd      	mov	sp, r7
 800443e:	b002      	add	sp, #8
 8004440:	bd80      	pop	{r7, pc}

08004442 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2202      	movs	r2, #2
 8004452:	4013      	ands	r3, r2
 8004454:	2b02      	cmp	r3, #2
 8004456:	d103      	bne.n	8004460 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2200      	movs	r2, #0
 800445e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2201      	movs	r2, #1
 8004468:	4013      	ands	r3, r2
 800446a:	2b01      	cmp	r3, #1
 800446c:	d007      	beq.n	800447e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2101      	movs	r1, #1
 800447a:	430a      	orrs	r2, r1
 800447c:	619a      	str	r2, [r3, #24]
  }
}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}

08004486 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	2200      	movs	r2, #0
 80044a2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	2200      	movs	r2, #0
 80044b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f7ff ff9a 	bl	80043f0 <I2C_TreatErrorCallback>
}
 80044bc:	46c0      	nop			; (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b004      	add	sp, #16
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	1dfb      	adds	r3, r7, #7
 80044d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d4:	e030      	b.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	d02d      	beq.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044dc:	f7fe fdaa 	bl	8003034 <HAL_GetTick>
 80044e0:	0002      	movs	r2, r0
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d122      	bne.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	4013      	ands	r3, r2
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	425a      	negs	r2, r3
 8004502:	4153      	adcs	r3, r2
 8004504:	b2db      	uxtb	r3, r3
 8004506:	001a      	movs	r2, r3
 8004508:	1dfb      	adds	r3, r7, #7
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d113      	bne.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004514:	2220      	movs	r2, #32
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2241      	movs	r2, #65	; 0x41
 8004520:	2120      	movs	r1, #32
 8004522:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2242      	movs	r2, #66	; 0x42
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2240      	movs	r2, #64	; 0x40
 8004530:	2100      	movs	r1, #0
 8004532:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e00f      	b.n	8004558 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4013      	ands	r3, r2
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	425a      	negs	r2, r3
 8004548:	4153      	adcs	r3, r2
 800454a:	b2db      	uxtb	r3, r3
 800454c:	001a      	movs	r2, r3
 800454e:	1dfb      	adds	r3, r7, #7
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d0bf      	beq.n	80044d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	b004      	add	sp, #16
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800456c:	e032      	b.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 f87d 	bl	8004674 <I2C_IsErrorOccurred>
 800457a:	1e03      	subs	r3, r0, #0
 800457c:	d001      	beq.n	8004582 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e030      	b.n	80045e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3301      	adds	r3, #1
 8004586:	d025      	beq.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004588:	f7fe fd54 	bl	8003034 <HAL_GetTick>
 800458c:	0002      	movs	r2, r0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d11a      	bne.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2202      	movs	r2, #2
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d013      	beq.n	80045d4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	2220      	movs	r2, #32
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2241      	movs	r2, #65	; 0x41
 80045bc:	2120      	movs	r1, #32
 80045be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2242      	movs	r2, #66	; 0x42
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e007      	b.n	80045e4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2202      	movs	r2, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d1c5      	bne.n	800456e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	0018      	movs	r0, r3
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b004      	add	sp, #16
 80045ea:	bd80      	pop	{r7, pc}

080045ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f8:	e02f      	b.n	800465a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	0018      	movs	r0, r3
 8004602:	f000 f837 	bl	8004674 <I2C_IsErrorOccurred>
 8004606:	1e03      	subs	r3, r0, #0
 8004608:	d001      	beq.n	800460e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e02d      	b.n	800466a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460e:	f7fe fd11 	bl	8003034 <HAL_GetTick>
 8004612:	0002      	movs	r2, r0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	d302      	bcc.n	8004624 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d11a      	bne.n	800465a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2220      	movs	r2, #32
 800462c:	4013      	ands	r3, r2
 800462e:	2b20      	cmp	r3, #32
 8004630:	d013      	beq.n	800465a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	2220      	movs	r2, #32
 8004638:	431a      	orrs	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2241      	movs	r2, #65	; 0x41
 8004642:	2120      	movs	r1, #32
 8004644:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2242      	movs	r2, #66	; 0x42
 800464a:	2100      	movs	r1, #0
 800464c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2240      	movs	r2, #64	; 0x40
 8004652:	2100      	movs	r1, #0
 8004654:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e007      	b.n	800466a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	2220      	movs	r2, #32
 8004662:	4013      	ands	r3, r2
 8004664:	2b20      	cmp	r3, #32
 8004666:	d1c8      	bne.n	80045fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	0018      	movs	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	b004      	add	sp, #16
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b08b      	sub	sp, #44	; 0x2c
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2327      	movs	r3, #39	; 0x27
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2210      	movs	r2, #16
 800469c:	4013      	ands	r3, r2
 800469e:	d100      	bne.n	80046a2 <I2C_IsErrorOccurred+0x2e>
 80046a0:	e082      	b.n	80047a8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2210      	movs	r2, #16
 80046a8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046aa:	e060      	b.n	800476e <I2C_IsErrorOccurred+0xfa>
 80046ac:	2427      	movs	r4, #39	; 0x27
 80046ae:	193b      	adds	r3, r7, r4
 80046b0:	193a      	adds	r2, r7, r4
 80046b2:	7812      	ldrb	r2, [r2, #0]
 80046b4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3301      	adds	r3, #1
 80046ba:	d058      	beq.n	800476e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046bc:	f7fe fcba 	bl	8003034 <HAL_GetTick>
 80046c0:	0002      	movs	r2, r0
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d306      	bcc.n	80046da <I2C_IsErrorOccurred+0x66>
 80046cc:	193b      	adds	r3, r7, r4
 80046ce:	193a      	adds	r2, r7, r4
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d149      	bne.n	800476e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	2380      	movs	r3, #128	; 0x80
 80046e2:	01db      	lsls	r3, r3, #7
 80046e4:	4013      	ands	r3, r2
 80046e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046e8:	2013      	movs	r0, #19
 80046ea:	183b      	adds	r3, r7, r0
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	2142      	movs	r1, #66	; 0x42
 80046f0:	5c52      	ldrb	r2, [r2, r1]
 80046f2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	401a      	ands	r2, r3
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	429a      	cmp	r2, r3
 8004706:	d126      	bne.n	8004756 <I2C_IsErrorOccurred+0xe2>
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	01db      	lsls	r3, r3, #7
 800470e:	429a      	cmp	r2, r3
 8004710:	d021      	beq.n	8004756 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004712:	183b      	adds	r3, r7, r0
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b20      	cmp	r3, #32
 8004718:	d01d      	beq.n	8004756 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	01c9      	lsls	r1, r1, #7
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800472c:	f7fe fc82 	bl	8003034 <HAL_GetTick>
 8004730:	0003      	movs	r3, r0
 8004732:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004734:	e00f      	b.n	8004756 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004736:	f7fe fc7d 	bl	8003034 <HAL_GetTick>
 800473a:	0002      	movs	r2, r0
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b19      	cmp	r3, #25
 8004742:	d908      	bls.n	8004756 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2220      	movs	r2, #32
 8004748:	4313      	orrs	r3, r2
 800474a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800474c:	2327      	movs	r3, #39	; 0x27
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]

              break;
 8004754:	e00b      	b.n	800476e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2220      	movs	r2, #32
 800475e:	4013      	ands	r3, r2
 8004760:	2127      	movs	r1, #39	; 0x27
 8004762:	187a      	adds	r2, r7, r1
 8004764:	1879      	adds	r1, r7, r1
 8004766:	7809      	ldrb	r1, [r1, #0]
 8004768:	7011      	strb	r1, [r2, #0]
 800476a:	2b20      	cmp	r3, #32
 800476c:	d1e3      	bne.n	8004736 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2220      	movs	r2, #32
 8004776:	4013      	ands	r3, r2
 8004778:	2b20      	cmp	r3, #32
 800477a:	d004      	beq.n	8004786 <I2C_IsErrorOccurred+0x112>
 800477c:	2327      	movs	r3, #39	; 0x27
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d092      	beq.n	80046ac <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004786:	2327      	movs	r3, #39	; 0x27
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2220      	movs	r2, #32
 8004796:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	2204      	movs	r2, #4
 800479c:	4313      	orrs	r3, r2
 800479e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047a0:	2327      	movs	r3, #39	; 0x27
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4013      	ands	r3, r2
 80047b8:	d00c      	beq.n	80047d4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	2201      	movs	r2, #1
 80047be:	4313      	orrs	r3, r2
 80047c0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	0052      	lsls	r2, r2, #1
 80047ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047cc:	2327      	movs	r3, #39	; 0x27
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4013      	ands	r3, r2
 80047dc:	d00c      	beq.n	80047f8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2208      	movs	r2, #8
 80047e2:	4313      	orrs	r3, r2
 80047e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	00d2      	lsls	r2, r2, #3
 80047ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047f0:	2327      	movs	r3, #39	; 0x27
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4013      	ands	r3, r2
 8004800:	d00c      	beq.n	800481c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2202      	movs	r2, #2
 8004806:	4313      	orrs	r3, r2
 8004808:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2280      	movs	r2, #128	; 0x80
 8004810:	0092      	lsls	r2, r2, #2
 8004812:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004814:	2327      	movs	r3, #39	; 0x27
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800481c:	2327      	movs	r3, #39	; 0x27
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01d      	beq.n	8004862 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	0018      	movs	r0, r3
 800482a:	f7ff fe0a 	bl	8004442 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	490d      	ldr	r1, [pc, #52]	; (8004870 <I2C_IsErrorOccurred+0x1fc>)
 800483a:	400a      	ands	r2, r1
 800483c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	431a      	orrs	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2241      	movs	r2, #65	; 0x41
 800484e:	2120      	movs	r1, #32
 8004850:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2242      	movs	r2, #66	; 0x42
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2240      	movs	r2, #64	; 0x40
 800485e:	2100      	movs	r1, #0
 8004860:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004862:	2327      	movs	r3, #39	; 0x27
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	781b      	ldrb	r3, [r3, #0]
}
 8004868:	0018      	movs	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	b00b      	add	sp, #44	; 0x2c
 800486e:	bd90      	pop	{r4, r7, pc}
 8004870:	fe00e800 	.word	0xfe00e800

08004874 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	0008      	movs	r0, r1
 800487e:	0011      	movs	r1, r2
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	240a      	movs	r4, #10
 8004884:	193b      	adds	r3, r7, r4
 8004886:	1c02      	adds	r2, r0, #0
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	2009      	movs	r0, #9
 800488c:	183b      	adds	r3, r7, r0
 800488e:	1c0a      	adds	r2, r1, #0
 8004890:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004892:	193b      	adds	r3, r7, r4
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	059b      	lsls	r3, r3, #22
 8004898:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800489a:	183b      	adds	r3, r7, r0
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	0419      	lsls	r1, r3, #16
 80048a0:	23ff      	movs	r3, #255	; 0xff
 80048a2:	041b      	lsls	r3, r3, #16
 80048a4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048a6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	4313      	orrs	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	085b      	lsrs	r3, r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048be:	0d51      	lsrs	r1, r2, #21
 80048c0:	2280      	movs	r2, #128	; 0x80
 80048c2:	00d2      	lsls	r2, r2, #3
 80048c4:	400a      	ands	r2, r1
 80048c6:	4907      	ldr	r1, [pc, #28]	; (80048e4 <I2C_TransferConfig+0x70>)
 80048c8:	430a      	orrs	r2, r1
 80048ca:	43d2      	mvns	r2, r2
 80048cc:	401a      	ands	r2, r3
 80048ce:	0011      	movs	r1, r2
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	46bd      	mov	sp, r7
 80048de:	b007      	add	sp, #28
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	03ff63ff 	.word	0x03ff63ff

080048e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	000a      	movs	r2, r1
 80048f2:	1cbb      	adds	r3, r7, #2
 80048f4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80048fa:	1cbb      	adds	r3, r7, #2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	2201      	movs	r2, #1
 8004900:	4013      	ands	r3, r2
 8004902:	d010      	beq.n	8004926 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2242      	movs	r2, #66	; 0x42
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2241      	movs	r2, #65	; 0x41
 8004910:	5c9b      	ldrb	r3, [r3, r2]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	001a      	movs	r2, r3
 8004916:	2328      	movs	r3, #40	; 0x28
 8004918:	4013      	ands	r3, r2
 800491a:	2b28      	cmp	r3, #40	; 0x28
 800491c:	d003      	beq.n	8004926 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	22b0      	movs	r2, #176	; 0xb0
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004926:	1cbb      	adds	r3, r7, #2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	2202      	movs	r2, #2
 800492c:	4013      	ands	r3, r2
 800492e:	d010      	beq.n	8004952 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2244      	movs	r2, #68	; 0x44
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2241      	movs	r2, #65	; 0x41
 800493c:	5c9b      	ldrb	r3, [r3, r2]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	001a      	movs	r2, r3
 8004942:	2328      	movs	r3, #40	; 0x28
 8004944:	4013      	ands	r3, r2
 8004946:	2b28      	cmp	r3, #40	; 0x28
 8004948:	d003      	beq.n	8004952 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	22b0      	movs	r2, #176	; 0xb0
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004952:	1cbb      	adds	r3, r7, #2
 8004954:	2200      	movs	r2, #0
 8004956:	5e9b      	ldrsh	r3, [r3, r2]
 8004958:	2b00      	cmp	r3, #0
 800495a:	da03      	bge.n	8004964 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	22b8      	movs	r2, #184	; 0xb8
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004964:	1cbb      	adds	r3, r7, #2
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	2b10      	cmp	r3, #16
 800496a:	d103      	bne.n	8004974 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2290      	movs	r2, #144	; 0x90
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004974:	1cbb      	adds	r3, r7, #2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	2b20      	cmp	r3, #32
 800497a:	d103      	bne.n	8004984 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004984:	1cbb      	adds	r3, r7, #2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d103      	bne.n	8004994 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	43d9      	mvns	r1, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	400a      	ands	r2, r1
 80049a4:	601a      	str	r2, [r3, #0]
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b004      	add	sp, #16
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2241      	movs	r2, #65	; 0x41
 80049be:	5c9b      	ldrb	r3, [r3, r2]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d138      	bne.n	8004a38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2240      	movs	r2, #64	; 0x40
 80049ca:	5c9b      	ldrb	r3, [r3, r2]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e032      	b.n	8004a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2240      	movs	r2, #64	; 0x40
 80049d8:	2101      	movs	r1, #1
 80049da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2241      	movs	r2, #65	; 0x41
 80049e0:	2124      	movs	r1, #36	; 0x24
 80049e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2101      	movs	r1, #1
 80049f0:	438a      	bics	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4911      	ldr	r1, [pc, #68]	; (8004a44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004a00:	400a      	ands	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6819      	ldr	r1, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2101      	movs	r1, #1
 8004a20:	430a      	orrs	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2241      	movs	r2, #65	; 0x41
 8004a28:	2120      	movs	r1, #32
 8004a2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2240      	movs	r2, #64	; 0x40
 8004a30:	2100      	movs	r1, #0
 8004a32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	e000      	b.n	8004a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
  }
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	ffffefff 	.word	0xffffefff

08004a48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2241      	movs	r2, #65	; 0x41
 8004a56:	5c9b      	ldrb	r3, [r3, r2]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d139      	bne.n	8004ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2240      	movs	r2, #64	; 0x40
 8004a62:	5c9b      	ldrb	r3, [r3, r2]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e033      	b.n	8004ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2240      	movs	r2, #64	; 0x40
 8004a70:	2101      	movs	r1, #1
 8004a72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2241      	movs	r2, #65	; 0x41
 8004a78:	2124      	movs	r1, #36	; 0x24
 8004a7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2101      	movs	r1, #1
 8004a88:	438a      	bics	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4a11      	ldr	r2, [pc, #68]	; (8004adc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2101      	movs	r1, #1
 8004aba:	430a      	orrs	r2, r1
 8004abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2241      	movs	r2, #65	; 0x41
 8004ac2:	2120      	movs	r1, #32
 8004ac4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2240      	movs	r2, #64	; 0x40
 8004aca:	2100      	movs	r1, #0
 8004acc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e000      	b.n	8004ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
  }
}
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b004      	add	sp, #16
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	fffff0ff 	.word	0xfffff0ff

08004ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae2:	b08b      	sub	sp, #44	; 0x2c
 8004ae4:	af06      	add	r7, sp, #24
 8004ae6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e0f0      	b.n	8004cd4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a79      	ldr	r2, [pc, #484]	; (8004cdc <HAL_PCD_Init+0x1fc>)
 8004af6:	5c9b      	ldrb	r3, [r3, r2]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d108      	bne.n	8004b10 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	23aa      	movs	r3, #170	; 0xaa
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	2100      	movs	r1, #0
 8004b06:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f006 fcd8 	bl	800b4c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a72      	ldr	r2, [pc, #456]	; (8004cdc <HAL_PCD_Init+0x1fc>)
 8004b14:	2103      	movs	r1, #3
 8004b16:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f002 fda7 	bl	8007670 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b22:	230f      	movs	r3, #15
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	e049      	b.n	8004bc0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b2c:	200f      	movs	r0, #15
 8004b2e:	183b      	adds	r3, r7, r0
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	0013      	movs	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	18cb      	adds	r3, r1, r3
 8004b40:	3301      	adds	r3, #1
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b46:	183b      	adds	r3, r7, r0
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	0013      	movs	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	183a      	adds	r2, r7, r0
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b5c:	183b      	adds	r3, r7, r0
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	0013      	movs	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	18cb      	adds	r3, r1, r3
 8004b6e:	3303      	adds	r3, #3
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b74:	183b      	adds	r3, r7, r0
 8004b76:	781a      	ldrb	r2, [r3, #0]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	0013      	movs	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	18cb      	adds	r3, r1, r3
 8004b84:	3338      	adds	r3, #56	; 0x38
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b8a:	183b      	adds	r3, r7, r0
 8004b8c:	781a      	ldrb	r2, [r3, #0]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	0013      	movs	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	18cb      	adds	r3, r1, r3
 8004b9a:	333c      	adds	r3, #60	; 0x3c
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ba0:	183b      	adds	r3, r7, r0
 8004ba2:	781a      	ldrb	r2, [r3, #0]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	0013      	movs	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	18cb      	adds	r3, r1, r3
 8004bb0:	3340      	adds	r3, #64	; 0x40
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb6:	183b      	adds	r3, r7, r0
 8004bb8:	781a      	ldrb	r2, [r3, #0]
 8004bba:	183b      	adds	r3, r7, r0
 8004bbc:	3201      	adds	r2, #1
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	210f      	movs	r1, #15
 8004bc2:	187b      	adds	r3, r7, r1
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d3ae      	bcc.n	8004b2c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e056      	b.n	8004c84 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bd6:	240f      	movs	r4, #15
 8004bd8:	193b      	adds	r3, r7, r4
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	236a      	movs	r3, #106	; 0x6a
 8004be0:	33ff      	adds	r3, #255	; 0xff
 8004be2:	0019      	movs	r1, r3
 8004be4:	0013      	movs	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	189b      	adds	r3, r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	18c3      	adds	r3, r0, r3
 8004bee:	185b      	adds	r3, r3, r1
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bf4:	193b      	adds	r3, r7, r4
 8004bf6:	781a      	ldrb	r2, [r3, #0]
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	23b4      	movs	r3, #180	; 0xb4
 8004bfc:	0059      	lsls	r1, r3, #1
 8004bfe:	0013      	movs	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	189b      	adds	r3, r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	18c3      	adds	r3, r0, r3
 8004c08:	185b      	adds	r3, r3, r1
 8004c0a:	193a      	adds	r2, r7, r4
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c10:	193b      	adds	r3, r7, r4
 8004c12:	781a      	ldrb	r2, [r3, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	236c      	movs	r3, #108	; 0x6c
 8004c18:	33ff      	adds	r3, #255	; 0xff
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	0013      	movs	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	189b      	adds	r3, r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	18c3      	adds	r3, r0, r3
 8004c26:	185b      	adds	r3, r3, r1
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c2c:	193b      	adds	r3, r7, r4
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	23bc      	movs	r3, #188	; 0xbc
 8004c34:	0059      	lsls	r1, r3, #1
 8004c36:	0013      	movs	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	18c3      	adds	r3, r0, r3
 8004c40:	185b      	adds	r3, r3, r1
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c46:	193b      	adds	r3, r7, r4
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	23be      	movs	r3, #190	; 0xbe
 8004c4e:	0059      	lsls	r1, r3, #1
 8004c50:	0013      	movs	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	189b      	adds	r3, r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	18c3      	adds	r3, r0, r3
 8004c5a:	185b      	adds	r3, r3, r1
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c60:	193b      	adds	r3, r7, r4
 8004c62:	781a      	ldrb	r2, [r3, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	23c0      	movs	r3, #192	; 0xc0
 8004c68:	0059      	lsls	r1, r3, #1
 8004c6a:	0013      	movs	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	18c3      	adds	r3, r0, r3
 8004c74:	185b      	adds	r3, r3, r1
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c7a:	193b      	adds	r3, r7, r4
 8004c7c:	781a      	ldrb	r2, [r3, #0]
 8004c7e:	193b      	adds	r3, r7, r4
 8004c80:	3201      	adds	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	230f      	movs	r3, #15
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	781a      	ldrb	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d3a1      	bcc.n	8004bd6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	466a      	mov	r2, sp
 8004c9a:	0011      	movs	r1, r2
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	3210      	adds	r2, #16
 8004ca0:	ca70      	ldmia	r2!, {r4, r5, r6}
 8004ca2:	c170      	stmia	r1!, {r4, r5, r6}
 8004ca4:	ca30      	ldmia	r2!, {r4, r5}
 8004ca6:	c130      	stmia	r1!, {r4, r5}
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f002 fcf9 	bl	80076a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2224      	movs	r2, #36	; 0x24
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a07      	ldr	r2, [pc, #28]	; (8004cdc <HAL_PCD_Init+0x1fc>)
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d103      	bne.n	8004cd2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f001 fd09 	bl	80066e4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	b005      	add	sp, #20
 8004cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cdc:	000002a9 	.word	0x000002a9

08004ce0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	23aa      	movs	r3, #170	; 0xaa
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	5cd3      	ldrb	r3, [r2, r3]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_PCD_Start+0x18>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e014      	b.n	8004d22 <HAL_PCD_Start+0x42>
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	23aa      	movs	r3, #170	; 0xaa
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	2101      	movs	r1, #1
 8004d00:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f002 fc9c 	bl	8007644 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f004 fc9f 	bl	8009654 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	23aa      	movs	r3, #170	; 0xaa
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	0018      	movs	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b002      	add	sp, #8
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f004 fca1 	bl	8009680 <USB_ReadInterrupts>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f000 fb48 	bl	80053e4 <PCD_EP_ISR_Handler>

    return;
 8004d54:	e11d      	b.n	8004f92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d015      	beq.n	8004d8c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2244      	movs	r2, #68	; 0x44
 8004d66:	5a9b      	ldrh	r3, [r3, r2]
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	498a      	ldr	r1, [pc, #552]	; (8004f98 <HAL_PCD_IRQHandler+0x26c>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	b291      	uxth	r1, r2
 8004d74:	2244      	movs	r2, #68	; 0x44
 8004d76:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f006 fc2b 	bl	800b5d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2100      	movs	r1, #0
 8004d84:	0018      	movs	r0, r3
 8004d86:	f000 f915 	bl	8004fb4 <HAL_PCD_SetAddress>

    return;
 8004d8a:	e102      	b.n	8004f92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	01db      	lsls	r3, r3, #7
 8004d92:	4013      	ands	r3, r2
 8004d94:	d00c      	beq.n	8004db0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2244      	movs	r2, #68	; 0x44
 8004d9c:	5a9b      	ldrh	r3, [r3, r2]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	497d      	ldr	r1, [pc, #500]	; (8004f9c <HAL_PCD_IRQHandler+0x270>)
 8004da6:	400a      	ands	r2, r1
 8004da8:	b291      	uxth	r1, r2
 8004daa:	2244      	movs	r2, #68	; 0x44
 8004dac:	5299      	strh	r1, [r3, r2]

    return;
 8004dae:	e0f0      	b.n	8004f92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	019b      	lsls	r3, r3, #6
 8004db6:	4013      	ands	r3, r2
 8004db8:	d00c      	beq.n	8004dd4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2244      	movs	r2, #68	; 0x44
 8004dc0:	5a9b      	ldrh	r3, [r3, r2]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4975      	ldr	r1, [pc, #468]	; (8004fa0 <HAL_PCD_IRQHandler+0x274>)
 8004dca:	400a      	ands	r2, r1
 8004dcc:	b291      	uxth	r1, r2
 8004dce:	2244      	movs	r2, #68	; 0x44
 8004dd0:	5299      	strh	r1, [r3, r2]

    return;
 8004dd2:	e0de      	b.n	8004f92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	2380      	movs	r3, #128	; 0x80
 8004dd8:	015b      	lsls	r3, r3, #5
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d038      	beq.n	8004e50 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	5a9b      	ldrh	r3, [r3, r2]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2104      	movs	r1, #4
 8004dee:	438a      	bics	r2, r1
 8004df0:	b291      	uxth	r1, r2
 8004df2:	2240      	movs	r2, #64	; 0x40
 8004df4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2240      	movs	r2, #64	; 0x40
 8004dfc:	5a9b      	ldrh	r3, [r3, r2]
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2108      	movs	r1, #8
 8004e06:	438a      	bics	r2, r1
 8004e08:	b291      	uxth	r1, r2
 8004e0a:	2240      	movs	r2, #64	; 0x40
 8004e0c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	23b8      	movs	r3, #184	; 0xb8
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	5cd3      	ldrb	r3, [r2, r3]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d109      	bne.n	8004e2e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	23b8      	movs	r3, #184	; 0xb8
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	2100      	movs	r1, #0
 8004e22:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2100      	movs	r1, #0
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f001 fc85 	bl	8006738 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	0018      	movs	r0, r3
 8004e32:	f006 fc11 	bl	800b658 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2244      	movs	r2, #68	; 0x44
 8004e3c:	5a9b      	ldrh	r3, [r3, r2]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4957      	ldr	r1, [pc, #348]	; (8004fa4 <HAL_PCD_IRQHandler+0x278>)
 8004e46:	400a      	ands	r2, r1
 8004e48:	b291      	uxth	r1, r2
 8004e4a:	2244      	movs	r2, #68	; 0x44
 8004e4c:	5299      	strh	r1, [r3, r2]

    return;
 8004e4e:	e0a0      	b.n	8004f92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	4013      	ands	r3, r2
 8004e58:	d028      	beq.n	8004eac <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2240      	movs	r2, #64	; 0x40
 8004e60:	5a9b      	ldrh	r3, [r3, r2]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2108      	movs	r1, #8
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	b291      	uxth	r1, r2
 8004e6e:	2240      	movs	r2, #64	; 0x40
 8004e70:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2244      	movs	r2, #68	; 0x44
 8004e78:	5a9b      	ldrh	r3, [r3, r2]
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4949      	ldr	r1, [pc, #292]	; (8004fa8 <HAL_PCD_IRQHandler+0x27c>)
 8004e82:	400a      	ands	r2, r1
 8004e84:	b291      	uxth	r1, r2
 8004e86:	2244      	movs	r2, #68	; 0x44
 8004e88:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	5a9b      	ldrh	r3, [r3, r2]
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2104      	movs	r1, #4
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	b291      	uxth	r1, r2
 8004e9e:	2240      	movs	r2, #64	; 0x40
 8004ea0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f006 fbbb 	bl	800b620 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004eaa:	e072      	b.n	8004f92 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2280      	movs	r2, #128	; 0x80
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d046      	beq.n	8004f42 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2244      	movs	r2, #68	; 0x44
 8004eba:	5a9b      	ldrh	r3, [r3, r2]
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2180      	movs	r1, #128	; 0x80
 8004ec4:	438a      	bics	r2, r1
 8004ec6:	b291      	uxth	r1, r2
 8004ec8:	2244      	movs	r2, #68	; 0x44
 8004eca:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	23b8      	movs	r3, #184	; 0xb8
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	5cd3      	ldrb	r3, [r2, r3]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d12f      	bne.n	8004f38 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2240      	movs	r2, #64	; 0x40
 8004ede:	5a9b      	ldrh	r3, [r3, r2]
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	b291      	uxth	r1, r2
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2240      	movs	r2, #64	; 0x40
 8004ef6:	5a9b      	ldrh	r3, [r3, r2]
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2108      	movs	r1, #8
 8004f00:	430a      	orrs	r2, r1
 8004f02:	b291      	uxth	r1, r2
 8004f04:	2240      	movs	r2, #64	; 0x40
 8004f06:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	23b8      	movs	r3, #184	; 0xb8
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	2101      	movs	r1, #1
 8004f10:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2254      	movs	r2, #84	; 0x54
 8004f18:	5a9b      	ldrh	r3, [r3, r2]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	089b      	lsrs	r3, r3, #2
 8004f1e:	223c      	movs	r2, #60	; 0x3c
 8004f20:	4013      	ands	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	23b9      	movs	r3, #185	; 0xb9
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2101      	movs	r1, #1
 8004f30:	0018      	movs	r0, r3
 8004f32:	f001 fc01 	bl	8006738 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004f36:	e02c      	b.n	8004f92 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f006 fb70 	bl	800b620 <HAL_PCD_SuspendCallback>
    return;
 8004f40:	e027      	b.n	8004f92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	2380      	movs	r3, #128	; 0x80
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d010      	beq.n	8004f6e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2244      	movs	r2, #68	; 0x44
 8004f52:	5a9b      	ldrh	r3, [r3, r2]
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4914      	ldr	r1, [pc, #80]	; (8004fac <HAL_PCD_IRQHandler+0x280>)
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	b291      	uxth	r1, r2
 8004f60:	2244      	movs	r2, #68	; 0x44
 8004f62:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	0018      	movs	r0, r3
 8004f68:	f006 fb26 	bl	800b5b8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004f6c:	e011      	b.n	8004f92 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	2380      	movs	r3, #128	; 0x80
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	4013      	ands	r3, r2
 8004f76:	d00c      	beq.n	8004f92 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2244      	movs	r2, #68	; 0x44
 8004f7e:	5a9b      	ldrh	r3, [r3, r2]
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	490a      	ldr	r1, [pc, #40]	; (8004fb0 <HAL_PCD_IRQHandler+0x284>)
 8004f88:	400a      	ands	r2, r1
 8004f8a:	b291      	uxth	r1, r2
 8004f8c:	2244      	movs	r2, #68	; 0x44
 8004f8e:	5299      	strh	r1, [r3, r2]

    return;
 8004f90:	46c0      	nop			; (mov r8, r8)
  }
}
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b004      	add	sp, #16
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	fffffbff 	.word	0xfffffbff
 8004f9c:	ffffbfff 	.word	0xffffbfff
 8004fa0:	ffffdfff 	.word	0xffffdfff
 8004fa4:	ffffefff 	.word	0xffffefff
 8004fa8:	fffff7ff 	.word	0xfffff7ff
 8004fac:	fffffdff 	.word	0xfffffdff
 8004fb0:	fffffeff 	.word	0xfffffeff

08004fb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	000a      	movs	r2, r1
 8004fbe:	1cfb      	adds	r3, r7, #3
 8004fc0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	23aa      	movs	r3, #170	; 0xaa
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	5cd3      	ldrb	r3, [r2, r3]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_PCD_SetAddress+0x1e>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e017      	b.n	8005002 <HAL_PCD_SetAddress+0x4e>
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	23aa      	movs	r3, #170	; 0xaa
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	2101      	movs	r1, #1
 8004fda:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	1cfa      	adds	r2, r7, #3
 8004fe0:	2124      	movs	r1, #36	; 0x24
 8004fe2:	7812      	ldrb	r2, [r2, #0]
 8004fe4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	1cfb      	adds	r3, r7, #3
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	0019      	movs	r1, r3
 8004ff0:	0010      	movs	r0, r2
 8004ff2:	f004 fb1b 	bl	800962c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	23aa      	movs	r3, #170	; 0xaa
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	0018      	movs	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	b002      	add	sp, #8
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800500a:	b590      	push	{r4, r7, lr}
 800500c:	b085      	sub	sp, #20
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	000c      	movs	r4, r1
 8005014:	0010      	movs	r0, r2
 8005016:	0019      	movs	r1, r3
 8005018:	1cfb      	adds	r3, r7, #3
 800501a:	1c22      	adds	r2, r4, #0
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	003b      	movs	r3, r7
 8005020:	1c02      	adds	r2, r0, #0
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	1cbb      	adds	r3, r7, #2
 8005026:	1c0a      	adds	r2, r1, #0
 8005028:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800502a:	230b      	movs	r3, #11
 800502c:	18fb      	adds	r3, r7, r3
 800502e:	2200      	movs	r2, #0
 8005030:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005032:	1cfb      	adds	r3, r7, #3
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b25b      	sxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	da0f      	bge.n	800505c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800503c:	1cfb      	adds	r3, r7, #3
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2207      	movs	r2, #7
 8005042:	4013      	ands	r3, r2
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	0013      	movs	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	189b      	adds	r3, r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2201      	movs	r2, #1
 8005058:	705a      	strb	r2, [r3, #1]
 800505a:	e00f      	b.n	800507c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800505c:	1cfb      	adds	r3, r7, #3
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2207      	movs	r2, #7
 8005062:	401a      	ands	r2, r3
 8005064:	0013      	movs	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	189b      	adds	r3, r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	3369      	adds	r3, #105	; 0x69
 800506e:	33ff      	adds	r3, #255	; 0xff
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	18d3      	adds	r3, r2, r3
 8005074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800507c:	1cfb      	adds	r3, r7, #3
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2207      	movs	r2, #7
 8005082:	4013      	ands	r3, r2
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800508a:	003b      	movs	r3, r7
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1cba      	adds	r2, r7, #2
 8005096:	7812      	ldrb	r2, [r2, #0]
 8005098:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800509a:	1cbb      	adds	r3, r7, #2
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d102      	bne.n	80050a8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	23aa      	movs	r3, #170	; 0xaa
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	5cd3      	ldrb	r3, [r2, r3]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_PCD_EP_Open+0xae>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e013      	b.n	80050e0 <HAL_PCD_EP_Open+0xd6>
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	23aa      	movs	r3, #170	; 0xaa
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	2101      	movs	r1, #1
 80050c0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	0011      	movs	r1, r2
 80050ca:	0018      	movs	r0, r3
 80050cc:	f002 fb12 	bl	80076f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	23aa      	movs	r3, #170	; 0xaa
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	2100      	movs	r1, #0
 80050d8:	54d1      	strb	r1, [r2, r3]

  return ret;
 80050da:	230b      	movs	r3, #11
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	781b      	ldrb	r3, [r3, #0]
}
 80050e0:	0018      	movs	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b005      	add	sp, #20
 80050e6:	bd90      	pop	{r4, r7, pc}

080050e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	000a      	movs	r2, r1
 80050f2:	1cfb      	adds	r3, r7, #3
 80050f4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050f6:	1cfb      	adds	r3, r7, #3
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	b25b      	sxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	da0f      	bge.n	8005120 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005100:	1cfb      	adds	r3, r7, #3
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2207      	movs	r2, #7
 8005106:	4013      	ands	r3, r2
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	0013      	movs	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	189b      	adds	r3, r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	18d3      	adds	r3, r2, r3
 8005116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	705a      	strb	r2, [r3, #1]
 800511e:	e00f      	b.n	8005140 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005120:	1cfb      	adds	r3, r7, #3
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2207      	movs	r2, #7
 8005126:	401a      	ands	r2, r3
 8005128:	0013      	movs	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	189b      	adds	r3, r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	3369      	adds	r3, #105	; 0x69
 8005132:	33ff      	adds	r3, #255	; 0xff
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	18d3      	adds	r3, r2, r3
 8005138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005140:	1cfb      	adds	r3, r7, #3
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2207      	movs	r2, #7
 8005146:	4013      	ands	r3, r2
 8005148:	b2da      	uxtb	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	23aa      	movs	r3, #170	; 0xaa
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	5cd3      	ldrb	r3, [r2, r3]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_PCD_EP_Close+0x76>
 800515a:	2302      	movs	r3, #2
 800515c:	e011      	b.n	8005182 <HAL_PCD_EP_Close+0x9a>
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	23aa      	movs	r3, #170	; 0xaa
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	2101      	movs	r1, #1
 8005166:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	0011      	movs	r1, r2
 8005170:	0018      	movs	r0, r3
 8005172:	f002 fe61 	bl	8007e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	23aa      	movs	r3, #170	; 0xaa
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	2100      	movs	r1, #0
 800517e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	0018      	movs	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	b004      	add	sp, #16
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	200b      	movs	r0, #11
 8005198:	183b      	adds	r3, r7, r0
 800519a:	1c0a      	adds	r2, r1, #0
 800519c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800519e:	0001      	movs	r1, r0
 80051a0:	187b      	adds	r3, r7, r1
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2207      	movs	r2, #7
 80051a6:	401a      	ands	r2, r3
 80051a8:	0013      	movs	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	189b      	adds	r3, r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	3369      	adds	r3, #105	; 0x69
 80051b2:	33ff      	adds	r3, #255	; 0xff
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	18d3      	adds	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2207      	movs	r2, #7
 80051d8:	4013      	ands	r3, r2
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	0011      	movs	r1, r2
 80051e8:	0018      	movs	r0, r3
 80051ea:	f002 ffe5 	bl	80081b8 <USB_EPStartXfer>

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b006      	add	sp, #24
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	200b      	movs	r0, #11
 8005206:	183b      	adds	r3, r7, r0
 8005208:	1c0a      	adds	r2, r1, #0
 800520a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800520c:	183b      	adds	r3, r7, r0
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2207      	movs	r2, #7
 8005212:	4013      	ands	r3, r2
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	0013      	movs	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	189b      	adds	r3, r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	18d3      	adds	r3, r2, r3
 8005222:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2224      	movs	r2, #36	; 0x24
 8005234:	2101      	movs	r1, #1
 8005236:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2200      	movs	r2, #0
 8005242:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2201      	movs	r2, #1
 8005248:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800524a:	183b      	adds	r3, r7, r0
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2207      	movs	r2, #7
 8005250:	4013      	ands	r3, r2
 8005252:	b2da      	uxtb	r2, r3
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	0011      	movs	r1, r2
 8005260:	0018      	movs	r0, r3
 8005262:	f002 ffa9 	bl	80081b8 <USB_EPStartXfer>

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	0018      	movs	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	b006      	add	sp, #24
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	000a      	movs	r2, r1
 800527a:	1cfb      	adds	r3, r7, #3
 800527c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800527e:	1cfb      	adds	r3, r7, #3
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2207      	movs	r2, #7
 8005284:	401a      	ands	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	429a      	cmp	r2, r3
 800528c:	d901      	bls.n	8005292 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e046      	b.n	8005320 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005292:	1cfb      	adds	r3, r7, #3
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b25b      	sxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	da0f      	bge.n	80052bc <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800529c:	1cfb      	adds	r3, r7, #3
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2207      	movs	r2, #7
 80052a2:	4013      	ands	r3, r2
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	0013      	movs	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	189b      	adds	r3, r3, r2
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	18d3      	adds	r3, r2, r3
 80052b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2201      	movs	r2, #1
 80052b8:	705a      	strb	r2, [r3, #1]
 80052ba:	e00d      	b.n	80052d8 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052bc:	1cfb      	adds	r3, r7, #3
 80052be:	781a      	ldrb	r2, [r3, #0]
 80052c0:	0013      	movs	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	3369      	adds	r3, #105	; 0x69
 80052ca:	33ff      	adds	r3, #255	; 0xff
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	18d3      	adds	r3, r2, r3
 80052d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052de:	1cfb      	adds	r3, r7, #3
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2207      	movs	r2, #7
 80052e4:	4013      	ands	r3, r2
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	23aa      	movs	r3, #170	; 0xaa
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	5cd3      	ldrb	r3, [r2, r3]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_PCD_EP_SetStall+0x8c>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e011      	b.n	8005320 <HAL_PCD_EP_SetStall+0xb0>
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	23aa      	movs	r3, #170	; 0xaa
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	2101      	movs	r1, #1
 8005304:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	0011      	movs	r1, r2
 800530e:	0018      	movs	r0, r3
 8005310:	f004 f88a 	bl	8009428 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	23aa      	movs	r3, #170	; 0xaa
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	2100      	movs	r1, #0
 800531c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	b004      	add	sp, #16
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	000a      	movs	r2, r1
 8005332:	1cfb      	adds	r3, r7, #3
 8005334:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005336:	1cfb      	adds	r3, r7, #3
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	220f      	movs	r2, #15
 800533c:	401a      	ands	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d901      	bls.n	800534a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e048      	b.n	80053dc <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800534a:	1cfb      	adds	r3, r7, #3
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	b25b      	sxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	da0f      	bge.n	8005374 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005354:	1cfb      	adds	r3, r7, #3
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2207      	movs	r2, #7
 800535a:	4013      	ands	r3, r2
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	0013      	movs	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	189b      	adds	r3, r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	705a      	strb	r2, [r3, #1]
 8005372:	e00f      	b.n	8005394 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005374:	1cfb      	adds	r3, r7, #3
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2207      	movs	r2, #7
 800537a:	401a      	ands	r2, r3
 800537c:	0013      	movs	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	189b      	adds	r3, r3, r2
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	3369      	adds	r3, #105	; 0x69
 8005386:	33ff      	adds	r3, #255	; 0xff
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	18d3      	adds	r3, r2, r3
 800538c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800539a:	1cfb      	adds	r3, r7, #3
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2207      	movs	r2, #7
 80053a0:	4013      	ands	r3, r2
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	23aa      	movs	r3, #170	; 0xaa
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	5cd3      	ldrb	r3, [r2, r3]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_PCD_EP_ClrStall+0x90>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e011      	b.n	80053dc <HAL_PCD_EP_ClrStall+0xb4>
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	23aa      	movs	r3, #170	; 0xaa
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	2101      	movs	r1, #1
 80053c0:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	0011      	movs	r1, r2
 80053ca:	0018      	movs	r0, r3
 80053cc:	f004 f87c 	bl	80094c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	23aa      	movs	r3, #170	; 0xaa
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	2100      	movs	r1, #0
 80053d8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	0018      	movs	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	b004      	add	sp, #16
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80053e4:	b5b0      	push	{r4, r5, r7, lr}
 80053e6:	b096      	sub	sp, #88	; 0x58
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80053ec:	f000 fbec 	bl	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	204e      	movs	r0, #78	; 0x4e
 80053f6:	183b      	adds	r3, r7, r0
 80053f8:	2144      	movs	r1, #68	; 0x44
 80053fa:	5a52      	ldrh	r2, [r2, r1]
 80053fc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80053fe:	183b      	adds	r3, r7, r0
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b2da      	uxtb	r2, r3
 8005404:	244d      	movs	r4, #77	; 0x4d
 8005406:	193b      	adds	r3, r7, r4
 8005408:	210f      	movs	r1, #15
 800540a:	400a      	ands	r2, r1
 800540c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800540e:	193b      	adds	r3, r7, r4
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d000      	beq.n	8005418 <PCD_EP_ISR_Handler+0x34>
 8005416:	e18f      	b.n	8005738 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005418:	183b      	adds	r3, r7, r0
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	2210      	movs	r2, #16
 800541e:	4013      	ands	r3, r2
 8005420:	d155      	bne.n	80054ce <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29a      	uxth	r2, r3
 800542a:	200e      	movs	r0, #14
 800542c:	183b      	adds	r3, r7, r0
 800542e:	49bb      	ldr	r1, [pc, #748]	; (800571c <PCD_EP_ISR_Handler+0x338>)
 8005430:	400a      	ands	r2, r1
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	183a      	adds	r2, r7, r0
 800543a:	8812      	ldrh	r2, [r2, #0]
 800543c:	49b8      	ldr	r1, [pc, #736]	; (8005720 <PCD_EP_ISR_Handler+0x33c>)
 800543e:	430a      	orrs	r2, r1
 8005440:	b292      	uxth	r2, r2
 8005442:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3328      	adds	r3, #40	; 0x28
 8005448:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2250      	movs	r2, #80	; 0x50
 8005450:	5a9b      	ldrh	r3, [r3, r2]
 8005452:	b29b      	uxth	r3, r3
 8005454:	001a      	movs	r2, r3
 8005456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	18d2      	adds	r2, r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	18d3      	adds	r3, r2, r3
 8005464:	4aaf      	ldr	r2, [pc, #700]	; (8005724 <PCD_EP_ISR_Handler+0x340>)
 8005466:	4694      	mov	ip, r2
 8005468:	4463      	add	r3, ip
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	059b      	lsls	r3, r3, #22
 800546e:	0d9a      	lsrs	r2, r3, #22
 8005470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005472:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	18d2      	adds	r2, r2, r3
 800547e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005480:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2100      	movs	r1, #0
 8005486:	0018      	movs	r0, r3
 8005488:	f006 f878 	bl	800b57c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2224      	movs	r2, #36	; 0x24
 8005490:	5c9b      	ldrb	r3, [r3, r2]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <PCD_EP_ISR_Handler+0xb8>
 8005498:	f000 fb96 	bl	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
 800549c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <PCD_EP_ISR_Handler+0xc4>
 80054a4:	f000 fb90 	bl	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2224      	movs	r2, #36	; 0x24
 80054ac:	5c9b      	ldrb	r3, [r3, r2]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	4252      	negs	r2, r2
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	b291      	uxth	r1, r2
 80054be:	224c      	movs	r2, #76	; 0x4c
 80054c0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2224      	movs	r2, #36	; 0x24
 80054c6:	2100      	movs	r1, #0
 80054c8:	5499      	strb	r1, [r3, r2]
 80054ca:	f000 fb7d 	bl	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3369      	adds	r3, #105	; 0x69
 80054d2:	33ff      	adds	r3, #255	; 0xff
 80054d4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	214a      	movs	r1, #74	; 0x4a
 80054dc:	187b      	adds	r3, r7, r1
 80054de:	8812      	ldrh	r2, [r2, #0]
 80054e0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80054e2:	187b      	adds	r3, r7, r1
 80054e4:	881a      	ldrh	r2, [r3, #0]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	4013      	ands	r3, r2
 80054ec:	d037      	beq.n	800555e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2250      	movs	r2, #80	; 0x50
 80054f4:	5a9b      	ldrh	r3, [r3, r2]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	001a      	movs	r2, r3
 80054fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	18d2      	adds	r2, r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	18d3      	adds	r3, r2, r3
 8005508:	4a87      	ldr	r2, [pc, #540]	; (8005728 <PCD_EP_ISR_Handler+0x344>)
 800550a:	4694      	mov	ip, r2
 800550c:	4463      	add	r3, ip
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	059b      	lsls	r3, r3, #22
 8005512:	0d9a      	lsrs	r2, r3, #22
 8005514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005516:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	22ac      	movs	r2, #172	; 0xac
 8005520:	0092      	lsls	r2, r2, #2
 8005522:	1899      	adds	r1, r3, r2
 8005524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005526:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800552c:	b29b      	uxth	r3, r3
 800552e:	f004 f8fe 	bl	800972e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29a      	uxth	r2, r3
 800553a:	2010      	movs	r0, #16
 800553c:	183b      	adds	r3, r7, r0
 800553e:	497b      	ldr	r1, [pc, #492]	; (800572c <PCD_EP_ISR_Handler+0x348>)
 8005540:	400a      	ands	r2, r1
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	183a      	adds	r2, r7, r0
 800554a:	8812      	ldrh	r2, [r2, #0]
 800554c:	2180      	movs	r1, #128	; 0x80
 800554e:	430a      	orrs	r2, r1
 8005550:	b292      	uxth	r2, r2
 8005552:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f005 ffda 	bl	800b510 <HAL_PCD_SetupStageCallback>
 800555c:	e334      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800555e:	234a      	movs	r3, #74	; 0x4a
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	2200      	movs	r2, #0
 8005564:	5e9b      	ldrsh	r3, [r3, r2]
 8005566:	2b00      	cmp	r3, #0
 8005568:	db00      	blt.n	800556c <PCD_EP_ISR_Handler+0x188>
 800556a:	e32d      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29a      	uxth	r2, r3
 8005574:	201e      	movs	r0, #30
 8005576:	183b      	adds	r3, r7, r0
 8005578:	496c      	ldr	r1, [pc, #432]	; (800572c <PCD_EP_ISR_Handler+0x348>)
 800557a:	400a      	ands	r2, r1
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	183a      	adds	r2, r7, r0
 8005584:	8812      	ldrh	r2, [r2, #0]
 8005586:	2180      	movs	r1, #128	; 0x80
 8005588:	430a      	orrs	r2, r1
 800558a:	b292      	uxth	r2, r2
 800558c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2250      	movs	r2, #80	; 0x50
 8005594:	5a9b      	ldrh	r3, [r3, r2]
 8005596:	b29b      	uxth	r3, r3
 8005598:	001a      	movs	r2, r3
 800559a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	18d2      	adds	r2, r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	18d3      	adds	r3, r2, r3
 80055a8:	4a5f      	ldr	r2, [pc, #380]	; (8005728 <PCD_EP_ISR_Handler+0x344>)
 80055aa:	4694      	mov	ip, r2
 80055ac:	4463      	add	r3, ip
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	059b      	lsls	r3, r3, #22
 80055b2:	0d9a      	lsrs	r2, r3, #22
 80055b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80055b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01a      	beq.n	80055f6 <PCD_EP_ISR_Handler+0x212>
 80055c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d016      	beq.n	80055f6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ce:	6959      	ldr	r1, [r3, #20]
 80055d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80055d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055d6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f004 f8a8 	bl	800972e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80055de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e0:	695a      	ldr	r2, [r3, #20]
 80055e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	18d2      	adds	r2, r2, r3
 80055e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2100      	movs	r1, #0
 80055f0:	0018      	movs	r0, r3
 80055f2:	f005 ffa2 	bl	800b53a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	214a      	movs	r1, #74	; 0x4a
 80055fc:	187b      	adds	r3, r7, r1
 80055fe:	8812      	ldrh	r2, [r2, #0]
 8005600:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005602:	187b      	adds	r3, r7, r1
 8005604:	881a      	ldrh	r2, [r3, #0]
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	4013      	ands	r3, r2
 800560c:	d000      	beq.n	8005610 <PCD_EP_ISR_Handler+0x22c>
 800560e:	e2db      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
 8005610:	187b      	adds	r3, r7, r1
 8005612:	881a      	ldrh	r2, [r3, #0]
 8005614:	23c0      	movs	r3, #192	; 0xc0
 8005616:	019b      	lsls	r3, r3, #6
 8005618:	401a      	ands	r2, r3
 800561a:	23c0      	movs	r3, #192	; 0xc0
 800561c:	019b      	lsls	r3, r3, #6
 800561e:	429a      	cmp	r2, r3
 8005620:	d100      	bne.n	8005624 <PCD_EP_ISR_Handler+0x240>
 8005622:	e2d1      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2250      	movs	r2, #80	; 0x50
 8005630:	5a9b      	ldrh	r3, [r3, r2]
 8005632:	b29b      	uxth	r3, r3
 8005634:	001a      	movs	r2, r3
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	189b      	adds	r3, r3, r2
 800563a:	61bb      	str	r3, [r7, #24]
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	4a3a      	ldr	r2, [pc, #232]	; (8005728 <PCD_EP_ISR_Handler+0x344>)
 8005640:	4694      	mov	ip, r2
 8005642:	4463      	add	r3, ip
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	059b      	lsls	r3, r3, #22
 800564e:	0d9b      	lsrs	r3, r3, #22
 8005650:	b29a      	uxth	r2, r3
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	801a      	strh	r2, [r3, #0]
 8005656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b3e      	cmp	r3, #62	; 0x3e
 800565c:	d91a      	bls.n	8005694 <PCD_EP_ISR_Handler+0x2b0>
 800565e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	647b      	str	r3, [r7, #68]	; 0x44
 8005666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	221f      	movs	r2, #31
 800566c:	4013      	ands	r3, r2
 800566e:	d102      	bne.n	8005676 <PCD_EP_ISR_Handler+0x292>
 8005670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005672:	3b01      	subs	r3, #1
 8005674:	647b      	str	r3, [r7, #68]	; 0x44
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29a      	uxth	r2, r3
 800567c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567e:	b29b      	uxth	r3, r3
 8005680:	029b      	lsls	r3, r3, #10
 8005682:	b29b      	uxth	r3, r3
 8005684:	4313      	orrs	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	4a25      	ldr	r2, [pc, #148]	; (8005720 <PCD_EP_ISR_Handler+0x33c>)
 800568a:	4313      	orrs	r3, r2
 800568c:	b29a      	uxth	r2, r3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	e023      	b.n	80056dc <PCD_EP_ISR_Handler+0x2f8>
 8005694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d108      	bne.n	80056ae <PCD_EP_ISR_Handler+0x2ca>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	4a1f      	ldr	r2, [pc, #124]	; (8005720 <PCD_EP_ISR_Handler+0x33c>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e016      	b.n	80056dc <PCD_EP_ISR_Handler+0x2f8>
 80056ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	647b      	str	r3, [r7, #68]	; 0x44
 80056b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2201      	movs	r2, #1
 80056bc:	4013      	ands	r3, r2
 80056be:	d002      	beq.n	80056c6 <PCD_EP_ISR_Handler+0x2e2>
 80056c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c2:	3301      	adds	r3, #1
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	029b      	lsls	r3, r3, #10
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4313      	orrs	r3, r2
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	2012      	movs	r0, #18
 80056e6:	183b      	adds	r3, r7, r0
 80056e8:	4911      	ldr	r1, [pc, #68]	; (8005730 <PCD_EP_ISR_Handler+0x34c>)
 80056ea:	400a      	ands	r2, r1
 80056ec:	801a      	strh	r2, [r3, #0]
 80056ee:	183b      	adds	r3, r7, r0
 80056f0:	183a      	adds	r2, r7, r0
 80056f2:	8812      	ldrh	r2, [r2, #0]
 80056f4:	2180      	movs	r1, #128	; 0x80
 80056f6:	0149      	lsls	r1, r1, #5
 80056f8:	404a      	eors	r2, r1
 80056fa:	801a      	strh	r2, [r3, #0]
 80056fc:	183b      	adds	r3, r7, r0
 80056fe:	183a      	adds	r2, r7, r0
 8005700:	8812      	ldrh	r2, [r2, #0]
 8005702:	2180      	movs	r1, #128	; 0x80
 8005704:	0189      	lsls	r1, r1, #6
 8005706:	404a      	eors	r2, r1
 8005708:	801a      	strh	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	183a      	adds	r2, r7, r0
 8005710:	8812      	ldrh	r2, [r2, #0]
 8005712:	4908      	ldr	r1, [pc, #32]	; (8005734 <PCD_EP_ISR_Handler+0x350>)
 8005714:	430a      	orrs	r2, r1
 8005716:	b292      	uxth	r2, r2
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	e255      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
 800571c:	ffff8f0f 	.word	0xffff8f0f
 8005720:	ffff8000 	.word	0xffff8000
 8005724:	00000402 	.word	0x00000402
 8005728:	00000406 	.word	0x00000406
 800572c:	00000f8f 	.word	0x00000f8f
 8005730:	ffffbf8f 	.word	0xffffbf8f
 8005734:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	001a      	movs	r2, r3
 800573e:	204d      	movs	r0, #77	; 0x4d
 8005740:	183b      	adds	r3, r7, r0
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	18d2      	adds	r2, r2, r3
 8005748:	214a      	movs	r1, #74	; 0x4a
 800574a:	187b      	adds	r3, r7, r1
 800574c:	8812      	ldrh	r2, [r2, #0]
 800574e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005750:	187b      	adds	r3, r7, r1
 8005752:	2200      	movs	r2, #0
 8005754:	5e9b      	ldrsh	r3, [r3, r2]
 8005756:	2b00      	cmp	r3, #0
 8005758:	db00      	blt.n	800575c <PCD_EP_ISR_Handler+0x378>
 800575a:	e0fa      	b.n	8005952 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	001a      	movs	r2, r3
 8005762:	183b      	adds	r3, r7, r0
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	18d3      	adds	r3, r2, r3
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29a      	uxth	r2, r3
 800576e:	2448      	movs	r4, #72	; 0x48
 8005770:	193b      	adds	r3, r7, r4
 8005772:	49d1      	ldr	r1, [pc, #836]	; (8005ab8 <PCD_EP_ISR_Handler+0x6d4>)
 8005774:	400a      	ands	r2, r1
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	001a      	movs	r2, r3
 800577e:	183b      	adds	r3, r7, r0
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	18d3      	adds	r3, r2, r3
 8005786:	193a      	adds	r2, r7, r4
 8005788:	8812      	ldrh	r2, [r2, #0]
 800578a:	2180      	movs	r1, #128	; 0x80
 800578c:	430a      	orrs	r2, r1
 800578e:	b292      	uxth	r2, r2
 8005790:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005792:	183b      	adds	r3, r7, r0
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	0013      	movs	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	189b      	adds	r3, r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	3369      	adds	r3, #105	; 0x69
 80057a0:	33ff      	adds	r3, #255	; 0xff
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	18d3      	adds	r3, r2, r3
 80057a6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80057a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057aa:	7b1b      	ldrb	r3, [r3, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d125      	bne.n	80057fc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2250      	movs	r2, #80	; 0x50
 80057b6:	5a9b      	ldrh	r3, [r3, r2]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	001a      	movs	r2, r3
 80057bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	18d2      	adds	r2, r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	18d3      	adds	r3, r2, r3
 80057ca:	4abc      	ldr	r2, [pc, #752]	; (8005abc <PCD_EP_ISR_Handler+0x6d8>)
 80057cc:	4694      	mov	ip, r2
 80057ce:	4463      	add	r3, ip
 80057d0:	881a      	ldrh	r2, [r3, #0]
 80057d2:	2450      	movs	r4, #80	; 0x50
 80057d4:	193b      	adds	r3, r7, r4
 80057d6:	0592      	lsls	r2, r2, #22
 80057d8:	0d92      	lsrs	r2, r2, #22
 80057da:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80057dc:	193b      	adds	r3, r7, r4
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d100      	bne.n	80057e6 <PCD_EP_ISR_Handler+0x402>
 80057e4:	e08d      	b.n	8005902 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ec:	6959      	ldr	r1, [r3, #20]
 80057ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f0:	88da      	ldrh	r2, [r3, #6]
 80057f2:	193b      	adds	r3, r7, r4
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	f003 ff9a 	bl	800972e <USB_ReadPMA>
 80057fa:	e082      	b.n	8005902 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80057fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fe:	78db      	ldrb	r3, [r3, #3]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d10c      	bne.n	800581e <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005804:	2350      	movs	r3, #80	; 0x50
 8005806:	18fc      	adds	r4, r7, r3
 8005808:	234a      	movs	r3, #74	; 0x4a
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	881a      	ldrh	r2, [r3, #0]
 800580e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0018      	movs	r0, r3
 8005814:	f000 f9ec 	bl	8005bf0 <HAL_PCD_EP_DB_Receive>
 8005818:	0003      	movs	r3, r0
 800581a:	8023      	strh	r3, [r4, #0]
 800581c:	e071      	b.n	8005902 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	001a      	movs	r2, r3
 8005824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	18d3      	adds	r3, r2, r3
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29a      	uxth	r2, r3
 8005830:	2052      	movs	r0, #82	; 0x52
 8005832:	183b      	adds	r3, r7, r0
 8005834:	49a2      	ldr	r1, [pc, #648]	; (8005ac0 <PCD_EP_ISR_Handler+0x6dc>)
 8005836:	400a      	ands	r2, r1
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	001a      	movs	r2, r3
 8005840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	18d3      	adds	r3, r2, r3
 8005848:	183a      	adds	r2, r7, r0
 800584a:	8812      	ldrh	r2, [r2, #0]
 800584c:	499d      	ldr	r1, [pc, #628]	; (8005ac4 <PCD_EP_ISR_Handler+0x6e0>)
 800584e:	430a      	orrs	r2, r1
 8005850:	b292      	uxth	r2, r2
 8005852:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	001a      	movs	r2, r3
 800585a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	18d3      	adds	r3, r2, r3
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	001a      	movs	r2, r3
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	01db      	lsls	r3, r3, #7
 800586c:	4013      	ands	r3, r2
 800586e:	d024      	beq.n	80058ba <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2250      	movs	r2, #80	; 0x50
 8005876:	5a9b      	ldrh	r3, [r3, r2]
 8005878:	b29b      	uxth	r3, r3
 800587a:	001a      	movs	r2, r3
 800587c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	18d2      	adds	r2, r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	18d3      	adds	r3, r2, r3
 800588a:	4a8f      	ldr	r2, [pc, #572]	; (8005ac8 <PCD_EP_ISR_Handler+0x6e4>)
 800588c:	4694      	mov	ip, r2
 800588e:	4463      	add	r3, ip
 8005890:	881a      	ldrh	r2, [r3, #0]
 8005892:	2450      	movs	r4, #80	; 0x50
 8005894:	193b      	adds	r3, r7, r4
 8005896:	0592      	lsls	r2, r2, #22
 8005898:	0d92      	lsrs	r2, r2, #22
 800589a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800589c:	193b      	adds	r3, r7, r4
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d02e      	beq.n	8005902 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058aa:	6959      	ldr	r1, [r3, #20]
 80058ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ae:	891a      	ldrh	r2, [r3, #8]
 80058b0:	193b      	adds	r3, r7, r4
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	f003 ff3b 	bl	800972e <USB_ReadPMA>
 80058b8:	e023      	b.n	8005902 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2250      	movs	r2, #80	; 0x50
 80058c0:	5a9b      	ldrh	r3, [r3, r2]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	001a      	movs	r2, r3
 80058c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	18d2      	adds	r2, r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	18d3      	adds	r3, r2, r3
 80058d4:	4a79      	ldr	r2, [pc, #484]	; (8005abc <PCD_EP_ISR_Handler+0x6d8>)
 80058d6:	4694      	mov	ip, r2
 80058d8:	4463      	add	r3, ip
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	2450      	movs	r4, #80	; 0x50
 80058de:	193b      	adds	r3, r7, r4
 80058e0:	0592      	lsls	r2, r2, #22
 80058e2:	0d92      	lsrs	r2, r2, #22
 80058e4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80058e6:	193b      	adds	r3, r7, r4
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058f4:	6959      	ldr	r1, [r3, #20]
 80058f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058f8:	895a      	ldrh	r2, [r3, #10]
 80058fa:	193b      	adds	r3, r7, r4
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	f003 ff16 	bl	800972e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	2150      	movs	r1, #80	; 0x50
 8005908:	187b      	adds	r3, r7, r1
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	18d2      	adds	r2, r2, r3
 800590e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005910:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	187b      	adds	r3, r7, r1
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	18d2      	adds	r2, r2, r3
 800591c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800591e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <PCD_EP_ISR_Handler+0x550>
 8005928:	187b      	adds	r3, r7, r1
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	429a      	cmp	r2, r3
 8005932:	d207      	bcs.n	8005944 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	0011      	movs	r1, r2
 800593c:	0018      	movs	r0, r3
 800593e:	f005 fdfc 	bl	800b53a <HAL_PCD_DataOutStageCallback>
 8005942:	e006      	b.n	8005952 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800594a:	0011      	movs	r1, r2
 800594c:	0018      	movs	r0, r3
 800594e:	f002 fc33 	bl	80081b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005952:	244a      	movs	r4, #74	; 0x4a
 8005954:	193b      	adds	r3, r7, r4
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	4013      	ands	r3, r2
 800595c:	d100      	bne.n	8005960 <PCD_EP_ISR_Handler+0x57c>
 800595e:	e133      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005960:	204d      	movs	r0, #77	; 0x4d
 8005962:	183b      	adds	r3, r7, r0
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	0013      	movs	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	189b      	adds	r3, r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	18d3      	adds	r3, r2, r3
 8005974:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	001a      	movs	r2, r3
 800597c:	183b      	adds	r3, r7, r0
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	18d3      	adds	r3, r2, r3
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29a      	uxth	r2, r3
 8005988:	2542      	movs	r5, #66	; 0x42
 800598a:	197b      	adds	r3, r7, r5
 800598c:	494f      	ldr	r1, [pc, #316]	; (8005acc <PCD_EP_ISR_Handler+0x6e8>)
 800598e:	400a      	ands	r2, r1
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	001a      	movs	r2, r3
 8005998:	183b      	adds	r3, r7, r0
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	18d3      	adds	r3, r2, r3
 80059a0:	197a      	adds	r2, r7, r5
 80059a2:	8812      	ldrh	r2, [r2, #0]
 80059a4:	494a      	ldr	r1, [pc, #296]	; (8005ad0 <PCD_EP_ISR_Handler+0x6ec>)
 80059a6:	430a      	orrs	r2, r1
 80059a8:	b292      	uxth	r2, r2
 80059aa:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80059ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ae:	78db      	ldrb	r3, [r3, #3]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d000      	beq.n	80059b6 <PCD_EP_ISR_Handler+0x5d2>
 80059b4:	e0af      	b.n	8005b16 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80059b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b8:	2200      	movs	r2, #0
 80059ba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80059bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059be:	7b1b      	ldrb	r3, [r3, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d100      	bne.n	80059c6 <PCD_EP_ISR_Handler+0x5e2>
 80059c4:	e09f      	b.n	8005b06 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059c6:	193b      	adds	r3, r7, r4
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	2240      	movs	r2, #64	; 0x40
 80059cc:	4013      	ands	r3, r2
 80059ce:	d046      	beq.n	8005a5e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d125      	bne.n	8005a24 <PCD_EP_ISR_Handler+0x640>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2250      	movs	r2, #80	; 0x50
 80059e4:	5a9b      	ldrh	r3, [r3, r2]
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	001a      	movs	r2, r3
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	189b      	adds	r3, r3, r2
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
 80059f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	00da      	lsls	r2, r3, #3
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	18d3      	adds	r3, r2, r3
 80059fa:	4a33      	ldr	r2, [pc, #204]	; (8005ac8 <PCD_EP_ISR_Handler+0x6e4>)
 80059fc:	4694      	mov	ip, r2
 80059fe:	4463      	add	r3, ip
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	059b      	lsls	r3, r3, #22
 8005a0a:	0d9b      	lsrs	r3, r3, #22
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	4a2d      	ldr	r2, [pc, #180]	; (8005ad0 <PCD_EP_ISR_Handler+0x6ec>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	801a      	strh	r2, [r3, #0]
 8005a22:	e070      	b.n	8005b06 <PCD_EP_ISR_Handler+0x722>
 8005a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a26:	785b      	ldrb	r3, [r3, #1]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d16c      	bne.n	8005b06 <PCD_EP_ISR_Handler+0x722>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2250      	movs	r2, #80	; 0x50
 8005a38:	5a9b      	ldrh	r3, [r3, r2]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	001a      	movs	r2, r3
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	189b      	adds	r3, r3, r2
 8005a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	00da      	lsls	r2, r3, #3
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	18d3      	adds	r3, r2, r3
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <PCD_EP_ISR_Handler+0x6e4>)
 8005a50:	4694      	mov	ip, r2
 8005a52:	4463      	add	r3, ip
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	2200      	movs	r2, #0
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e053      	b.n	8005b06 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d133      	bne.n	8005ad4 <PCD_EP_ISR_Handler+0x6f0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	637b      	str	r3, [r7, #52]	; 0x34
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2250      	movs	r2, #80	; 0x50
 8005a78:	5a9b      	ldrh	r3, [r3, r2]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	001a      	movs	r2, r3
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	189b      	adds	r3, r3, r2
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
 8005a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	00da      	lsls	r2, r3, #3
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	18d3      	adds	r3, r2, r3
 8005a8e:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <PCD_EP_ISR_Handler+0x6d8>)
 8005a90:	4694      	mov	ip, r2
 8005a92:	4463      	add	r3, ip
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	059b      	lsls	r3, r3, #22
 8005a9e:	0d9b      	lsrs	r3, r3, #22
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <PCD_EP_ISR_Handler+0x6ec>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e026      	b.n	8005b06 <PCD_EP_ISR_Handler+0x722>
 8005ab8:	00000f8f 	.word	0x00000f8f
 8005abc:	00000406 	.word	0x00000406
 8005ac0:	ffff8f8f 	.word	0xffff8f8f
 8005ac4:	ffff80c0 	.word	0xffff80c0
 8005ac8:	00000402 	.word	0x00000402
 8005acc:	ffff8f0f 	.word	0xffff8f0f
 8005ad0:	ffff8000 	.word	0xffff8000
 8005ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d114      	bne.n	8005b06 <PCD_EP_ISR_Handler+0x722>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2250      	movs	r2, #80	; 0x50
 8005ae2:	5a9b      	ldrh	r3, [r3, r2]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	001a      	movs	r2, r3
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aea:	189b      	adds	r3, r3, r2
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	00da      	lsls	r2, r3, #3
 8005af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af6:	18d3      	adds	r3, r2, r3
 8005af8:	4a3b      	ldr	r2, [pc, #236]	; (8005be8 <PCD_EP_ISR_Handler+0x804>)
 8005afa:	4694      	mov	ip, r2
 8005afc:	4463      	add	r3, ip
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	2200      	movs	r2, #0
 8005b04:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b08:	781a      	ldrb	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	0011      	movs	r1, r2
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f005 fd34 	bl	800b57c <HAL_PCD_DataInStageCallback>
 8005b14:	e058      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005b16:	234a      	movs	r3, #74	; 0x4a
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	2380      	movs	r3, #128	; 0x80
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	4013      	ands	r3, r2
 8005b22:	d149      	bne.n	8005bb8 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2250      	movs	r2, #80	; 0x50
 8005b2a:	5a9b      	ldrh	r3, [r3, r2]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	001a      	movs	r2, r3
 8005b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	00db      	lsls	r3, r3, #3
 8005b36:	18d2      	adds	r2, r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	18d3      	adds	r3, r2, r3
 8005b3e:	4a2b      	ldr	r2, [pc, #172]	; (8005bec <PCD_EP_ISR_Handler+0x808>)
 8005b40:	4694      	mov	ip, r2
 8005b42:	4463      	add	r3, ip
 8005b44:	881a      	ldrh	r2, [r3, #0]
 8005b46:	2140      	movs	r1, #64	; 0x40
 8005b48:	187b      	adds	r3, r7, r1
 8005b4a:	0592      	lsls	r2, r2, #22
 8005b4c:	0d92      	lsrs	r2, r2, #22
 8005b4e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8005b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b52:	699a      	ldr	r2, [r3, #24]
 8005b54:	187b      	adds	r3, r7, r1
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d907      	bls.n	8005b6c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8005b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	187b      	adds	r3, r7, r1
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	1ad2      	subs	r2, r2, r3
 8005b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b68:	619a      	str	r2, [r3, #24]
 8005b6a:	e002      	b.n	8005b72 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8005b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6e:	2200      	movs	r2, #0
 8005b70:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	0011      	movs	r1, r2
 8005b82:	0018      	movs	r0, r3
 8005b84:	f005 fcfa 	bl	800b57c <HAL_PCD_DataInStageCallback>
 8005b88:	e01e      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8c:	695a      	ldr	r2, [r3, #20]
 8005b8e:	2140      	movs	r1, #64	; 0x40
 8005b90:	187b      	adds	r3, r7, r1
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	18d2      	adds	r2, r2, r3
 8005b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b98:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	187b      	adds	r3, r7, r1
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	18d2      	adds	r2, r2, r3
 8005ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bae:	0011      	movs	r1, r2
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f002 fb01 	bl	80081b8 <USB_EPStartXfer>
 8005bb6:	e007      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005bb8:	234a      	movs	r3, #74	; 0x4a
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	881a      	ldrh	r2, [r3, #0]
 8005bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f000 f930 	bl	8005e28 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2244      	movs	r2, #68	; 0x44
 8005bce:	5a9b      	ldrh	r3, [r3, r2]
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	b21b      	sxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da01      	bge.n	8005bdc <PCD_EP_ISR_Handler+0x7f8>
 8005bd8:	f7ff fc0a 	bl	80053f0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	0018      	movs	r0, r3
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b016      	add	sp, #88	; 0x58
 8005be4:	bdb0      	pop	{r4, r5, r7, pc}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	00000406 	.word	0x00000406
 8005bec:	00000402 	.word	0x00000402

08005bf0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b089      	sub	sp, #36	; 0x24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	1dbb      	adds	r3, r7, #6
 8005bfc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005bfe:	1dbb      	adds	r3, r7, #6
 8005c00:	881a      	ldrh	r2, [r3, #0]
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	01db      	lsls	r3, r3, #7
 8005c06:	4013      	ands	r3, r2
 8005c08:	d100      	bne.n	8005c0c <HAL_PCD_EP_DB_Receive+0x1c>
 8005c0a:	e07d      	b.n	8005d08 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2250      	movs	r2, #80	; 0x50
 8005c12:	5a9b      	ldrh	r3, [r3, r2]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	001a      	movs	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	18d2      	adds	r2, r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	18d3      	adds	r3, r2, r3
 8005c26:	4a7a      	ldr	r2, [pc, #488]	; (8005e10 <HAL_PCD_EP_DB_Receive+0x220>)
 8005c28:	4694      	mov	ip, r2
 8005c2a:	4463      	add	r3, ip
 8005c2c:	881a      	ldrh	r2, [r3, #0]
 8005c2e:	211a      	movs	r1, #26
 8005c30:	187b      	adds	r3, r7, r1
 8005c32:	0592      	lsls	r2, r2, #22
 8005c34:	0d92      	lsrs	r2, r2, #22
 8005c36:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	187b      	adds	r3, r7, r1
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d307      	bcc.n	8005c54 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	699a      	ldr	r2, [r3, #24]
 8005c48:	187b      	adds	r3, r7, r1
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	1ad2      	subs	r2, r2, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	619a      	str	r2, [r3, #24]
 8005c52:	e002      	b.n	8005c5a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d121      	bne.n	8005ca6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	001a      	movs	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	18d3      	adds	r3, r2, r3
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	2018      	movs	r0, #24
 8005c76:	183b      	adds	r3, r7, r0
 8005c78:	4966      	ldr	r1, [pc, #408]	; (8005e14 <HAL_PCD_EP_DB_Receive+0x224>)
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	183b      	adds	r3, r7, r0
 8005c80:	183a      	adds	r2, r7, r0
 8005c82:	8812      	ldrh	r2, [r2, #0]
 8005c84:	2180      	movs	r1, #128	; 0x80
 8005c86:	0189      	lsls	r1, r1, #6
 8005c88:	404a      	eors	r2, r1
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	001a      	movs	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	18d3      	adds	r3, r2, r3
 8005c9a:	183a      	adds	r2, r7, r0
 8005c9c:	8812      	ldrh	r2, [r2, #0]
 8005c9e:	495e      	ldr	r1, [pc, #376]	; (8005e18 <HAL_PCD_EP_DB_Receive+0x228>)
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	b292      	uxth	r2, r2
 8005ca4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ca6:	1dbb      	adds	r3, r7, #6
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	2240      	movs	r2, #64	; 0x40
 8005cac:	4013      	ands	r3, r2
 8005cae:	d01a      	beq.n	8005ce6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	001a      	movs	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	18d3      	adds	r3, r2, r3
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	2016      	movs	r0, #22
 8005cc4:	183b      	adds	r3, r7, r0
 8005cc6:	4955      	ldr	r1, [pc, #340]	; (8005e1c <HAL_PCD_EP_DB_Receive+0x22c>)
 8005cc8:	400a      	ands	r2, r1
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	18d3      	adds	r3, r2, r3
 8005cda:	183a      	adds	r2, r7, r0
 8005cdc:	8812      	ldrh	r2, [r2, #0]
 8005cde:	4950      	ldr	r1, [pc, #320]	; (8005e20 <HAL_PCD_EP_DB_Receive+0x230>)
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005ce6:	241a      	movs	r4, #26
 8005ce8:	193b      	adds	r3, r7, r4
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d100      	bne.n	8005cf2 <HAL_PCD_EP_DB_Receive+0x102>
 8005cf0:	e086      	b.n	8005e00 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6959      	ldr	r1, [r3, #20]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	891a      	ldrh	r2, [r3, #8]
 8005cfe:	193b      	adds	r3, r7, r4
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	f003 fd14 	bl	800972e <USB_ReadPMA>
 8005d06:	e07b      	b.n	8005e00 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2250      	movs	r2, #80	; 0x50
 8005d0e:	5a9b      	ldrh	r3, [r3, r2]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	001a      	movs	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	18d2      	adds	r2, r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	18d3      	adds	r3, r2, r3
 8005d22:	4a40      	ldr	r2, [pc, #256]	; (8005e24 <HAL_PCD_EP_DB_Receive+0x234>)
 8005d24:	4694      	mov	ip, r2
 8005d26:	4463      	add	r3, ip
 8005d28:	881a      	ldrh	r2, [r3, #0]
 8005d2a:	211a      	movs	r1, #26
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	0592      	lsls	r2, r2, #22
 8005d30:	0d92      	lsrs	r2, r2, #22
 8005d32:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	699a      	ldr	r2, [r3, #24]
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d307      	bcc.n	8005d50 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	1ad2      	subs	r2, r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	619a      	str	r2, [r3, #24]
 8005d4e:	e002      	b.n	8005d56 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d121      	bne.n	8005da2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	001a      	movs	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	18d3      	adds	r3, r2, r3
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	201e      	movs	r0, #30
 8005d72:	183b      	adds	r3, r7, r0
 8005d74:	4927      	ldr	r1, [pc, #156]	; (8005e14 <HAL_PCD_EP_DB_Receive+0x224>)
 8005d76:	400a      	ands	r2, r1
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	183b      	adds	r3, r7, r0
 8005d7c:	183a      	adds	r2, r7, r0
 8005d7e:	8812      	ldrh	r2, [r2, #0]
 8005d80:	2180      	movs	r1, #128	; 0x80
 8005d82:	0189      	lsls	r1, r1, #6
 8005d84:	404a      	eors	r2, r1
 8005d86:	801a      	strh	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	001a      	movs	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	18d3      	adds	r3, r2, r3
 8005d96:	183a      	adds	r2, r7, r0
 8005d98:	8812      	ldrh	r2, [r2, #0]
 8005d9a:	491f      	ldr	r1, [pc, #124]	; (8005e18 <HAL_PCD_EP_DB_Receive+0x228>)
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	b292      	uxth	r2, r2
 8005da0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005da2:	1dbb      	adds	r3, r7, #6
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	2240      	movs	r2, #64	; 0x40
 8005da8:	4013      	ands	r3, r2
 8005daa:	d11a      	bne.n	8005de2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	001a      	movs	r2, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	18d3      	adds	r3, r2, r3
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	201c      	movs	r0, #28
 8005dc0:	183b      	adds	r3, r7, r0
 8005dc2:	4916      	ldr	r1, [pc, #88]	; (8005e1c <HAL_PCD_EP_DB_Receive+0x22c>)
 8005dc4:	400a      	ands	r2, r1
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	001a      	movs	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	18d3      	adds	r3, r2, r3
 8005dd6:	183a      	adds	r2, r7, r0
 8005dd8:	8812      	ldrh	r2, [r2, #0]
 8005dda:	4911      	ldr	r1, [pc, #68]	; (8005e20 <HAL_PCD_EP_DB_Receive+0x230>)
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	b292      	uxth	r2, r2
 8005de0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005de2:	241a      	movs	r4, #26
 8005de4:	193b      	adds	r3, r7, r4
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d009      	beq.n	8005e00 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6959      	ldr	r1, [r3, #20]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	895a      	ldrh	r2, [r3, #10]
 8005df8:	193b      	adds	r3, r7, r4
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	f003 fc97 	bl	800972e <USB_ReadPMA>
    }
  }

  return count;
 8005e00:	231a      	movs	r3, #26
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	881b      	ldrh	r3, [r3, #0]
}
 8005e06:	0018      	movs	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b009      	add	sp, #36	; 0x24
 8005e0c:	bd90      	pop	{r4, r7, pc}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	00000402 	.word	0x00000402
 8005e14:	ffffbf8f 	.word	0xffffbf8f
 8005e18:	ffff8080 	.word	0xffff8080
 8005e1c:	ffff8f8f 	.word	0xffff8f8f
 8005e20:	ffff80c0 	.word	0xffff80c0
 8005e24:	00000406 	.word	0x00000406

08005e28 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b0a4      	sub	sp, #144	; 0x90
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	1dbb      	adds	r3, r7, #6
 8005e34:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e36:	1dbb      	adds	r3, r7, #6
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	2240      	movs	r2, #64	; 0x40
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d100      	bne.n	8005e42 <HAL_PCD_EP_DB_Transmit+0x1a>
 8005e40:	e1e4      	b.n	800620c <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2250      	movs	r2, #80	; 0x50
 8005e48:	5a9b      	ldrh	r3, [r3, r2]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	001a      	movs	r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	18d2      	adds	r2, r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	18d3      	adds	r3, r2, r3
 8005e5c:	4ad0      	ldr	r2, [pc, #832]	; (80061a0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005e5e:	4694      	mov	ip, r2
 8005e60:	4463      	add	r3, ip
 8005e62:	881a      	ldrh	r2, [r3, #0]
 8005e64:	2186      	movs	r1, #134	; 0x86
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	0592      	lsls	r2, r2, #22
 8005e6a:	0d92      	lsrs	r2, r2, #22
 8005e6c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	699a      	ldr	r2, [r3, #24]
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d907      	bls.n	8005e8a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	187b      	adds	r3, r7, r1
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	619a      	str	r2, [r3, #24]
 8005e88:	e002      	b.n	8005e90 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d000      	beq.n	8005e9a <HAL_PCD_EP_DB_Transmit+0x72>
 8005e98:	e0b5      	b.n	8006006 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d125      	bne.n	8005eee <HAL_PCD_EP_DB_Transmit+0xc6>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2250      	movs	r2, #80	; 0x50
 8005eae:	5a9b      	ldrh	r3, [r3, r2]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	001a      	movs	r2, r3
 8005eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb6:	189b      	adds	r3, r3, r2
 8005eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	00da      	lsls	r2, r3, #3
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	18d3      	adds	r3, r2, r3
 8005ec4:	4ab6      	ldr	r2, [pc, #728]	; (80061a0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005ec6:	4694      	mov	ip, r2
 8005ec8:	4463      	add	r3, ip
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	059b      	lsls	r3, r3, #22
 8005ed4:	0d9b      	lsrs	r3, r3, #22
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	4ab0      	ldr	r2, [pc, #704]	; (80061a4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	e01b      	b.n	8005f26 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d117      	bne.n	8005f26 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2250      	movs	r2, #80	; 0x50
 8005f02:	5a9b      	ldrh	r3, [r3, r2]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	001a      	movs	r2, r3
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	189b      	adds	r3, r3, r2
 8005f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	00da      	lsls	r2, r3, #3
 8005f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f16:	18d3      	adds	r3, r2, r3
 8005f18:	4aa1      	ldr	r2, [pc, #644]	; (80061a0 <HAL_PCD_EP_DB_Transmit+0x378>)
 8005f1a:	4694      	mov	ip, r2
 8005f1c:	4463      	add	r3, ip
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	2200      	movs	r2, #0
 8005f24:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d125      	bne.n	8005f80 <HAL_PCD_EP_DB_Transmit+0x158>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2250      	movs	r2, #80	; 0x50
 8005f40:	5a9b      	ldrh	r3, [r3, r2]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	001a      	movs	r2, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	189b      	adds	r3, r3, r2
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	00da      	lsls	r2, r3, #3
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	18d3      	adds	r3, r2, r3
 8005f56:	4a94      	ldr	r2, [pc, #592]	; (80061a8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005f58:	4694      	mov	ip, r2
 8005f5a:	4463      	add	r3, ip
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	059b      	lsls	r3, r3, #22
 8005f66:	0d9b      	lsrs	r3, r3, #22
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	801a      	strh	r2, [r3, #0]
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	4a8b      	ldr	r2, [pc, #556]	; (80061a4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	e018      	b.n	8005fb2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d114      	bne.n	8005fb2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2250      	movs	r2, #80	; 0x50
 8005f8e:	5a9b      	ldrh	r3, [r3, r2]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	001a      	movs	r2, r3
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	189b      	adds	r3, r3, r2
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	00da      	lsls	r2, r3, #3
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	18d3      	adds	r3, r2, r3
 8005fa4:	4a80      	ldr	r2, [pc, #512]	; (80061a8 <HAL_PCD_EP_DB_Transmit+0x380>)
 8005fa6:	4694      	mov	ip, r2
 8005fa8:	4463      	add	r3, ip
 8005faa:	623b      	str	r3, [r7, #32]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781a      	ldrb	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	0011      	movs	r1, r2
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f005 fade 	bl	800b57c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005fc0:	1dbb      	adds	r3, r7, #6
 8005fc2:	881a      	ldrh	r2, [r3, #0]
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	01db      	lsls	r3, r3, #7
 8005fc8:	4013      	ands	r3, r2
 8005fca:	d100      	bne.n	8005fce <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005fcc:	e309      	b.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	001a      	movs	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	18d3      	adds	r3, r2, r3
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	2016      	movs	r0, #22
 8005fe2:	183b      	adds	r3, r7, r0
 8005fe4:	4971      	ldr	r1, [pc, #452]	; (80061ac <HAL_PCD_EP_DB_Transmit+0x384>)
 8005fe6:	400a      	ands	r2, r1
 8005fe8:	801a      	strh	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	001a      	movs	r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	18d3      	adds	r3, r2, r3
 8005ff8:	183a      	adds	r2, r7, r0
 8005ffa:	8812      	ldrh	r2, [r2, #0]
 8005ffc:	496c      	ldr	r1, [pc, #432]	; (80061b0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8005ffe:	430a      	orrs	r2, r1
 8006000:	b292      	uxth	r2, r2
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e2ed      	b.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006006:	1dbb      	adds	r3, r7, #6
 8006008:	881a      	ldrh	r2, [r3, #0]
 800600a:	2380      	movs	r3, #128	; 0x80
 800600c:	01db      	lsls	r3, r3, #7
 800600e:	4013      	ands	r3, r2
 8006010:	d01a      	beq.n	8006048 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	001a      	movs	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	18d3      	adds	r3, r2, r3
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	b29a      	uxth	r2, r3
 8006024:	208a      	movs	r0, #138	; 0x8a
 8006026:	183b      	adds	r3, r7, r0
 8006028:	4960      	ldr	r1, [pc, #384]	; (80061ac <HAL_PCD_EP_DB_Transmit+0x384>)
 800602a:	400a      	ands	r2, r1
 800602c:	801a      	strh	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	001a      	movs	r2, r3
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	18d3      	adds	r3, r2, r3
 800603c:	183a      	adds	r2, r7, r0
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	495b      	ldr	r1, [pc, #364]	; (80061b0 <HAL_PCD_EP_DB_Transmit+0x388>)
 8006042:	430a      	orrs	r2, r1
 8006044:	b292      	uxth	r2, r2
 8006046:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2224      	movs	r2, #36	; 0x24
 800604c:	5c9b      	ldrb	r3, [r3, r2]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d000      	beq.n	8006054 <HAL_PCD_EP_DB_Transmit+0x22c>
 8006052:	e2c6      	b.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	695a      	ldr	r2, [r3, #20]
 8006058:	2186      	movs	r1, #134	; 0x86
 800605a:	187b      	adds	r3, r7, r1
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	18d2      	adds	r2, r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	187b      	adds	r3, r7, r1
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	18d2      	adds	r2, r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6a1a      	ldr	r2, [r3, #32]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	d30c      	bcc.n	8006098 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	218c      	movs	r1, #140	; 0x8c
 8006084:	187a      	adds	r2, r7, r1
 8006086:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6a1a      	ldr	r2, [r3, #32]
 800608c:	187b      	adds	r3, r7, r1
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	1ad2      	subs	r2, r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	621a      	str	r2, [r3, #32]
 8006096:	e01a      	b.n	80060ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80060a0:	2386      	movs	r3, #134	; 0x86
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	228c      	movs	r2, #140	; 0x8c
 80060a8:	18ba      	adds	r2, r7, r2
 80060aa:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2224      	movs	r2, #36	; 0x24
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]
 80060b4:	e00b      	b.n	80060ce <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2224      	movs	r2, #36	; 0x24
 80060ba:	2100      	movs	r1, #0
 80060bc:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	228c      	movs	r2, #140	; 0x8c
 80060c4:	18ba      	adds	r2, r7, r2
 80060c6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d000      	beq.n	80060d8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80060d6:	e06d      	b.n	80061b4 <HAL_PCD_EP_DB_Transmit+0x38c>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2250      	movs	r2, #80	; 0x50
 80060e4:	5a9b      	ldrh	r3, [r3, r2]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	001a      	movs	r2, r3
 80060ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ec:	189b      	adds	r3, r3, r2
 80060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	00da      	lsls	r2, r3, #3
 80060f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f8:	18d3      	adds	r3, r2, r3
 80060fa:	4a29      	ldr	r2, [pc, #164]	; (80061a0 <HAL_PCD_EP_DB_Transmit+0x378>)
 80060fc:	4694      	mov	ip, r2
 80060fe:	4463      	add	r3, ip
 8006100:	63bb      	str	r3, [r7, #56]	; 0x38
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	059b      	lsls	r3, r3, #22
 800610a:	0d9b      	lsrs	r3, r3, #22
 800610c:	b29a      	uxth	r2, r3
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	228c      	movs	r2, #140	; 0x8c
 8006114:	18bb      	adds	r3, r7, r2
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b3e      	cmp	r3, #62	; 0x3e
 800611a:	d91a      	bls.n	8006152 <HAL_PCD_EP_DB_Transmit+0x32a>
 800611c:	18bb      	adds	r3, r7, r2
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	64bb      	str	r3, [r7, #72]	; 0x48
 8006124:	18bb      	adds	r3, r7, r2
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	221f      	movs	r2, #31
 800612a:	4013      	ands	r3, r2
 800612c:	d102      	bne.n	8006134 <HAL_PCD_EP_DB_Transmit+0x30c>
 800612e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006130:	3b01      	subs	r3, #1
 8006132:	64bb      	str	r3, [r7, #72]	; 0x48
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b29a      	uxth	r2, r3
 800613a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613c:	b29b      	uxth	r3, r3
 800613e:	029b      	lsls	r3, r3, #10
 8006140:	b29b      	uxth	r3, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	b29b      	uxth	r3, r3
 8006146:	4a17      	ldr	r2, [pc, #92]	; (80061a4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006148:	4313      	orrs	r3, r2
 800614a:	b29a      	uxth	r2, r3
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	e04f      	b.n	80061f2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8006152:	238c      	movs	r3, #140	; 0x8c
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d108      	bne.n	800616e <HAL_PCD_EP_DB_Transmit+0x346>
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	4a10      	ldr	r2, [pc, #64]	; (80061a4 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8006164:	4313      	orrs	r3, r2
 8006166:	b29a      	uxth	r2, r3
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	e041      	b.n	80061f2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800616e:	228c      	movs	r2, #140	; 0x8c
 8006170:	18bb      	adds	r3, r7, r2
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	085b      	lsrs	r3, r3, #1
 8006176:	64bb      	str	r3, [r7, #72]	; 0x48
 8006178:	18bb      	adds	r3, r7, r2
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2201      	movs	r2, #1
 800617e:	4013      	ands	r3, r2
 8006180:	d002      	beq.n	8006188 <HAL_PCD_EP_DB_Transmit+0x360>
 8006182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006184:	3301      	adds	r3, #1
 8006186:	64bb      	str	r3, [r7, #72]	; 0x48
 8006188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29a      	uxth	r2, r3
 800618e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006190:	b29b      	uxth	r3, r3
 8006192:	029b      	lsls	r3, r3, #10
 8006194:	b29b      	uxth	r3, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	b29a      	uxth	r2, r3
 800619a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e028      	b.n	80061f2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80061a0:	00000402 	.word	0x00000402
 80061a4:	ffff8000 	.word	0xffff8000
 80061a8:	00000406 	.word	0x00000406
 80061ac:	ffff8f8f 	.word	0xffff8f8f
 80061b0:	ffffc080 	.word	0xffffc080
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	785b      	ldrb	r3, [r3, #1]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d11a      	bne.n	80061f2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	647b      	str	r3, [r7, #68]	; 0x44
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2250      	movs	r2, #80	; 0x50
 80061c8:	5a9b      	ldrh	r3, [r3, r2]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	001a      	movs	r2, r3
 80061ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061d0:	189b      	adds	r3, r3, r2
 80061d2:	647b      	str	r3, [r7, #68]	; 0x44
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	00da      	lsls	r2, r3, #3
 80061da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061dc:	18d3      	adds	r3, r2, r3
 80061de:	4adb      	ldr	r2, [pc, #876]	; (800654c <HAL_PCD_EP_DB_Transmit+0x724>)
 80061e0:	4694      	mov	ip, r2
 80061e2:	4463      	add	r3, ip
 80061e4:	643b      	str	r3, [r7, #64]	; 0x40
 80061e6:	238c      	movs	r3, #140	; 0x8c
 80061e8:	18fb      	adds	r3, r7, r3
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	6959      	ldr	r1, [r3, #20]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	891a      	ldrh	r2, [r3, #8]
 80061fe:	238c      	movs	r3, #140	; 0x8c
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f003 fa49 	bl	800969c <USB_WritePMA>
 800620a:	e1ea      	b.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2250      	movs	r2, #80	; 0x50
 8006212:	5a9b      	ldrh	r3, [r3, r2]
 8006214:	b29b      	uxth	r3, r3
 8006216:	001a      	movs	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	18d2      	adds	r2, r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	18d3      	adds	r3, r2, r3
 8006226:	4aca      	ldr	r2, [pc, #808]	; (8006550 <HAL_PCD_EP_DB_Transmit+0x728>)
 8006228:	4694      	mov	ip, r2
 800622a:	4463      	add	r3, ip
 800622c:	881a      	ldrh	r2, [r3, #0]
 800622e:	2186      	movs	r1, #134	; 0x86
 8006230:	187b      	adds	r3, r7, r1
 8006232:	0592      	lsls	r2, r2, #22
 8006234:	0d92      	lsrs	r2, r2, #22
 8006236:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	699a      	ldr	r2, [r3, #24]
 800623c:	187b      	adds	r3, r7, r1
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d307      	bcc.n	8006254 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	699a      	ldr	r2, [r3, #24]
 8006248:	187b      	adds	r3, r7, r1
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	1ad2      	subs	r2, r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	619a      	str	r2, [r3, #24]
 8006252:	e002      	b.n	800625a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d000      	beq.n	8006264 <HAL_PCD_EP_DB_Transmit+0x43c>
 8006262:	e0bb      	b.n	80063dc <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d125      	bne.n	80062b8 <HAL_PCD_EP_DB_Transmit+0x490>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2250      	movs	r2, #80	; 0x50
 8006278:	5a9b      	ldrh	r3, [r3, r2]
 800627a:	b29b      	uxth	r3, r3
 800627c:	001a      	movs	r2, r3
 800627e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006280:	189b      	adds	r3, r3, r2
 8006282:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	00da      	lsls	r2, r3, #3
 800628a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800628c:	18d3      	adds	r3, r2, r3
 800628e:	4aaf      	ldr	r2, [pc, #700]	; (800654c <HAL_PCD_EP_DB_Transmit+0x724>)
 8006290:	4694      	mov	ip, r2
 8006292:	4463      	add	r3, ip
 8006294:	67bb      	str	r3, [r7, #120]	; 0x78
 8006296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	b29b      	uxth	r3, r3
 800629c:	059b      	lsls	r3, r3, #22
 800629e:	0d9b      	lsrs	r3, r3, #22
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4aa9      	ldr	r2, [pc, #676]	; (8006554 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	e01b      	b.n	80062f0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d117      	bne.n	80062f0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	667b      	str	r3, [r7, #100]	; 0x64
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2250      	movs	r2, #80	; 0x50
 80062cc:	5a9b      	ldrh	r3, [r3, r2]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	001a      	movs	r2, r3
 80062d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	667b      	str	r3, [r7, #100]	; 0x64
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	00da      	lsls	r2, r3, #3
 80062de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062e0:	18d3      	adds	r3, r2, r3
 80062e2:	4a9a      	ldr	r2, [pc, #616]	; (800654c <HAL_PCD_EP_DB_Transmit+0x724>)
 80062e4:	4694      	mov	ip, r2
 80062e6:	4463      	add	r3, ip
 80062e8:	663b      	str	r3, [r7, #96]	; 0x60
 80062ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ec:	2200      	movs	r2, #0
 80062ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	677b      	str	r3, [r7, #116]	; 0x74
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d12b      	bne.n	8006356 <HAL_PCD_EP_DB_Transmit+0x52e>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2250      	movs	r2, #80	; 0x50
 800630a:	5a9b      	ldrh	r3, [r3, r2]
 800630c:	b29b      	uxth	r3, r3
 800630e:	001a      	movs	r2, r3
 8006310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006312:	189b      	adds	r3, r3, r2
 8006314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	00da      	lsls	r2, r3, #3
 800631c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800631e:	18d3      	adds	r3, r2, r3
 8006320:	4a8b      	ldr	r2, [pc, #556]	; (8006550 <HAL_PCD_EP_DB_Transmit+0x728>)
 8006322:	4694      	mov	ip, r2
 8006324:	4463      	add	r3, ip
 8006326:	2180      	movs	r1, #128	; 0x80
 8006328:	187a      	adds	r2, r7, r1
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	187b      	adds	r3, r7, r1
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	059b      	lsls	r3, r3, #22
 8006336:	0d9b      	lsrs	r3, r3, #22
 8006338:	b29a      	uxth	r2, r3
 800633a:	187b      	adds	r3, r7, r1
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	187b      	adds	r3, r7, r1
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	4a82      	ldr	r2, [pc, #520]	; (8006554 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800634a:	4313      	orrs	r3, r2
 800634c:	b29a      	uxth	r2, r3
 800634e:	187b      	adds	r3, r7, r1
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	801a      	strh	r2, [r3, #0]
 8006354:	e018      	b.n	8006388 <HAL_PCD_EP_DB_Transmit+0x560>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	785b      	ldrb	r3, [r3, #1]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d114      	bne.n	8006388 <HAL_PCD_EP_DB_Transmit+0x560>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2250      	movs	r2, #80	; 0x50
 8006364:	5a9b      	ldrh	r3, [r3, r2]
 8006366:	b29b      	uxth	r3, r3
 8006368:	001a      	movs	r2, r3
 800636a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636c:	189b      	adds	r3, r3, r2
 800636e:	677b      	str	r3, [r7, #116]	; 0x74
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	00da      	lsls	r2, r3, #3
 8006376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006378:	18d3      	adds	r3, r2, r3
 800637a:	4a75      	ldr	r2, [pc, #468]	; (8006550 <HAL_PCD_EP_DB_Transmit+0x728>)
 800637c:	4694      	mov	ip, r2
 800637e:	4463      	add	r3, ip
 8006380:	673b      	str	r3, [r7, #112]	; 0x70
 8006382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006384:	2200      	movs	r2, #0
 8006386:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	781a      	ldrb	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	0011      	movs	r1, r2
 8006390:	0018      	movs	r0, r3
 8006392:	f005 f8f3 	bl	800b57c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006396:	1dbb      	adds	r3, r7, #6
 8006398:	881a      	ldrh	r2, [r3, #0]
 800639a:	2380      	movs	r3, #128	; 0x80
 800639c:	01db      	lsls	r3, r3, #7
 800639e:	4013      	ands	r3, r2
 80063a0:	d000      	beq.n	80063a4 <HAL_PCD_EP_DB_Transmit+0x57c>
 80063a2:	e11e      	b.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	001a      	movs	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	18d3      	adds	r3, r2, r3
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	2088      	movs	r0, #136	; 0x88
 80063b8:	183b      	adds	r3, r7, r0
 80063ba:	4967      	ldr	r1, [pc, #412]	; (8006558 <HAL_PCD_EP_DB_Transmit+0x730>)
 80063bc:	400a      	ands	r2, r1
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	001a      	movs	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	18d3      	adds	r3, r2, r3
 80063ce:	183a      	adds	r2, r7, r0
 80063d0:	8812      	ldrh	r2, [r2, #0]
 80063d2:	4962      	ldr	r1, [pc, #392]	; (800655c <HAL_PCD_EP_DB_Transmit+0x734>)
 80063d4:	430a      	orrs	r2, r1
 80063d6:	b292      	uxth	r2, r2
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	e102      	b.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80063dc:	1dbb      	adds	r3, r7, #6
 80063de:	881a      	ldrh	r2, [r3, #0]
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	4013      	ands	r3, r2
 80063e6:	d11a      	bne.n	800641e <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	001a      	movs	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	18d3      	adds	r3, r2, r3
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	204e      	movs	r0, #78	; 0x4e
 80063fc:	183b      	adds	r3, r7, r0
 80063fe:	4956      	ldr	r1, [pc, #344]	; (8006558 <HAL_PCD_EP_DB_Transmit+0x730>)
 8006400:	400a      	ands	r2, r1
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	001a      	movs	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	18d3      	adds	r3, r2, r3
 8006412:	183a      	adds	r2, r7, r0
 8006414:	8812      	ldrh	r2, [r2, #0]
 8006416:	4951      	ldr	r1, [pc, #324]	; (800655c <HAL_PCD_EP_DB_Transmit+0x734>)
 8006418:	430a      	orrs	r2, r1
 800641a:	b292      	uxth	r2, r2
 800641c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2224      	movs	r2, #36	; 0x24
 8006422:	5c9b      	ldrb	r3, [r3, r2]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d000      	beq.n	800642a <HAL_PCD_EP_DB_Transmit+0x602>
 8006428:	e0db      	b.n	80065e2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	2186      	movs	r1, #134	; 0x86
 8006430:	187b      	adds	r3, r7, r1
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	18d2      	adds	r2, r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	69da      	ldr	r2, [r3, #28]
 800643e:	187b      	adds	r3, r7, r1
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	18d2      	adds	r2, r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	429a      	cmp	r2, r3
 8006452:	d30c      	bcc.n	800646e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	218c      	movs	r1, #140	; 0x8c
 800645a:	187a      	adds	r2, r7, r1
 800645c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	6a1a      	ldr	r2, [r3, #32]
 8006462:	187b      	adds	r3, r7, r1
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	621a      	str	r2, [r3, #32]
 800646c:	e01a      	b.n	80064a4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8006476:	2386      	movs	r3, #134	; 0x86
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	228c      	movs	r2, #140	; 0x8c
 800647e:	18ba      	adds	r2, r7, r2
 8006480:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2224      	movs	r2, #36	; 0x24
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]
 800648a:	e00b      	b.n	80064a4 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	228c      	movs	r2, #140	; 0x8c
 8006492:	18ba      	adds	r2, r7, r2
 8006494:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2200      	movs	r2, #0
 800649a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2224      	movs	r2, #36	; 0x24
 80064a0:	2100      	movs	r1, #0
 80064a2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	657b      	str	r3, [r7, #84]	; 0x54
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d000      	beq.n	80064b4 <HAL_PCD_EP_DB_Transmit+0x68c>
 80064b2:	e06e      	b.n	8006592 <HAL_PCD_EP_DB_Transmit+0x76a>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2250      	movs	r2, #80	; 0x50
 80064c0:	5a9b      	ldrh	r3, [r3, r2]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	001a      	movs	r2, r3
 80064c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c8:	189b      	adds	r3, r3, r2
 80064ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	00da      	lsls	r2, r3, #3
 80064d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d4:	18d3      	adds	r3, r2, r3
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <HAL_PCD_EP_DB_Transmit+0x728>)
 80064d8:	4694      	mov	ip, r2
 80064da:	4463      	add	r3, ip
 80064dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80064de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	059b      	lsls	r3, r3, #22
 80064e6:	0d9b      	lsrs	r3, r3, #22
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	228c      	movs	r2, #140	; 0x8c
 80064f0:	18bb      	adds	r3, r7, r2
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b3e      	cmp	r3, #62	; 0x3e
 80064f6:	d91a      	bls.n	800652e <HAL_PCD_EP_DB_Transmit+0x706>
 80064f8:	18bb      	adds	r3, r7, r2
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006500:	18bb      	adds	r3, r7, r2
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	221f      	movs	r2, #31
 8006506:	4013      	ands	r3, r2
 8006508:	d102      	bne.n	8006510 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800650a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800650c:	3b01      	subs	r3, #1
 800650e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29a      	uxth	r2, r3
 8006516:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006518:	b29b      	uxth	r3, r3
 800651a:	029b      	lsls	r3, r3, #10
 800651c:	b29b      	uxth	r3, r3
 800651e:	4313      	orrs	r3, r2
 8006520:	b29b      	uxth	r3, r3
 8006522:	4a0c      	ldr	r2, [pc, #48]	; (8006554 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006524:	4313      	orrs	r3, r2
 8006526:	b29a      	uxth	r2, r3
 8006528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	e04d      	b.n	80065ca <HAL_PCD_EP_DB_Transmit+0x7a2>
 800652e:	238c      	movs	r3, #140	; 0x8c
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d113      	bne.n	8006560 <HAL_PCD_EP_DB_Transmit+0x738>
 8006538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	b29b      	uxth	r3, r3
 800653e:	4a05      	ldr	r2, [pc, #20]	; (8006554 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8006540:	4313      	orrs	r3, r2
 8006542:	b29a      	uxth	r2, r3
 8006544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	e03f      	b.n	80065ca <HAL_PCD_EP_DB_Transmit+0x7a2>
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	00000402 	.word	0x00000402
 8006550:	00000406 	.word	0x00000406
 8006554:	ffff8000 	.word	0xffff8000
 8006558:	ffff8f8f 	.word	0xffff8f8f
 800655c:	ffffc080 	.word	0xffffc080
 8006560:	228c      	movs	r2, #140	; 0x8c
 8006562:	18bb      	adds	r3, r7, r2
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	085b      	lsrs	r3, r3, #1
 8006568:	66bb      	str	r3, [r7, #104]	; 0x68
 800656a:	18bb      	adds	r3, r7, r2
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2201      	movs	r2, #1
 8006570:	4013      	ands	r3, r2
 8006572:	d002      	beq.n	800657a <HAL_PCD_EP_DB_Transmit+0x752>
 8006574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006576:	3301      	adds	r3, #1
 8006578:	66bb      	str	r3, [r7, #104]	; 0x68
 800657a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29a      	uxth	r2, r3
 8006580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006582:	b29b      	uxth	r3, r3
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	b29b      	uxth	r3, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	b29a      	uxth	r2, r3
 800658c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800658e:	801a      	strh	r2, [r3, #0]
 8006590:	e01b      	b.n	80065ca <HAL_PCD_EP_DB_Transmit+0x7a2>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d117      	bne.n	80065ca <HAL_PCD_EP_DB_Transmit+0x7a2>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2250      	movs	r2, #80	; 0x50
 80065a0:	5a9b      	ldrh	r3, [r3, r2]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	001a      	movs	r2, r3
 80065a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a8:	189b      	adds	r3, r3, r2
 80065aa:	657b      	str	r3, [r7, #84]	; 0x54
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	00da      	lsls	r2, r3, #3
 80065b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b4:	18d3      	adds	r3, r2, r3
 80065b6:	4a21      	ldr	r2, [pc, #132]	; (800663c <HAL_PCD_EP_DB_Transmit+0x814>)
 80065b8:	4694      	mov	ip, r2
 80065ba:	4463      	add	r3, ip
 80065bc:	653b      	str	r3, [r7, #80]	; 0x50
 80065be:	238c      	movs	r3, #140	; 0x8c
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	6959      	ldr	r1, [r3, #20]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	895a      	ldrh	r2, [r3, #10]
 80065d6:	238c      	movs	r3, #140	; 0x8c
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f003 f85d 	bl	800969c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	001a      	movs	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	18d3      	adds	r3, r2, r3
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	2014      	movs	r0, #20
 80065f6:	183b      	adds	r3, r7, r0
 80065f8:	4911      	ldr	r1, [pc, #68]	; (8006640 <HAL_PCD_EP_DB_Transmit+0x818>)
 80065fa:	400a      	ands	r2, r1
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	183b      	adds	r3, r7, r0
 8006600:	183a      	adds	r2, r7, r0
 8006602:	8812      	ldrh	r2, [r2, #0]
 8006604:	2110      	movs	r1, #16
 8006606:	404a      	eors	r2, r1
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	183b      	adds	r3, r7, r0
 800660c:	183a      	adds	r2, r7, r0
 800660e:	8812      	ldrh	r2, [r2, #0]
 8006610:	2120      	movs	r1, #32
 8006612:	404a      	eors	r2, r1
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	001a      	movs	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	18d3      	adds	r3, r2, r3
 8006624:	183a      	adds	r2, r7, r0
 8006626:	8812      	ldrh	r2, [r2, #0]
 8006628:	4906      	ldr	r1, [pc, #24]	; (8006644 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800662a:	430a      	orrs	r2, r1
 800662c:	b292      	uxth	r2, r2
 800662e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	0018      	movs	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	b024      	add	sp, #144	; 0x90
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	00000406 	.word	0x00000406
 8006640:	ffff8fbf 	.word	0xffff8fbf
 8006644:	ffff8080 	.word	0xffff8080

08006648 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006648:	b590      	push	{r4, r7, lr}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	0008      	movs	r0, r1
 8006652:	0011      	movs	r1, r2
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	240a      	movs	r4, #10
 8006658:	193b      	adds	r3, r7, r4
 800665a:	1c02      	adds	r2, r0, #0
 800665c:	801a      	strh	r2, [r3, #0]
 800665e:	2308      	movs	r3, #8
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	1c0a      	adds	r2, r1, #0
 8006664:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006666:	0021      	movs	r1, r4
 8006668:	187b      	adds	r3, r7, r1
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	2280      	movs	r2, #128	; 0x80
 800666e:	4013      	ands	r3, r2
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00c      	beq.n	8006690 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006676:	187b      	adds	r3, r7, r1
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	2207      	movs	r2, #7
 800667c:	4013      	ands	r3, r2
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	0013      	movs	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	189b      	adds	r3, r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	18d3      	adds	r3, r2, r3
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	e00b      	b.n	80066a8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006690:	230a      	movs	r3, #10
 8006692:	18fb      	adds	r3, r7, r3
 8006694:	881a      	ldrh	r2, [r3, #0]
 8006696:	0013      	movs	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	189b      	adds	r3, r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	3369      	adds	r3, #105	; 0x69
 80066a0:	33ff      	adds	r3, #255	; 0xff
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	18d3      	adds	r3, r2, r3
 80066a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80066a8:	2308      	movs	r3, #8
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2200      	movs	r2, #0
 80066b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	80da      	strh	r2, [r3, #6]
 80066c0:	e00b      	b.n	80066da <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2201      	movs	r2, #1
 80066c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	0018      	movs	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	b007      	add	sp, #28
 80066e2:	bd90      	pop	{r4, r7, pc}

080066e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	23ba      	movs	r3, #186	; 0xba
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	2101      	movs	r1, #1
 80066fa:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	23b8      	movs	r3, #184	; 0xb8
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	2100      	movs	r1, #0
 8006704:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2254      	movs	r2, #84	; 0x54
 800670a:	5a9b      	ldrh	r3, [r3, r2]
 800670c:	b29b      	uxth	r3, r3
 800670e:	2201      	movs	r2, #1
 8006710:	4313      	orrs	r3, r2
 8006712:	b299      	uxth	r1, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2254      	movs	r2, #84	; 0x54
 8006718:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2254      	movs	r2, #84	; 0x54
 800671e:	5a9b      	ldrh	r3, [r3, r2]
 8006720:	b29b      	uxth	r3, r3
 8006722:	2202      	movs	r2, #2
 8006724:	4313      	orrs	r3, r2
 8006726:	b299      	uxth	r1, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2254      	movs	r2, #84	; 0x54
 800672c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	0018      	movs	r0, r3
 8006732:	46bd      	mov	sp, r7
 8006734:	b004      	add	sp, #16
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	000a      	movs	r2, r1
 8006742:	1cfb      	adds	r3, r7, #3
 8006744:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	46bd      	mov	sp, r7
 800674a:	b002      	add	sp, #8
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e305      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2201      	movs	r2, #1
 8006768:	4013      	ands	r3, r2
 800676a:	d100      	bne.n	800676e <HAL_RCC_OscConfig+0x1e>
 800676c:	e08d      	b.n	800688a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800676e:	4bc5      	ldr	r3, [pc, #788]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	220c      	movs	r2, #12
 8006774:	4013      	ands	r3, r2
 8006776:	2b04      	cmp	r3, #4
 8006778:	d00e      	beq.n	8006798 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800677a:	4bc2      	ldr	r3, [pc, #776]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	220c      	movs	r2, #12
 8006780:	4013      	ands	r3, r2
 8006782:	2b08      	cmp	r3, #8
 8006784:	d116      	bne.n	80067b4 <HAL_RCC_OscConfig+0x64>
 8006786:	4bbf      	ldr	r3, [pc, #764]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	23c0      	movs	r3, #192	; 0xc0
 800678c:	025b      	lsls	r3, r3, #9
 800678e:	401a      	ands	r2, r3
 8006790:	2380      	movs	r3, #128	; 0x80
 8006792:	025b      	lsls	r3, r3, #9
 8006794:	429a      	cmp	r2, r3
 8006796:	d10d      	bne.n	80067b4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006798:	4bba      	ldr	r3, [pc, #744]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	4013      	ands	r3, r2
 80067a2:	d100      	bne.n	80067a6 <HAL_RCC_OscConfig+0x56>
 80067a4:	e070      	b.n	8006888 <HAL_RCC_OscConfig+0x138>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d000      	beq.n	80067b0 <HAL_RCC_OscConfig+0x60>
 80067ae:	e06b      	b.n	8006888 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e2dc      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d107      	bne.n	80067cc <HAL_RCC_OscConfig+0x7c>
 80067bc:	4bb1      	ldr	r3, [pc, #708]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4bb0      	ldr	r3, [pc, #704]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80067c2:	2180      	movs	r1, #128	; 0x80
 80067c4:	0249      	lsls	r1, r1, #9
 80067c6:	430a      	orrs	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e02f      	b.n	800682c <HAL_RCC_OscConfig+0xdc>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10c      	bne.n	80067ee <HAL_RCC_OscConfig+0x9e>
 80067d4:	4bab      	ldr	r3, [pc, #684]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4baa      	ldr	r3, [pc, #680]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80067da:	49ab      	ldr	r1, [pc, #684]	; (8006a88 <HAL_RCC_OscConfig+0x338>)
 80067dc:	400a      	ands	r2, r1
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	4ba8      	ldr	r3, [pc, #672]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4ba7      	ldr	r3, [pc, #668]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80067e6:	49a9      	ldr	r1, [pc, #676]	; (8006a8c <HAL_RCC_OscConfig+0x33c>)
 80067e8:	400a      	ands	r2, r1
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e01e      	b.n	800682c <HAL_RCC_OscConfig+0xdc>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b05      	cmp	r3, #5
 80067f4:	d10e      	bne.n	8006814 <HAL_RCC_OscConfig+0xc4>
 80067f6:	4ba3      	ldr	r3, [pc, #652]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4ba2      	ldr	r3, [pc, #648]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80067fc:	2180      	movs	r1, #128	; 0x80
 80067fe:	02c9      	lsls	r1, r1, #11
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	4b9f      	ldr	r3, [pc, #636]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	4b9e      	ldr	r3, [pc, #632]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	0249      	lsls	r1, r1, #9
 800680e:	430a      	orrs	r2, r1
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	e00b      	b.n	800682c <HAL_RCC_OscConfig+0xdc>
 8006814:	4b9b      	ldr	r3, [pc, #620]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	4b9a      	ldr	r3, [pc, #616]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 800681a:	499b      	ldr	r1, [pc, #620]	; (8006a88 <HAL_RCC_OscConfig+0x338>)
 800681c:	400a      	ands	r2, r1
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	4b98      	ldr	r3, [pc, #608]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b97      	ldr	r3, [pc, #604]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006826:	4999      	ldr	r1, [pc, #612]	; (8006a8c <HAL_RCC_OscConfig+0x33c>)
 8006828:	400a      	ands	r2, r1
 800682a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d014      	beq.n	800685e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006834:	f7fc fbfe 	bl	8003034 <HAL_GetTick>
 8006838:	0003      	movs	r3, r0
 800683a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800683e:	f7fc fbf9 	bl	8003034 <HAL_GetTick>
 8006842:	0002      	movs	r2, r0
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b64      	cmp	r3, #100	; 0x64
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e28e      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006850:	4b8c      	ldr	r3, [pc, #560]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	2380      	movs	r3, #128	; 0x80
 8006856:	029b      	lsls	r3, r3, #10
 8006858:	4013      	ands	r3, r2
 800685a:	d0f0      	beq.n	800683e <HAL_RCC_OscConfig+0xee>
 800685c:	e015      	b.n	800688a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685e:	f7fc fbe9 	bl	8003034 <HAL_GetTick>
 8006862:	0003      	movs	r3, r0
 8006864:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006868:	f7fc fbe4 	bl	8003034 <HAL_GetTick>
 800686c:	0002      	movs	r2, r0
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b64      	cmp	r3, #100	; 0x64
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e279      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800687a:	4b82      	ldr	r3, [pc, #520]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	2380      	movs	r3, #128	; 0x80
 8006880:	029b      	lsls	r3, r3, #10
 8006882:	4013      	ands	r3, r2
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0x118>
 8006886:	e000      	b.n	800688a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006888:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2202      	movs	r2, #2
 8006890:	4013      	ands	r3, r2
 8006892:	d100      	bne.n	8006896 <HAL_RCC_OscConfig+0x146>
 8006894:	e06c      	b.n	8006970 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006896:	4b7b      	ldr	r3, [pc, #492]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	220c      	movs	r2, #12
 800689c:	4013      	ands	r3, r2
 800689e:	d00e      	beq.n	80068be <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80068a0:	4b78      	ldr	r3, [pc, #480]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	220c      	movs	r2, #12
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d11f      	bne.n	80068ec <HAL_RCC_OscConfig+0x19c>
 80068ac:	4b75      	ldr	r3, [pc, #468]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	23c0      	movs	r3, #192	; 0xc0
 80068b2:	025b      	lsls	r3, r3, #9
 80068b4:	401a      	ands	r2, r3
 80068b6:	2380      	movs	r3, #128	; 0x80
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d116      	bne.n	80068ec <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068be:	4b71      	ldr	r3, [pc, #452]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2202      	movs	r2, #2
 80068c4:	4013      	ands	r3, r2
 80068c6:	d005      	beq.n	80068d4 <HAL_RCC_OscConfig+0x184>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d001      	beq.n	80068d4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e24c      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d4:	4b6b      	ldr	r3, [pc, #428]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	22f8      	movs	r2, #248	; 0xf8
 80068da:	4393      	bics	r3, r2
 80068dc:	0019      	movs	r1, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	00da      	lsls	r2, r3, #3
 80068e4:	4b67      	ldr	r3, [pc, #412]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80068e6:	430a      	orrs	r2, r1
 80068e8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ea:	e041      	b.n	8006970 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d024      	beq.n	800693e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068f4:	4b63      	ldr	r3, [pc, #396]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	4b62      	ldr	r3, [pc, #392]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80068fa:	2101      	movs	r1, #1
 80068fc:	430a      	orrs	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006900:	f7fc fb98 	bl	8003034 <HAL_GetTick>
 8006904:	0003      	movs	r3, r0
 8006906:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800690a:	f7fc fb93 	bl	8003034 <HAL_GetTick>
 800690e:	0002      	movs	r2, r0
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e228      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691c:	4b59      	ldr	r3, [pc, #356]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2202      	movs	r2, #2
 8006922:	4013      	ands	r3, r2
 8006924:	d0f1      	beq.n	800690a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006926:	4b57      	ldr	r3, [pc, #348]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	22f8      	movs	r2, #248	; 0xf8
 800692c:	4393      	bics	r3, r2
 800692e:	0019      	movs	r1, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	00da      	lsls	r2, r3, #3
 8006936:	4b53      	ldr	r3, [pc, #332]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006938:	430a      	orrs	r2, r1
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e018      	b.n	8006970 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800693e:	4b51      	ldr	r3, [pc, #324]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b50      	ldr	r3, [pc, #320]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006944:	2101      	movs	r1, #1
 8006946:	438a      	bics	r2, r1
 8006948:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694a:	f7fc fb73 	bl	8003034 <HAL_GetTick>
 800694e:	0003      	movs	r3, r0
 8006950:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006954:	f7fc fb6e 	bl	8003034 <HAL_GetTick>
 8006958:	0002      	movs	r2, r0
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e203      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006966:	4b47      	ldr	r3, [pc, #284]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2202      	movs	r2, #2
 800696c:	4013      	ands	r3, r2
 800696e:	d1f1      	bne.n	8006954 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2208      	movs	r2, #8
 8006976:	4013      	ands	r3, r2
 8006978:	d036      	beq.n	80069e8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d019      	beq.n	80069b6 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006982:	4b40      	ldr	r3, [pc, #256]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006984:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006986:	4b3f      	ldr	r3, [pc, #252]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006988:	2101      	movs	r1, #1
 800698a:	430a      	orrs	r2, r1
 800698c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800698e:	f7fc fb51 	bl	8003034 <HAL_GetTick>
 8006992:	0003      	movs	r3, r0
 8006994:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006998:	f7fc fb4c 	bl	8003034 <HAL_GetTick>
 800699c:	0002      	movs	r2, r0
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e1e1      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2202      	movs	r2, #2
 80069b0:	4013      	ands	r3, r2
 80069b2:	d0f1      	beq.n	8006998 <HAL_RCC_OscConfig+0x248>
 80069b4:	e018      	b.n	80069e8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069b6:	4b33      	ldr	r3, [pc, #204]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80069b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ba:	4b32      	ldr	r3, [pc, #200]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80069bc:	2101      	movs	r1, #1
 80069be:	438a      	bics	r2, r1
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c2:	f7fc fb37 	bl	8003034 <HAL_GetTick>
 80069c6:	0003      	movs	r3, r0
 80069c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069cc:	f7fc fb32 	bl	8003034 <HAL_GetTick>
 80069d0:	0002      	movs	r2, r0
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e1c7      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069de:	4b29      	ldr	r3, [pc, #164]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	2202      	movs	r2, #2
 80069e4:	4013      	ands	r3, r2
 80069e6:	d1f1      	bne.n	80069cc <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2204      	movs	r2, #4
 80069ee:	4013      	ands	r3, r2
 80069f0:	d100      	bne.n	80069f4 <HAL_RCC_OscConfig+0x2a4>
 80069f2:	e0b5      	b.n	8006b60 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069f4:	201f      	movs	r0, #31
 80069f6:	183b      	adds	r3, r7, r0
 80069f8:	2200      	movs	r2, #0
 80069fa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069fc:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	055b      	lsls	r3, r3, #21
 8006a04:	4013      	ands	r3, r2
 8006a06:	d110      	bne.n	8006a2a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006a0e:	2180      	movs	r1, #128	; 0x80
 8006a10:	0549      	lsls	r1, r1, #21
 8006a12:	430a      	orrs	r2, r1
 8006a14:	61da      	str	r2, [r3, #28]
 8006a16:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006a18:	69da      	ldr	r2, [r3, #28]
 8006a1a:	2380      	movs	r3, #128	; 0x80
 8006a1c:	055b      	lsls	r3, r3, #21
 8006a1e:	4013      	ands	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a24:	183b      	adds	r3, r7, r0
 8006a26:	2201      	movs	r2, #1
 8006a28:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2a:	4b19      	ldr	r3, [pc, #100]	; (8006a90 <HAL_RCC_OscConfig+0x340>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	2380      	movs	r3, #128	; 0x80
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	4013      	ands	r3, r2
 8006a34:	d11a      	bne.n	8006a6c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a36:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <HAL_RCC_OscConfig+0x340>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <HAL_RCC_OscConfig+0x340>)
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	0049      	lsls	r1, r1, #1
 8006a40:	430a      	orrs	r2, r1
 8006a42:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a44:	f7fc faf6 	bl	8003034 <HAL_GetTick>
 8006a48:	0003      	movs	r3, r0
 8006a4a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a4e:	f7fc faf1 	bl	8003034 <HAL_GetTick>
 8006a52:	0002      	movs	r2, r0
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b64      	cmp	r3, #100	; 0x64
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e186      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_RCC_OscConfig+0x340>)
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d0f0      	beq.n	8006a4e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d10f      	bne.n	8006a94 <HAL_RCC_OscConfig+0x344>
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	4b02      	ldr	r3, [pc, #8]	; (8006a84 <HAL_RCC_OscConfig+0x334>)
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	621a      	str	r2, [r3, #32]
 8006a80:	e036      	b.n	8006af0 <HAL_RCC_OscConfig+0x3a0>
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	40021000 	.word	0x40021000
 8006a88:	fffeffff 	.word	0xfffeffff
 8006a8c:	fffbffff 	.word	0xfffbffff
 8006a90:	40007000 	.word	0x40007000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10c      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x366>
 8006a9c:	4bb6      	ldr	r3, [pc, #728]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006a9e:	6a1a      	ldr	r2, [r3, #32]
 8006aa0:	4bb5      	ldr	r3, [pc, #724]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	438a      	bics	r2, r1
 8006aa6:	621a      	str	r2, [r3, #32]
 8006aa8:	4bb3      	ldr	r3, [pc, #716]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006aaa:	6a1a      	ldr	r2, [r3, #32]
 8006aac:	4bb2      	ldr	r3, [pc, #712]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006aae:	2104      	movs	r1, #4
 8006ab0:	438a      	bics	r2, r1
 8006ab2:	621a      	str	r2, [r3, #32]
 8006ab4:	e01c      	b.n	8006af0 <HAL_RCC_OscConfig+0x3a0>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b05      	cmp	r3, #5
 8006abc:	d10c      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x388>
 8006abe:	4bae      	ldr	r3, [pc, #696]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006ac0:	6a1a      	ldr	r2, [r3, #32]
 8006ac2:	4bad      	ldr	r3, [pc, #692]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	621a      	str	r2, [r3, #32]
 8006aca:	4bab      	ldr	r3, [pc, #684]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006acc:	6a1a      	ldr	r2, [r3, #32]
 8006ace:	4baa      	ldr	r3, [pc, #680]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	621a      	str	r2, [r3, #32]
 8006ad6:	e00b      	b.n	8006af0 <HAL_RCC_OscConfig+0x3a0>
 8006ad8:	4ba7      	ldr	r3, [pc, #668]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006ada:	6a1a      	ldr	r2, [r3, #32]
 8006adc:	4ba6      	ldr	r3, [pc, #664]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006ade:	2101      	movs	r1, #1
 8006ae0:	438a      	bics	r2, r1
 8006ae2:	621a      	str	r2, [r3, #32]
 8006ae4:	4ba4      	ldr	r3, [pc, #656]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006ae6:	6a1a      	ldr	r2, [r3, #32]
 8006ae8:	4ba3      	ldr	r3, [pc, #652]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006aea:	2104      	movs	r1, #4
 8006aec:	438a      	bics	r2, r1
 8006aee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d014      	beq.n	8006b22 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af8:	f7fc fa9c 	bl	8003034 <HAL_GetTick>
 8006afc:	0003      	movs	r3, r0
 8006afe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b00:	e009      	b.n	8006b16 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b02:	f7fc fa97 	bl	8003034 <HAL_GetTick>
 8006b06:	0002      	movs	r2, r0
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	4a9b      	ldr	r2, [pc, #620]	; (8006d7c <HAL_RCC_OscConfig+0x62c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e12b      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b16:	4b98      	ldr	r3, [pc, #608]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x3b2>
 8006b20:	e013      	b.n	8006b4a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b22:	f7fc fa87 	bl	8003034 <HAL_GetTick>
 8006b26:	0003      	movs	r3, r0
 8006b28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b2a:	e009      	b.n	8006b40 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b2c:	f7fc fa82 	bl	8003034 <HAL_GetTick>
 8006b30:	0002      	movs	r2, r0
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	4a91      	ldr	r2, [pc, #580]	; (8006d7c <HAL_RCC_OscConfig+0x62c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e116      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b40:	4b8d      	ldr	r3, [pc, #564]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	2202      	movs	r2, #2
 8006b46:	4013      	ands	r3, r2
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b4a:	231f      	movs	r3, #31
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d105      	bne.n	8006b60 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b54:	4b88      	ldr	r3, [pc, #544]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	4b87      	ldr	r3, [pc, #540]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006b5a:	4989      	ldr	r1, [pc, #548]	; (8006d80 <HAL_RCC_OscConfig+0x630>)
 8006b5c:	400a      	ands	r2, r1
 8006b5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2210      	movs	r2, #16
 8006b66:	4013      	ands	r3, r2
 8006b68:	d063      	beq.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d12a      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006b72:	4b81      	ldr	r3, [pc, #516]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b76:	4b80      	ldr	r3, [pc, #512]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006b78:	2104      	movs	r1, #4
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006b7e:	4b7e      	ldr	r3, [pc, #504]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b82:	4b7d      	ldr	r3, [pc, #500]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006b84:	2101      	movs	r1, #1
 8006b86:	430a      	orrs	r2, r1
 8006b88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b8a:	f7fc fa53 	bl	8003034 <HAL_GetTick>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006b94:	f7fc fa4e 	bl	8003034 <HAL_GetTick>
 8006b98:	0002      	movs	r2, r0
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e0e3      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006ba6:	4b74      	ldr	r3, [pc, #464]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006baa:	2202      	movs	r2, #2
 8006bac:	4013      	ands	r3, r2
 8006bae:	d0f1      	beq.n	8006b94 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006bb0:	4b71      	ldr	r3, [pc, #452]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb4:	22f8      	movs	r2, #248	; 0xf8
 8006bb6:	4393      	bics	r3, r2
 8006bb8:	0019      	movs	r1, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	00da      	lsls	r2, r3, #3
 8006bc0:	4b6d      	ldr	r3, [pc, #436]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8006bc6:	e034      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	3305      	adds	r3, #5
 8006bce:	d111      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006bd0:	4b69      	ldr	r3, [pc, #420]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bd4:	4b68      	ldr	r3, [pc, #416]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	438a      	bics	r2, r1
 8006bda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006bdc:	4b66      	ldr	r3, [pc, #408]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	22f8      	movs	r2, #248	; 0xf8
 8006be2:	4393      	bics	r3, r2
 8006be4:	0019      	movs	r1, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	00da      	lsls	r2, r3, #3
 8006bec:	4b62      	ldr	r3, [pc, #392]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8006bf2:	e01e      	b.n	8006c32 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006bf4:	4b60      	ldr	r3, [pc, #384]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bf8:	4b5f      	ldr	r3, [pc, #380]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006bfa:	2104      	movs	r1, #4
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006c00:	4b5d      	ldr	r3, [pc, #372]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c04:	4b5c      	ldr	r3, [pc, #368]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c06:	2101      	movs	r1, #1
 8006c08:	438a      	bics	r2, r1
 8006c0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c0c:	f7fc fa12 	bl	8003034 <HAL_GetTick>
 8006c10:	0003      	movs	r3, r0
 8006c12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006c16:	f7fc fa0d 	bl	8003034 <HAL_GetTick>
 8006c1a:	0002      	movs	r2, r0
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e0a2      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006c28:	4b53      	ldr	r3, [pc, #332]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d1f1      	bne.n	8006c16 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d100      	bne.n	8006c3c <HAL_RCC_OscConfig+0x4ec>
 8006c3a:	e097      	b.n	8006d6c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c3c:	4b4e      	ldr	r3, [pc, #312]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	220c      	movs	r2, #12
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d100      	bne.n	8006c4a <HAL_RCC_OscConfig+0x4fa>
 8006c48:	e06b      	b.n	8006d22 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d14c      	bne.n	8006cec <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c52:	4b49      	ldr	r3, [pc, #292]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b48      	ldr	r3, [pc, #288]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c58:	494a      	ldr	r1, [pc, #296]	; (8006d84 <HAL_RCC_OscConfig+0x634>)
 8006c5a:	400a      	ands	r2, r1
 8006c5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5e:	f7fc f9e9 	bl	8003034 <HAL_GetTick>
 8006c62:	0003      	movs	r3, r0
 8006c64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c68:	f7fc f9e4 	bl	8003034 <HAL_GetTick>
 8006c6c:	0002      	movs	r2, r0
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e079      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c7a:	4b3f      	ldr	r3, [pc, #252]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	2380      	movs	r3, #128	; 0x80
 8006c80:	049b      	lsls	r3, r3, #18
 8006c82:	4013      	ands	r3, r2
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c86:	4b3c      	ldr	r3, [pc, #240]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	220f      	movs	r2, #15
 8006c8c:	4393      	bics	r3, r2
 8006c8e:	0019      	movs	r1, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	4b38      	ldr	r3, [pc, #224]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c96:	430a      	orrs	r2, r1
 8006c98:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c9a:	4b37      	ldr	r3, [pc, #220]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	4a3a      	ldr	r2, [pc, #232]	; (8006d88 <HAL_RCC_OscConfig+0x638>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	0019      	movs	r1, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	431a      	orrs	r2, r3
 8006cae:	4b32      	ldr	r3, [pc, #200]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cb4:	4b30      	ldr	r3, [pc, #192]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	4b2f      	ldr	r3, [pc, #188]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006cba:	2180      	movs	r1, #128	; 0x80
 8006cbc:	0449      	lsls	r1, r1, #17
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc2:	f7fc f9b7 	bl	8003034 <HAL_GetTick>
 8006cc6:	0003      	movs	r3, r0
 8006cc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ccc:	f7fc f9b2 	bl	8003034 <HAL_GetTick>
 8006cd0:	0002      	movs	r2, r0
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e047      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006cde:	4b26      	ldr	r3, [pc, #152]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	2380      	movs	r3, #128	; 0x80
 8006ce4:	049b      	lsls	r3, r3, #18
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCC_OscConfig+0x57c>
 8006cea:	e03f      	b.n	8006d6c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cec:	4b22      	ldr	r3, [pc, #136]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006cf2:	4924      	ldr	r1, [pc, #144]	; (8006d84 <HAL_RCC_OscConfig+0x634>)
 8006cf4:	400a      	ands	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf8:	f7fc f99c 	bl	8003034 <HAL_GetTick>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d00:	e008      	b.n	8006d14 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d02:	f7fc f997 	bl	8003034 <HAL_GetTick>
 8006d06:	0002      	movs	r2, r0
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e02c      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d14:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	2380      	movs	r3, #128	; 0x80
 8006d1a:	049b      	lsls	r3, r3, #18
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d1f0      	bne.n	8006d02 <HAL_RCC_OscConfig+0x5b2>
 8006d20:	e024      	b.n	8006d6c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e01f      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006d34:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <HAL_RCC_OscConfig+0x628>)
 8006d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d38:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	23c0      	movs	r3, #192	; 0xc0
 8006d3e:	025b      	lsls	r3, r3, #9
 8006d40:	401a      	ands	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d10e      	bne.n	8006d68 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	220f      	movs	r2, #15
 8006d4e:	401a      	ands	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d107      	bne.n	8006d68 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	23f0      	movs	r3, #240	; 0xf0
 8006d5c:	039b      	lsls	r3, r3, #14
 8006d5e:	401a      	ands	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	0018      	movs	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	b008      	add	sp, #32
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	00001388 	.word	0x00001388
 8006d80:	efffffff 	.word	0xefffffff
 8006d84:	feffffff 	.word	0xfeffffff
 8006d88:	ffc27fff 	.word	0xffc27fff

08006d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0b3      	b.n	8006f08 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006da0:	4b5b      	ldr	r3, [pc, #364]	; (8006f10 <HAL_RCC_ClockConfig+0x184>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2201      	movs	r2, #1
 8006da6:	4013      	ands	r3, r2
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d911      	bls.n	8006dd2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dae:	4b58      	ldr	r3, [pc, #352]	; (8006f10 <HAL_RCC_ClockConfig+0x184>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2201      	movs	r2, #1
 8006db4:	4393      	bics	r3, r2
 8006db6:	0019      	movs	r1, r3
 8006db8:	4b55      	ldr	r3, [pc, #340]	; (8006f10 <HAL_RCC_ClockConfig+0x184>)
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc0:	4b53      	ldr	r3, [pc, #332]	; (8006f10 <HAL_RCC_ClockConfig+0x184>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d001      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e09a      	b.n	8006f08 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d015      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2204      	movs	r2, #4
 8006de2:	4013      	ands	r3, r2
 8006de4:	d006      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006de6:	4b4b      	ldr	r3, [pc, #300]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	4b4a      	ldr	r3, [pc, #296]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006dec:	21e0      	movs	r1, #224	; 0xe0
 8006dee:	00c9      	lsls	r1, r1, #3
 8006df0:	430a      	orrs	r2, r1
 8006df2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df4:	4b47      	ldr	r3, [pc, #284]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	22f0      	movs	r2, #240	; 0xf0
 8006dfa:	4393      	bics	r3, r2
 8006dfc:	0019      	movs	r1, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	4b44      	ldr	r3, [pc, #272]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	4013      	ands	r3, r2
 8006e10:	d040      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d107      	bne.n	8006e2a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1a:	4b3e      	ldr	r3, [pc, #248]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	2380      	movs	r3, #128	; 0x80
 8006e20:	029b      	lsls	r3, r3, #10
 8006e22:	4013      	ands	r3, r2
 8006e24:	d114      	bne.n	8006e50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e06e      	b.n	8006f08 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d107      	bne.n	8006e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e32:	4b38      	ldr	r3, [pc, #224]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	2380      	movs	r3, #128	; 0x80
 8006e38:	049b      	lsls	r3, r3, #18
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	d108      	bne.n	8006e50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e062      	b.n	8006f08 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e42:	4b34      	ldr	r3, [pc, #208]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2202      	movs	r2, #2
 8006e48:	4013      	ands	r3, r2
 8006e4a:	d101      	bne.n	8006e50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e05b      	b.n	8006f08 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e50:	4b30      	ldr	r3, [pc, #192]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2203      	movs	r2, #3
 8006e56:	4393      	bics	r3, r2
 8006e58:	0019      	movs	r1, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	4b2d      	ldr	r3, [pc, #180]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006e60:	430a      	orrs	r2, r1
 8006e62:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e64:	f7fc f8e6 	bl	8003034 <HAL_GetTick>
 8006e68:	0003      	movs	r3, r0
 8006e6a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6c:	e009      	b.n	8006e82 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e6e:	f7fc f8e1 	bl	8003034 <HAL_GetTick>
 8006e72:	0002      	movs	r2, r0
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	4a27      	ldr	r2, [pc, #156]	; (8006f18 <HAL_RCC_ClockConfig+0x18c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e042      	b.n	8006f08 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e82:	4b24      	ldr	r3, [pc, #144]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	220c      	movs	r2, #12
 8006e88:	401a      	ands	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d1ec      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e94:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <HAL_RCC_ClockConfig+0x184>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d211      	bcs.n	8006ec6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea2:	4b1b      	ldr	r3, [pc, #108]	; (8006f10 <HAL_RCC_ClockConfig+0x184>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	4393      	bics	r3, r2
 8006eaa:	0019      	movs	r1, r3
 8006eac:	4b18      	ldr	r3, [pc, #96]	; (8006f10 <HAL_RCC_ClockConfig+0x184>)
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb4:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <HAL_RCC_ClockConfig+0x184>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4013      	ands	r3, r2
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d001      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e020      	b.n	8006f08 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2204      	movs	r2, #4
 8006ecc:	4013      	ands	r3, r2
 8006ece:	d009      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006ed0:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <HAL_RCC_ClockConfig+0x190>)
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	0019      	movs	r1, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006ee4:	f000 f820 	bl	8006f28 <HAL_RCC_GetSysClockFreq>
 8006ee8:	0001      	movs	r1, r0
 8006eea:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <HAL_RCC_ClockConfig+0x188>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	091b      	lsrs	r3, r3, #4
 8006ef0:	220f      	movs	r2, #15
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	4a0a      	ldr	r2, [pc, #40]	; (8006f20 <HAL_RCC_ClockConfig+0x194>)
 8006ef6:	5cd3      	ldrb	r3, [r2, r3]
 8006ef8:	000a      	movs	r2, r1
 8006efa:	40da      	lsrs	r2, r3
 8006efc:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <HAL_RCC_ClockConfig+0x198>)
 8006efe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006f00:	2003      	movs	r0, #3
 8006f02:	f7fc f851 	bl	8002fa8 <HAL_InitTick>
  
  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	0018      	movs	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	b004      	add	sp, #16
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40022000 	.word	0x40022000
 8006f14:	40021000 	.word	0x40021000
 8006f18:	00001388 	.word	0x00001388
 8006f1c:	fffff8ff 	.word	0xfffff8ff
 8006f20:	0800be38 	.word	0x0800be38
 8006f24:	2000000c 	.word	0x2000000c

08006f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	2300      	movs	r3, #0
 8006f34:	60bb      	str	r3, [r7, #8]
 8006f36:	2300      	movs	r3, #0
 8006f38:	617b      	str	r3, [r7, #20]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006f42:	4b21      	ldr	r3, [pc, #132]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	220c      	movs	r2, #12
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d002      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x30>
 8006f52:	2b08      	cmp	r3, #8
 8006f54:	d003      	beq.n	8006f5e <HAL_RCC_GetSysClockFreq+0x36>
 8006f56:	e02e      	b.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006f58:	4b1c      	ldr	r3, [pc, #112]	; (8006fcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8006f5a:	613b      	str	r3, [r7, #16]
      break;
 8006f5c:	e02e      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	0c9b      	lsrs	r3, r3, #18
 8006f62:	220f      	movs	r2, #15
 8006f64:	4013      	ands	r3, r2
 8006f66:	4a1a      	ldr	r2, [pc, #104]	; (8006fd0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006f68:	5cd3      	ldrb	r3, [r2, r3]
 8006f6a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006f6c:	4b16      	ldr	r3, [pc, #88]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	220f      	movs	r2, #15
 8006f72:	4013      	ands	r3, r2
 8006f74:	4a17      	ldr	r2, [pc, #92]	; (8006fd4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006f76:	5cd3      	ldrb	r3, [r2, r3]
 8006f78:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	23c0      	movs	r3, #192	; 0xc0
 8006f7e:	025b      	lsls	r3, r3, #9
 8006f80:	401a      	ands	r2, r3
 8006f82:	2380      	movs	r3, #128	; 0x80
 8006f84:	025b      	lsls	r3, r3, #9
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d109      	bne.n	8006f9e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	480f      	ldr	r0, [pc, #60]	; (8006fcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8006f8e:	f7f9 f8bb 	bl	8000108 <__udivsi3>
 8006f92:	0003      	movs	r3, r0
 8006f94:	001a      	movs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4353      	muls	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	480a      	ldr	r0, [pc, #40]	; (8006fcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8006fa2:	f7f9 f8b1 	bl	8000108 <__udivsi3>
 8006fa6:	0003      	movs	r3, r0
 8006fa8:	001a      	movs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4353      	muls	r3, r2
 8006fae:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	613b      	str	r3, [r7, #16]
      break;
 8006fb4:	e002      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8006fb8:	613b      	str	r3, [r7, #16]
      break;
 8006fba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006fbc:	693b      	ldr	r3, [r7, #16]
}
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b006      	add	sp, #24
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	46c0      	nop			; (mov r8, r8)
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	007a1200 	.word	0x007a1200
 8006fd0:	0800be48 	.word	0x0800be48
 8006fd4:	0800be58 	.word	0x0800be58

08006fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	2380      	movs	r3, #128	; 0x80
 8006fee:	025b      	lsls	r3, r3, #9
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	d100      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006ff4:	e08e      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006ff6:	2017      	movs	r0, #23
 8006ff8:	183b      	adds	r3, r7, r0
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ffe:	4b5f      	ldr	r3, [pc, #380]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	2380      	movs	r3, #128	; 0x80
 8007004:	055b      	lsls	r3, r3, #21
 8007006:	4013      	ands	r3, r2
 8007008:	d110      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800700a:	4b5c      	ldr	r3, [pc, #368]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800700c:	69da      	ldr	r2, [r3, #28]
 800700e:	4b5b      	ldr	r3, [pc, #364]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007010:	2180      	movs	r1, #128	; 0x80
 8007012:	0549      	lsls	r1, r1, #21
 8007014:	430a      	orrs	r2, r1
 8007016:	61da      	str	r2, [r3, #28]
 8007018:	4b58      	ldr	r3, [pc, #352]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800701a:	69da      	ldr	r2, [r3, #28]
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	055b      	lsls	r3, r3, #21
 8007020:	4013      	ands	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007026:	183b      	adds	r3, r7, r0
 8007028:	2201      	movs	r2, #1
 800702a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702c:	4b54      	ldr	r3, [pc, #336]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	4013      	ands	r3, r2
 8007036:	d11a      	bne.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007038:	4b51      	ldr	r3, [pc, #324]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4b50      	ldr	r3, [pc, #320]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800703e:	2180      	movs	r1, #128	; 0x80
 8007040:	0049      	lsls	r1, r1, #1
 8007042:	430a      	orrs	r2, r1
 8007044:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007046:	f7fb fff5 	bl	8003034 <HAL_GetTick>
 800704a:	0003      	movs	r3, r0
 800704c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800704e:	e008      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007050:	f7fb fff0 	bl	8003034 <HAL_GetTick>
 8007054:	0002      	movs	r2, r0
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b64      	cmp	r3, #100	; 0x64
 800705c:	d901      	bls.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e087      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007062:	4b47      	ldr	r3, [pc, #284]	; (8007180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4013      	ands	r3, r2
 800706c:	d0f0      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800706e:	4b43      	ldr	r3, [pc, #268]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007070:	6a1a      	ldr	r2, [r3, #32]
 8007072:	23c0      	movs	r3, #192	; 0xc0
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4013      	ands	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d034      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	23c0      	movs	r3, #192	; 0xc0
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4013      	ands	r3, r2
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	429a      	cmp	r2, r3
 800708e:	d02c      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007090:	4b3a      	ldr	r3, [pc, #232]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	4a3b      	ldr	r2, [pc, #236]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007096:	4013      	ands	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800709a:	4b38      	ldr	r3, [pc, #224]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	4b37      	ldr	r3, [pc, #220]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80070a0:	2180      	movs	r1, #128	; 0x80
 80070a2:	0249      	lsls	r1, r1, #9
 80070a4:	430a      	orrs	r2, r1
 80070a6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070a8:	4b34      	ldr	r3, [pc, #208]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80070aa:	6a1a      	ldr	r2, [r3, #32]
 80070ac:	4b33      	ldr	r3, [pc, #204]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80070ae:	4936      	ldr	r1, [pc, #216]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070b0:	400a      	ands	r2, r1
 80070b2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80070b4:	4b31      	ldr	r3, [pc, #196]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	4013      	ands	r3, r2
 80070c0:	d013      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c2:	f7fb ffb7 	bl	8003034 <HAL_GetTick>
 80070c6:	0003      	movs	r3, r0
 80070c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ca:	e009      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070cc:	f7fb ffb2 	bl	8003034 <HAL_GetTick>
 80070d0:	0002      	movs	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	4a2d      	ldr	r2, [pc, #180]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d901      	bls.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e048      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e0:	4b26      	ldr	r3, [pc, #152]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	2202      	movs	r2, #2
 80070e6:	4013      	ands	r3, r2
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070ea:	4b24      	ldr	r3, [pc, #144]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	4a25      	ldr	r2, [pc, #148]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	0019      	movs	r1, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	4b20      	ldr	r3, [pc, #128]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80070fa:	430a      	orrs	r2, r1
 80070fc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80070fe:	2317      	movs	r3, #23
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d105      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007108:	4b1c      	ldr	r3, [pc, #112]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800710a:	69da      	ldr	r2, [r3, #28]
 800710c:	4b1b      	ldr	r3, [pc, #108]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800710e:	4920      	ldr	r1, [pc, #128]	; (8007190 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007110:	400a      	ands	r2, r1
 8007112:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2201      	movs	r2, #1
 800711a:	4013      	ands	r3, r2
 800711c:	d009      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800711e:	4b17      	ldr	r3, [pc, #92]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8007120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007122:	2203      	movs	r2, #3
 8007124:	4393      	bics	r3, r2
 8007126:	0019      	movs	r1, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	4b13      	ldr	r3, [pc, #76]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800712e:	430a      	orrs	r2, r1
 8007130:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2220      	movs	r2, #32
 8007138:	4013      	ands	r3, r2
 800713a:	d009      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800713c:	4b0f      	ldr	r3, [pc, #60]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	2210      	movs	r2, #16
 8007142:	4393      	bics	r3, r2
 8007144:	0019      	movs	r1, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	4b0c      	ldr	r3, [pc, #48]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800714c:	430a      	orrs	r2, r1
 800714e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	2380      	movs	r3, #128	; 0x80
 8007156:	029b      	lsls	r3, r3, #10
 8007158:	4013      	ands	r3, r2
 800715a:	d009      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800715c:	4b07      	ldr	r3, [pc, #28]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	2280      	movs	r2, #128	; 0x80
 8007162:	4393      	bics	r3, r2
 8007164:	0019      	movs	r1, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691a      	ldr	r2, [r3, #16]
 800716a:	4b04      	ldr	r3, [pc, #16]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800716c:	430a      	orrs	r2, r1
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	0018      	movs	r0, r3
 8007174:	46bd      	mov	sp, r7
 8007176:	b006      	add	sp, #24
 8007178:	bd80      	pop	{r7, pc}
 800717a:	46c0      	nop			; (mov r8, r8)
 800717c:	40021000 	.word	0x40021000
 8007180:	40007000 	.word	0x40007000
 8007184:	fffffcff 	.word	0xfffffcff
 8007188:	fffeffff 	.word	0xfffeffff
 800718c:	00001388 	.word	0x00001388
 8007190:	efffffff 	.word	0xefffffff

08007194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e042      	b.n	800722c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	223d      	movs	r2, #61	; 0x3d
 80071aa:	5c9b      	ldrb	r3, [r3, r2]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d107      	bne.n	80071c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	223c      	movs	r2, #60	; 0x3c
 80071b6:	2100      	movs	r1, #0
 80071b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	0018      	movs	r0, r3
 80071be:	f7fb fe31 	bl	8002e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	223d      	movs	r2, #61	; 0x3d
 80071c6:	2102      	movs	r1, #2
 80071c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3304      	adds	r3, #4
 80071d2:	0019      	movs	r1, r3
 80071d4:	0010      	movs	r0, r2
 80071d6:	f000 f9af 	bl	8007538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2246      	movs	r2, #70	; 0x46
 80071de:	2101      	movs	r1, #1
 80071e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	223e      	movs	r2, #62	; 0x3e
 80071e6:	2101      	movs	r1, #1
 80071e8:	5499      	strb	r1, [r3, r2]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	223f      	movs	r2, #63	; 0x3f
 80071ee:	2101      	movs	r1, #1
 80071f0:	5499      	strb	r1, [r3, r2]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2240      	movs	r2, #64	; 0x40
 80071f6:	2101      	movs	r1, #1
 80071f8:	5499      	strb	r1, [r3, r2]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2241      	movs	r2, #65	; 0x41
 80071fe:	2101      	movs	r1, #1
 8007200:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2242      	movs	r2, #66	; 0x42
 8007206:	2101      	movs	r1, #1
 8007208:	5499      	strb	r1, [r3, r2]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2243      	movs	r2, #67	; 0x43
 800720e:	2101      	movs	r1, #1
 8007210:	5499      	strb	r1, [r3, r2]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2244      	movs	r2, #68	; 0x44
 8007216:	2101      	movs	r1, #1
 8007218:	5499      	strb	r1, [r3, r2]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2245      	movs	r2, #69	; 0x45
 800721e:	2101      	movs	r1, #1
 8007220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	223d      	movs	r2, #61	; 0x3d
 8007226:	2101      	movs	r1, #1
 8007228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	0018      	movs	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	b002      	add	sp, #8
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	223d      	movs	r2, #61	; 0x3d
 8007240:	5c9b      	ldrb	r3, [r3, r2]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b01      	cmp	r3, #1
 8007246:	d001      	beq.n	800724c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e035      	b.n	80072b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	223d      	movs	r2, #61	; 0x3d
 8007250:	2102      	movs	r1, #2
 8007252:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2101      	movs	r1, #1
 8007260:	430a      	orrs	r2, r1
 8007262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a15      	ldr	r2, [pc, #84]	; (80072c0 <HAL_TIM_Base_Start_IT+0x8c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d009      	beq.n	8007282 <HAL_TIM_Base_Start_IT+0x4e>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a14      	ldr	r2, [pc, #80]	; (80072c4 <HAL_TIM_Base_Start_IT+0x90>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d004      	beq.n	8007282 <HAL_TIM_Base_Start_IT+0x4e>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a12      	ldr	r2, [pc, #72]	; (80072c8 <HAL_TIM_Base_Start_IT+0x94>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d111      	bne.n	80072a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2207      	movs	r2, #7
 800728a:	4013      	ands	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b06      	cmp	r3, #6
 8007292:	d010      	beq.n	80072b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2101      	movs	r1, #1
 80072a0:	430a      	orrs	r2, r1
 80072a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072a4:	e007      	b.n	80072b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2101      	movs	r1, #1
 80072b2:	430a      	orrs	r2, r1
 80072b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	0018      	movs	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	b004      	add	sp, #16
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	40012c00 	.word	0x40012c00
 80072c4:	40000400 	.word	0x40000400
 80072c8:	40014000 	.word	0x40014000

080072cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2202      	movs	r2, #2
 80072dc:	4013      	ands	r3, r2
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d124      	bne.n	800732c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	2202      	movs	r2, #2
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d11d      	bne.n	800732c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2203      	movs	r2, #3
 80072f6:	4252      	negs	r2, r2
 80072f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2203      	movs	r2, #3
 8007308:	4013      	ands	r3, r2
 800730a:	d004      	beq.n	8007316 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	0018      	movs	r0, r3
 8007310:	f000 f8fa 	bl	8007508 <HAL_TIM_IC_CaptureCallback>
 8007314:	e007      	b.n	8007326 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	0018      	movs	r0, r3
 800731a:	f000 f8ed 	bl	80074f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	0018      	movs	r0, r3
 8007322:	f000 f8f9 	bl	8007518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	2204      	movs	r2, #4
 8007334:	4013      	ands	r3, r2
 8007336:	2b04      	cmp	r3, #4
 8007338:	d125      	bne.n	8007386 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	2204      	movs	r2, #4
 8007342:	4013      	ands	r3, r2
 8007344:	2b04      	cmp	r3, #4
 8007346:	d11e      	bne.n	8007386 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2205      	movs	r2, #5
 800734e:	4252      	negs	r2, r2
 8007350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	23c0      	movs	r3, #192	; 0xc0
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4013      	ands	r3, r2
 8007364:	d004      	beq.n	8007370 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	0018      	movs	r0, r3
 800736a:	f000 f8cd 	bl	8007508 <HAL_TIM_IC_CaptureCallback>
 800736e:	e007      	b.n	8007380 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	0018      	movs	r0, r3
 8007374:	f000 f8c0 	bl	80074f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	0018      	movs	r0, r3
 800737c:	f000 f8cc 	bl	8007518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2208      	movs	r2, #8
 800738e:	4013      	ands	r3, r2
 8007390:	2b08      	cmp	r3, #8
 8007392:	d124      	bne.n	80073de <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2208      	movs	r2, #8
 800739c:	4013      	ands	r3, r2
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d11d      	bne.n	80073de <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2209      	movs	r2, #9
 80073a8:	4252      	negs	r2, r2
 80073aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2204      	movs	r2, #4
 80073b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	2203      	movs	r2, #3
 80073ba:	4013      	ands	r3, r2
 80073bc:	d004      	beq.n	80073c8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	0018      	movs	r0, r3
 80073c2:	f000 f8a1 	bl	8007508 <HAL_TIM_IC_CaptureCallback>
 80073c6:	e007      	b.n	80073d8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	0018      	movs	r0, r3
 80073cc:	f000 f894 	bl	80074f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	0018      	movs	r0, r3
 80073d4:	f000 f8a0 	bl	8007518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2210      	movs	r2, #16
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d125      	bne.n	8007438 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2210      	movs	r2, #16
 80073f4:	4013      	ands	r3, r2
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d11e      	bne.n	8007438 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2211      	movs	r2, #17
 8007400:	4252      	negs	r2, r2
 8007402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2208      	movs	r2, #8
 8007408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	23c0      	movs	r3, #192	; 0xc0
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4013      	ands	r3, r2
 8007416:	d004      	beq.n	8007422 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	0018      	movs	r0, r3
 800741c:	f000 f874 	bl	8007508 <HAL_TIM_IC_CaptureCallback>
 8007420:	e007      	b.n	8007432 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	0018      	movs	r0, r3
 8007426:	f000 f867 	bl	80074f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	0018      	movs	r0, r3
 800742e:	f000 f873 	bl	8007518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2201      	movs	r2, #1
 8007440:	4013      	ands	r3, r2
 8007442:	2b01      	cmp	r3, #1
 8007444:	d10f      	bne.n	8007466 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	4013      	ands	r3, r2
 8007450:	2b01      	cmp	r3, #1
 8007452:	d108      	bne.n	8007466 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2202      	movs	r2, #2
 800745a:	4252      	negs	r2, r2
 800745c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	0018      	movs	r0, r3
 8007462:	f7fb fc37 	bl	8002cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2280      	movs	r2, #128	; 0x80
 800746e:	4013      	ands	r3, r2
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d10f      	bne.n	8007494 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	2280      	movs	r2, #128	; 0x80
 800747c:	4013      	ands	r3, r2
 800747e:	2b80      	cmp	r3, #128	; 0x80
 8007480:	d108      	bne.n	8007494 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2281      	movs	r2, #129	; 0x81
 8007488:	4252      	negs	r2, r2
 800748a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	0018      	movs	r0, r3
 8007490:	f000 f8d0 	bl	8007634 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2240      	movs	r2, #64	; 0x40
 800749c:	4013      	ands	r3, r2
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d10f      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	2240      	movs	r2, #64	; 0x40
 80074aa:	4013      	ands	r3, r2
 80074ac:	2b40      	cmp	r3, #64	; 0x40
 80074ae:	d108      	bne.n	80074c2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2241      	movs	r2, #65	; 0x41
 80074b6:	4252      	negs	r2, r2
 80074b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	0018      	movs	r0, r3
 80074be:	f000 f833 	bl	8007528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	2220      	movs	r2, #32
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d10f      	bne.n	80074f0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	2220      	movs	r2, #32
 80074d8:	4013      	ands	r3, r2
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d108      	bne.n	80074f0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2221      	movs	r2, #33	; 0x21
 80074e4:	4252      	negs	r2, r2
 80074e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	0018      	movs	r0, r3
 80074ec:	f000 f89a 	bl	8007624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074f0:	46c0      	nop			; (mov r8, r8)
 80074f2:	46bd      	mov	sp, r7
 80074f4:	b002      	add	sp, #8
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007500:	46c0      	nop			; (mov r8, r8)
 8007502:	46bd      	mov	sp, r7
 8007504:	b002      	add	sp, #8
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007510:	46c0      	nop			; (mov r8, r8)
 8007512:	46bd      	mov	sp, r7
 8007514:	b002      	add	sp, #8
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	46bd      	mov	sp, r7
 8007524:	b002      	add	sp, #8
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007530:	46c0      	nop			; (mov r8, r8)
 8007532:	46bd      	mov	sp, r7
 8007534:	b002      	add	sp, #8
 8007536:	bd80      	pop	{r7, pc}

08007538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a2f      	ldr	r2, [pc, #188]	; (8007608 <TIM_Base_SetConfig+0xd0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d003      	beq.n	8007558 <TIM_Base_SetConfig+0x20>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a2e      	ldr	r2, [pc, #184]	; (800760c <TIM_Base_SetConfig+0xd4>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d108      	bne.n	800756a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2270      	movs	r2, #112	; 0x70
 800755c:	4393      	bics	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a26      	ldr	r2, [pc, #152]	; (8007608 <TIM_Base_SetConfig+0xd0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <TIM_Base_SetConfig+0x62>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a25      	ldr	r2, [pc, #148]	; (800760c <TIM_Base_SetConfig+0xd4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00f      	beq.n	800759a <TIM_Base_SetConfig+0x62>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a24      	ldr	r2, [pc, #144]	; (8007610 <TIM_Base_SetConfig+0xd8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00b      	beq.n	800759a <TIM_Base_SetConfig+0x62>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a23      	ldr	r2, [pc, #140]	; (8007614 <TIM_Base_SetConfig+0xdc>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d007      	beq.n	800759a <TIM_Base_SetConfig+0x62>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a22      	ldr	r2, [pc, #136]	; (8007618 <TIM_Base_SetConfig+0xe0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <TIM_Base_SetConfig+0x62>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a21      	ldr	r2, [pc, #132]	; (800761c <TIM_Base_SetConfig+0xe4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d108      	bne.n	80075ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4a20      	ldr	r2, [pc, #128]	; (8007620 <TIM_Base_SetConfig+0xe8>)
 800759e:	4013      	ands	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2280      	movs	r2, #128	; 0x80
 80075b0:	4393      	bics	r3, r2
 80075b2:	001a      	movs	r2, r3
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <TIM_Base_SetConfig+0xd0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00b      	beq.n	80075f2 <TIM_Base_SetConfig+0xba>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a0d      	ldr	r2, [pc, #52]	; (8007614 <TIM_Base_SetConfig+0xdc>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d007      	beq.n	80075f2 <TIM_Base_SetConfig+0xba>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <TIM_Base_SetConfig+0xe0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d003      	beq.n	80075f2 <TIM_Base_SetConfig+0xba>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a0b      	ldr	r2, [pc, #44]	; (800761c <TIM_Base_SetConfig+0xe4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d103      	bne.n	80075fa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	691a      	ldr	r2, [r3, #16]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	615a      	str	r2, [r3, #20]
}
 8007600:	46c0      	nop			; (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b004      	add	sp, #16
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40012c00 	.word	0x40012c00
 800760c:	40000400 	.word	0x40000400
 8007610:	40002000 	.word	0x40002000
 8007614:	40014000 	.word	0x40014000
 8007618:	40014400 	.word	0x40014400
 800761c:	40014800 	.word	0x40014800
 8007620:	fffffcff 	.word	0xfffffcff

08007624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800762c:	46c0      	nop			; (mov r8, r8)
 800762e:	46bd      	mov	sp, r7
 8007630:	b002      	add	sp, #8
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800763c:	46c0      	nop			; (mov r8, r8)
 800763e:	46bd      	mov	sp, r7
 8007640:	b002      	add	sp, #8
 8007642:	bd80      	pop	{r7, pc}

08007644 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2244      	movs	r2, #68	; 0x44
 8007650:	2100      	movs	r1, #0
 8007652:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007654:	4b05      	ldr	r3, [pc, #20]	; (800766c <USB_EnableGlobalInt+0x28>)
 8007656:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	b299      	uxth	r1, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2240      	movs	r2, #64	; 0x40
 8007660:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	0018      	movs	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	b004      	add	sp, #16
 800766a:	bd80      	pop	{r7, pc}
 800766c:	0000bf80 	.word	0x0000bf80

08007670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <USB_DisableGlobalInt+0x30>)
 800767a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2240      	movs	r2, #64	; 0x40
 8007680:	5a9b      	ldrh	r3, [r3, r2]
 8007682:	b29b      	uxth	r3, r3
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	b292      	uxth	r2, r2
 8007688:	43d2      	mvns	r2, r2
 800768a:	b292      	uxth	r2, r2
 800768c:	4013      	ands	r3, r2
 800768e:	b299      	uxth	r1, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2240      	movs	r2, #64	; 0x40
 8007694:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	0018      	movs	r0, r3
 800769a:	46bd      	mov	sp, r7
 800769c:	b004      	add	sp, #16
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	0000bf80 	.word	0x0000bf80

080076a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80076a4:	b084      	sub	sp, #16
 80076a6:	b590      	push	{r4, r7, lr}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	2004      	movs	r0, #4
 80076b0:	2410      	movs	r4, #16
 80076b2:	1900      	adds	r0, r0, r4
 80076b4:	2408      	movs	r4, #8
 80076b6:	46a4      	mov	ip, r4
 80076b8:	44bc      	add	ip, r7
 80076ba:	4460      	add	r0, ip
 80076bc:	6001      	str	r1, [r0, #0]
 80076be:	6042      	str	r2, [r0, #4]
 80076c0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2240      	movs	r2, #64	; 0x40
 80076c6:	2101      	movs	r1, #1
 80076c8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2240      	movs	r2, #64	; 0x40
 80076ce:	2100      	movs	r1, #0
 80076d0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2244      	movs	r2, #68	; 0x44
 80076d6:	2100      	movs	r1, #0
 80076d8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2250      	movs	r2, #80	; 0x50
 80076de:	2100      	movs	r1, #0
 80076e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	0018      	movs	r0, r3
 80076e6:	46bd      	mov	sp, r7
 80076e8:	b003      	add	sp, #12
 80076ea:	bc90      	pop	{r4, r7}
 80076ec:	bc08      	pop	{r3}
 80076ee:	b004      	add	sp, #16
 80076f0:	4718      	bx	r3
	...

080076f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b09c      	sub	sp, #112	; 0x70
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80076fe:	236f      	movs	r3, #111	; 0x6f
 8007700:	18fb      	adds	r3, r7, r3
 8007702:	2200      	movs	r2, #0
 8007704:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	18d3      	adds	r3, r2, r3
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	b29a      	uxth	r2, r3
 8007714:	236c      	movs	r3, #108	; 0x6c
 8007716:	18fb      	adds	r3, r7, r3
 8007718:	49a3      	ldr	r1, [pc, #652]	; (80079a8 <USB_ActivateEndpoint+0x2b4>)
 800771a:	400a      	ands	r2, r1
 800771c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	78db      	ldrb	r3, [r3, #3]
 8007722:	2b03      	cmp	r3, #3
 8007724:	d017      	beq.n	8007756 <USB_ActivateEndpoint+0x62>
 8007726:	dc28      	bgt.n	800777a <USB_ActivateEndpoint+0x86>
 8007728:	2b02      	cmp	r3, #2
 800772a:	d00e      	beq.n	800774a <USB_ActivateEndpoint+0x56>
 800772c:	dc25      	bgt.n	800777a <USB_ActivateEndpoint+0x86>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <USB_ActivateEndpoint+0x44>
 8007732:	2b01      	cmp	r3, #1
 8007734:	d018      	beq.n	8007768 <USB_ActivateEndpoint+0x74>
 8007736:	e020      	b.n	800777a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007738:	226c      	movs	r2, #108	; 0x6c
 800773a:	18bb      	adds	r3, r7, r2
 800773c:	18ba      	adds	r2, r7, r2
 800773e:	8812      	ldrh	r2, [r2, #0]
 8007740:	2180      	movs	r1, #128	; 0x80
 8007742:	0089      	lsls	r1, r1, #2
 8007744:	430a      	orrs	r2, r1
 8007746:	801a      	strh	r2, [r3, #0]
      break;
 8007748:	e01c      	b.n	8007784 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800774a:	226c      	movs	r2, #108	; 0x6c
 800774c:	18bb      	adds	r3, r7, r2
 800774e:	18ba      	adds	r2, r7, r2
 8007750:	8812      	ldrh	r2, [r2, #0]
 8007752:	801a      	strh	r2, [r3, #0]
      break;
 8007754:	e016      	b.n	8007784 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007756:	226c      	movs	r2, #108	; 0x6c
 8007758:	18bb      	adds	r3, r7, r2
 800775a:	18ba      	adds	r2, r7, r2
 800775c:	8812      	ldrh	r2, [r2, #0]
 800775e:	21c0      	movs	r1, #192	; 0xc0
 8007760:	00c9      	lsls	r1, r1, #3
 8007762:	430a      	orrs	r2, r1
 8007764:	801a      	strh	r2, [r3, #0]
      break;
 8007766:	e00d      	b.n	8007784 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007768:	226c      	movs	r2, #108	; 0x6c
 800776a:	18bb      	adds	r3, r7, r2
 800776c:	18ba      	adds	r2, r7, r2
 800776e:	8812      	ldrh	r2, [r2, #0]
 8007770:	2180      	movs	r1, #128	; 0x80
 8007772:	00c9      	lsls	r1, r1, #3
 8007774:	430a      	orrs	r2, r1
 8007776:	801a      	strh	r2, [r3, #0]
      break;
 8007778:	e004      	b.n	8007784 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800777a:	236f      	movs	r3, #111	; 0x6f
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	2201      	movs	r2, #1
 8007780:	701a      	strb	r2, [r3, #0]
      break;
 8007782:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	18d3      	adds	r3, r2, r3
 800778e:	226c      	movs	r2, #108	; 0x6c
 8007790:	18ba      	adds	r2, r7, r2
 8007792:	8812      	ldrh	r2, [r2, #0]
 8007794:	4985      	ldr	r1, [pc, #532]	; (80079ac <USB_ActivateEndpoint+0x2b8>)
 8007796:	430a      	orrs	r2, r1
 8007798:	b292      	uxth	r2, r2
 800779a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	18d3      	adds	r3, r2, r3
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	b21b      	sxth	r3, r3
 80077ac:	4a80      	ldr	r2, [pc, #512]	; (80079b0 <USB_ActivateEndpoint+0x2bc>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	b21a      	sxth	r2, r3
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b21b      	sxth	r3, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	b21a      	sxth	r2, r3
 80077bc:	2166      	movs	r1, #102	; 0x66
 80077be:	187b      	adds	r3, r7, r1
 80077c0:	801a      	strh	r2, [r3, #0]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	18d3      	adds	r3, r2, r3
 80077cc:	187a      	adds	r2, r7, r1
 80077ce:	8812      	ldrh	r2, [r2, #0]
 80077d0:	4976      	ldr	r1, [pc, #472]	; (80079ac <USB_ActivateEndpoint+0x2b8>)
 80077d2:	430a      	orrs	r2, r1
 80077d4:	b292      	uxth	r2, r2
 80077d6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	7b1b      	ldrb	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d000      	beq.n	80077e2 <USB_ActivateEndpoint+0xee>
 80077e0:	e178      	b.n	8007ad4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d100      	bne.n	80077ec <USB_ActivateEndpoint+0xf8>
 80077ea:	e07a      	b.n	80078e2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2250      	movs	r2, #80	; 0x50
 80077f4:	5a9b      	ldrh	r3, [r3, r2]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	001a      	movs	r2, r3
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	189b      	adds	r3, r3, r2
 80077fe:	61bb      	str	r3, [r7, #24]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	00da      	lsls	r2, r3, #3
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	18d3      	adds	r3, r2, r3
 800780a:	2280      	movs	r2, #128	; 0x80
 800780c:	00d2      	lsls	r2, r2, #3
 800780e:	4694      	mov	ip, r2
 8007810:	4463      	add	r3, ip
 8007812:	617b      	str	r3, [r7, #20]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	88db      	ldrh	r3, [r3, #6]
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	b29b      	uxth	r3, r3
 800781c:	18db      	adds	r3, r3, r3
 800781e:	b29a      	uxth	r2, r3
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	18d2      	adds	r2, r2, r3
 800782e:	2112      	movs	r1, #18
 8007830:	187b      	adds	r3, r7, r1
 8007832:	8812      	ldrh	r2, [r2, #0]
 8007834:	801a      	strh	r2, [r3, #0]
 8007836:	187b      	adds	r3, r7, r1
 8007838:	881b      	ldrh	r3, [r3, #0]
 800783a:	2240      	movs	r2, #64	; 0x40
 800783c:	4013      	ands	r3, r2
 800783e:	d016      	beq.n	800786e <USB_ActivateEndpoint+0x17a>
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	18d3      	adds	r3, r2, r3
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29a      	uxth	r2, r3
 800784e:	2010      	movs	r0, #16
 8007850:	183b      	adds	r3, r7, r0
 8007852:	4957      	ldr	r1, [pc, #348]	; (80079b0 <USB_ActivateEndpoint+0x2bc>)
 8007854:	400a      	ands	r2, r1
 8007856:	801a      	strh	r2, [r3, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	18d3      	adds	r3, r2, r3
 8007862:	183a      	adds	r2, r7, r0
 8007864:	8812      	ldrh	r2, [r2, #0]
 8007866:	4953      	ldr	r1, [pc, #332]	; (80079b4 <USB_ActivateEndpoint+0x2c0>)
 8007868:	430a      	orrs	r2, r1
 800786a:	b292      	uxth	r2, r2
 800786c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	78db      	ldrb	r3, [r3, #3]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d01d      	beq.n	80078b2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	18d3      	adds	r3, r2, r3
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29a      	uxth	r2, r3
 8007884:	200c      	movs	r0, #12
 8007886:	183b      	adds	r3, r7, r0
 8007888:	494b      	ldr	r1, [pc, #300]	; (80079b8 <USB_ActivateEndpoint+0x2c4>)
 800788a:	400a      	ands	r2, r1
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	183b      	adds	r3, r7, r0
 8007890:	183a      	adds	r2, r7, r0
 8007892:	8812      	ldrh	r2, [r2, #0]
 8007894:	2120      	movs	r1, #32
 8007896:	404a      	eors	r2, r1
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	18d3      	adds	r3, r2, r3
 80078a4:	183a      	adds	r2, r7, r0
 80078a6:	8812      	ldrh	r2, [r2, #0]
 80078a8:	4940      	ldr	r1, [pc, #256]	; (80079ac <USB_ActivateEndpoint+0x2b8>)
 80078aa:	430a      	orrs	r2, r1
 80078ac:	b292      	uxth	r2, r2
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	e2b4      	b.n	8007e1c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	18d3      	adds	r3, r2, r3
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29a      	uxth	r2, r3
 80078c0:	200e      	movs	r0, #14
 80078c2:	183b      	adds	r3, r7, r0
 80078c4:	493c      	ldr	r1, [pc, #240]	; (80079b8 <USB_ActivateEndpoint+0x2c4>)
 80078c6:	400a      	ands	r2, r1
 80078c8:	801a      	strh	r2, [r3, #0]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	18d3      	adds	r3, r2, r3
 80078d4:	183a      	adds	r2, r7, r0
 80078d6:	8812      	ldrh	r2, [r2, #0]
 80078d8:	4934      	ldr	r1, [pc, #208]	; (80079ac <USB_ActivateEndpoint+0x2b8>)
 80078da:	430a      	orrs	r2, r1
 80078dc:	b292      	uxth	r2, r2
 80078de:	801a      	strh	r2, [r3, #0]
 80078e0:	e29c      	b.n	8007e1c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	633b      	str	r3, [r7, #48]	; 0x30
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2250      	movs	r2, #80	; 0x50
 80078ea:	5a9b      	ldrh	r3, [r3, r2]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	001a      	movs	r2, r3
 80078f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f2:	189b      	adds	r3, r3, r2
 80078f4:	633b      	str	r3, [r7, #48]	; 0x30
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	00da      	lsls	r2, r3, #3
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	18d3      	adds	r3, r2, r3
 8007900:	4a2e      	ldr	r2, [pc, #184]	; (80079bc <USB_ActivateEndpoint+0x2c8>)
 8007902:	4694      	mov	ip, r2
 8007904:	4463      	add	r3, ip
 8007906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	88db      	ldrh	r3, [r3, #6]
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	b29b      	uxth	r3, r3
 8007910:	18db      	adds	r3, r3, r3
 8007912:	b29a      	uxth	r2, r3
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	62bb      	str	r3, [r7, #40]	; 0x28
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2250      	movs	r2, #80	; 0x50
 8007920:	5a9b      	ldrh	r3, [r3, r2]
 8007922:	b29b      	uxth	r3, r3
 8007924:	001a      	movs	r2, r3
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	189b      	adds	r3, r3, r2
 800792a:	62bb      	str	r3, [r7, #40]	; 0x28
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	00da      	lsls	r2, r3, #3
 8007932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007934:	18d3      	adds	r3, r2, r3
 8007936:	4a22      	ldr	r2, [pc, #136]	; (80079c0 <USB_ActivateEndpoint+0x2cc>)
 8007938:	4694      	mov	ip, r2
 800793a:	4463      	add	r3, ip
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	059b      	lsls	r3, r3, #22
 8007946:	0d9b      	lsrs	r3, r3, #22
 8007948:	b29a      	uxth	r2, r3
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	801a      	strh	r2, [r3, #0]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b3e      	cmp	r3, #62	; 0x3e
 8007954:	d91a      	bls.n	800798c <USB_ActivateEndpoint+0x298>
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	66bb      	str	r3, [r7, #104]	; 0x68
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	221f      	movs	r2, #31
 8007964:	4013      	ands	r3, r2
 8007966:	d102      	bne.n	800796e <USB_ActivateEndpoint+0x27a>
 8007968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800796a:	3b01      	subs	r3, #1
 800796c:	66bb      	str	r3, [r7, #104]	; 0x68
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	881b      	ldrh	r3, [r3, #0]
 8007972:	b29a      	uxth	r2, r3
 8007974:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007976:	b29b      	uxth	r3, r3
 8007978:	029b      	lsls	r3, r3, #10
 800797a:	b29b      	uxth	r3, r3
 800797c:	4313      	orrs	r3, r2
 800797e:	b29b      	uxth	r3, r3
 8007980:	4a10      	ldr	r2, [pc, #64]	; (80079c4 <USB_ActivateEndpoint+0x2d0>)
 8007982:	4313      	orrs	r3, r2
 8007984:	b29a      	uxth	r2, r3
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	801a      	strh	r2, [r3, #0]
 800798a:	e034      	b.n	80079f6 <USB_ActivateEndpoint+0x302>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d119      	bne.n	80079c8 <USB_ActivateEndpoint+0x2d4>
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	4a0a      	ldr	r2, [pc, #40]	; (80079c4 <USB_ActivateEndpoint+0x2d0>)
 800799c:	4313      	orrs	r3, r2
 800799e:	b29a      	uxth	r2, r3
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	801a      	strh	r2, [r3, #0]
 80079a4:	e027      	b.n	80079f6 <USB_ActivateEndpoint+0x302>
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	ffff898f 	.word	0xffff898f
 80079ac:	ffff8080 	.word	0xffff8080
 80079b0:	ffff8f8f 	.word	0xffff8f8f
 80079b4:	ffff80c0 	.word	0xffff80c0
 80079b8:	ffff8fbf 	.word	0xffff8fbf
 80079bc:	00000404 	.word	0x00000404
 80079c0:	00000406 	.word	0x00000406
 80079c4:	ffff8000 	.word	0xffff8000
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	085b      	lsrs	r3, r3, #1
 80079ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	2201      	movs	r2, #1
 80079d6:	4013      	ands	r3, r2
 80079d8:	d002      	beq.n	80079e0 <USB_ActivateEndpoint+0x2ec>
 80079da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079dc:	3301      	adds	r3, #1
 80079de:	66bb      	str	r3, [r7, #104]	; 0x68
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	029b      	lsls	r3, r3, #10
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	4313      	orrs	r3, r2
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	18d2      	adds	r2, r2, r3
 8007a00:	2122      	movs	r1, #34	; 0x22
 8007a02:	187b      	adds	r3, r7, r1
 8007a04:	8812      	ldrh	r2, [r2, #0]
 8007a06:	801a      	strh	r2, [r3, #0]
 8007a08:	187b      	adds	r3, r7, r1
 8007a0a:	881a      	ldrh	r2, [r3, #0]
 8007a0c:	2380      	movs	r3, #128	; 0x80
 8007a0e:	01db      	lsls	r3, r3, #7
 8007a10:	4013      	ands	r3, r2
 8007a12:	d016      	beq.n	8007a42 <USB_ActivateEndpoint+0x34e>
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	18d3      	adds	r3, r2, r3
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	2020      	movs	r0, #32
 8007a24:	183b      	adds	r3, r7, r0
 8007a26:	49dd      	ldr	r1, [pc, #884]	; (8007d9c <USB_ActivateEndpoint+0x6a8>)
 8007a28:	400a      	ands	r2, r1
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	18d3      	adds	r3, r2, r3
 8007a36:	183a      	adds	r2, r7, r0
 8007a38:	8812      	ldrh	r2, [r2, #0]
 8007a3a:	49d9      	ldr	r1, [pc, #868]	; (8007da0 <USB_ActivateEndpoint+0x6ac>)
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	b292      	uxth	r2, r2
 8007a40:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d125      	bne.n	8007a96 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	18d3      	adds	r3, r2, r3
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	201c      	movs	r0, #28
 8007a5a:	183b      	adds	r3, r7, r0
 8007a5c:	49d1      	ldr	r1, [pc, #836]	; (8007da4 <USB_ActivateEndpoint+0x6b0>)
 8007a5e:	400a      	ands	r2, r1
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	183b      	adds	r3, r7, r0
 8007a64:	183a      	adds	r2, r7, r0
 8007a66:	8812      	ldrh	r2, [r2, #0]
 8007a68:	2180      	movs	r1, #128	; 0x80
 8007a6a:	0149      	lsls	r1, r1, #5
 8007a6c:	404a      	eors	r2, r1
 8007a6e:	801a      	strh	r2, [r3, #0]
 8007a70:	183b      	adds	r3, r7, r0
 8007a72:	183a      	adds	r2, r7, r0
 8007a74:	8812      	ldrh	r2, [r2, #0]
 8007a76:	2180      	movs	r1, #128	; 0x80
 8007a78:	0189      	lsls	r1, r1, #6
 8007a7a:	404a      	eors	r2, r1
 8007a7c:	801a      	strh	r2, [r3, #0]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	18d3      	adds	r3, r2, r3
 8007a88:	183a      	adds	r2, r7, r0
 8007a8a:	8812      	ldrh	r2, [r2, #0]
 8007a8c:	49c6      	ldr	r1, [pc, #792]	; (8007da8 <USB_ActivateEndpoint+0x6b4>)
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	b292      	uxth	r2, r2
 8007a92:	801a      	strh	r2, [r3, #0]
 8007a94:	e1c2      	b.n	8007e1c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	18d3      	adds	r3, r2, r3
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	201e      	movs	r0, #30
 8007aa6:	183b      	adds	r3, r7, r0
 8007aa8:	49be      	ldr	r1, [pc, #760]	; (8007da4 <USB_ActivateEndpoint+0x6b0>)
 8007aaa:	400a      	ands	r2, r1
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	183b      	adds	r3, r7, r0
 8007ab0:	183a      	adds	r2, r7, r0
 8007ab2:	8812      	ldrh	r2, [r2, #0]
 8007ab4:	2180      	movs	r1, #128	; 0x80
 8007ab6:	0189      	lsls	r1, r1, #6
 8007ab8:	404a      	eors	r2, r1
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	18d3      	adds	r3, r2, r3
 8007ac6:	183a      	adds	r2, r7, r0
 8007ac8:	8812      	ldrh	r2, [r2, #0]
 8007aca:	49b7      	ldr	r1, [pc, #732]	; (8007da8 <USB_ActivateEndpoint+0x6b4>)
 8007acc:	430a      	orrs	r2, r1
 8007ace:	b292      	uxth	r2, r2
 8007ad0:	801a      	strh	r2, [r3, #0]
 8007ad2:	e1a3      	b.n	8007e1c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	78db      	ldrb	r3, [r3, #3]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d117      	bne.n	8007b0c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	18d3      	adds	r3, r2, r3
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	2062      	movs	r0, #98	; 0x62
 8007aec:	183b      	adds	r3, r7, r0
 8007aee:	49ab      	ldr	r1, [pc, #684]	; (8007d9c <USB_ActivateEndpoint+0x6a8>)
 8007af0:	400a      	ands	r2, r1
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	18d3      	adds	r3, r2, r3
 8007afe:	183a      	adds	r2, r7, r0
 8007b00:	8812      	ldrh	r2, [r2, #0]
 8007b02:	49aa      	ldr	r1, [pc, #680]	; (8007dac <USB_ActivateEndpoint+0x6b8>)
 8007b04:	430a      	orrs	r2, r1
 8007b06:	b292      	uxth	r2, r2
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	e016      	b.n	8007b3a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	18d3      	adds	r3, r2, r3
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	2064      	movs	r0, #100	; 0x64
 8007b1c:	183b      	adds	r3, r7, r0
 8007b1e:	49a4      	ldr	r1, [pc, #656]	; (8007db0 <USB_ActivateEndpoint+0x6bc>)
 8007b20:	400a      	ands	r2, r1
 8007b22:	801a      	strh	r2, [r3, #0]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	18d3      	adds	r3, r2, r3
 8007b2e:	183a      	adds	r2, r7, r0
 8007b30:	8812      	ldrh	r2, [r2, #0]
 8007b32:	499d      	ldr	r1, [pc, #628]	; (8007da8 <USB_ActivateEndpoint+0x6b4>)
 8007b34:	430a      	orrs	r2, r1
 8007b36:	b292      	uxth	r2, r2
 8007b38:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2250      	movs	r2, #80	; 0x50
 8007b42:	5a9b      	ldrh	r3, [r3, r2]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	001a      	movs	r2, r3
 8007b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b4a:	189b      	adds	r3, r3, r2
 8007b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	00da      	lsls	r2, r3, #3
 8007b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b56:	18d3      	adds	r3, r2, r3
 8007b58:	2280      	movs	r2, #128	; 0x80
 8007b5a:	00d2      	lsls	r2, r2, #3
 8007b5c:	4694      	mov	ip, r2
 8007b5e:	4463      	add	r3, ip
 8007b60:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	891b      	ldrh	r3, [r3, #8]
 8007b66:	085b      	lsrs	r3, r3, #1
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	18db      	adds	r3, r3, r3
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	657b      	str	r3, [r7, #84]	; 0x54
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2250      	movs	r2, #80	; 0x50
 8007b7a:	5a9b      	ldrh	r3, [r3, r2]
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	001a      	movs	r2, r3
 8007b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b82:	189b      	adds	r3, r3, r2
 8007b84:	657b      	str	r3, [r7, #84]	; 0x54
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	00da      	lsls	r2, r3, #3
 8007b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b8e:	18d3      	adds	r3, r2, r3
 8007b90:	4a88      	ldr	r2, [pc, #544]	; (8007db4 <USB_ActivateEndpoint+0x6c0>)
 8007b92:	4694      	mov	ip, r2
 8007b94:	4463      	add	r3, ip
 8007b96:	653b      	str	r3, [r7, #80]	; 0x50
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	895b      	ldrh	r3, [r3, #10]
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	18db      	adds	r3, r3, r3
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d000      	beq.n	8007bb2 <USB_ActivateEndpoint+0x4be>
 8007bb0:	e087      	b.n	8007cc2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	18d2      	adds	r2, r2, r3
 8007bbc:	2140      	movs	r1, #64	; 0x40
 8007bbe:	187b      	adds	r3, r7, r1
 8007bc0:	8812      	ldrh	r2, [r2, #0]
 8007bc2:	801a      	strh	r2, [r3, #0]
 8007bc4:	187b      	adds	r3, r7, r1
 8007bc6:	881a      	ldrh	r2, [r3, #0]
 8007bc8:	2380      	movs	r3, #128	; 0x80
 8007bca:	01db      	lsls	r3, r3, #7
 8007bcc:	4013      	ands	r3, r2
 8007bce:	d016      	beq.n	8007bfe <USB_ActivateEndpoint+0x50a>
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	18d3      	adds	r3, r2, r3
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	203e      	movs	r0, #62	; 0x3e
 8007be0:	183b      	adds	r3, r7, r0
 8007be2:	496e      	ldr	r1, [pc, #440]	; (8007d9c <USB_ActivateEndpoint+0x6a8>)
 8007be4:	400a      	ands	r2, r1
 8007be6:	801a      	strh	r2, [r3, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	18d3      	adds	r3, r2, r3
 8007bf2:	183a      	adds	r2, r7, r0
 8007bf4:	8812      	ldrh	r2, [r2, #0]
 8007bf6:	496a      	ldr	r1, [pc, #424]	; (8007da0 <USB_ActivateEndpoint+0x6ac>)
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	18d2      	adds	r2, r2, r3
 8007c08:	213c      	movs	r1, #60	; 0x3c
 8007c0a:	187b      	adds	r3, r7, r1
 8007c0c:	8812      	ldrh	r2, [r2, #0]
 8007c0e:	801a      	strh	r2, [r3, #0]
 8007c10:	187b      	adds	r3, r7, r1
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	2240      	movs	r2, #64	; 0x40
 8007c16:	4013      	ands	r3, r2
 8007c18:	d016      	beq.n	8007c48 <USB_ActivateEndpoint+0x554>
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	18d3      	adds	r3, r2, r3
 8007c24:	881b      	ldrh	r3, [r3, #0]
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	203a      	movs	r0, #58	; 0x3a
 8007c2a:	183b      	adds	r3, r7, r0
 8007c2c:	495b      	ldr	r1, [pc, #364]	; (8007d9c <USB_ActivateEndpoint+0x6a8>)
 8007c2e:	400a      	ands	r2, r1
 8007c30:	801a      	strh	r2, [r3, #0]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	18d3      	adds	r3, r2, r3
 8007c3c:	183a      	adds	r2, r7, r0
 8007c3e:	8812      	ldrh	r2, [r2, #0]
 8007c40:	495d      	ldr	r1, [pc, #372]	; (8007db8 <USB_ActivateEndpoint+0x6c4>)
 8007c42:	430a      	orrs	r2, r1
 8007c44:	b292      	uxth	r2, r2
 8007c46:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	18d3      	adds	r3, r2, r3
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	2038      	movs	r0, #56	; 0x38
 8007c58:	183b      	adds	r3, r7, r0
 8007c5a:	4952      	ldr	r1, [pc, #328]	; (8007da4 <USB_ActivateEndpoint+0x6b0>)
 8007c5c:	400a      	ands	r2, r1
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	183b      	adds	r3, r7, r0
 8007c62:	183a      	adds	r2, r7, r0
 8007c64:	8812      	ldrh	r2, [r2, #0]
 8007c66:	2180      	movs	r1, #128	; 0x80
 8007c68:	0149      	lsls	r1, r1, #5
 8007c6a:	404a      	eors	r2, r1
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	183b      	adds	r3, r7, r0
 8007c70:	183a      	adds	r2, r7, r0
 8007c72:	8812      	ldrh	r2, [r2, #0]
 8007c74:	2180      	movs	r1, #128	; 0x80
 8007c76:	0189      	lsls	r1, r1, #6
 8007c78:	404a      	eors	r2, r1
 8007c7a:	801a      	strh	r2, [r3, #0]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	18d3      	adds	r3, r2, r3
 8007c86:	183a      	adds	r2, r7, r0
 8007c88:	8812      	ldrh	r2, [r2, #0]
 8007c8a:	4947      	ldr	r1, [pc, #284]	; (8007da8 <USB_ActivateEndpoint+0x6b4>)
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	18d3      	adds	r3, r2, r3
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	2036      	movs	r0, #54	; 0x36
 8007ca2:	183b      	adds	r3, r7, r0
 8007ca4:	4945      	ldr	r1, [pc, #276]	; (8007dbc <USB_ActivateEndpoint+0x6c8>)
 8007ca6:	400a      	ands	r2, r1
 8007ca8:	801a      	strh	r2, [r3, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	18d3      	adds	r3, r2, r3
 8007cb4:	183a      	adds	r2, r7, r0
 8007cb6:	8812      	ldrh	r2, [r2, #0]
 8007cb8:	493b      	ldr	r1, [pc, #236]	; (8007da8 <USB_ActivateEndpoint+0x6b4>)
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	b292      	uxth	r2, r2
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	e0ac      	b.n	8007e1c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	18d2      	adds	r2, r2, r3
 8007ccc:	214e      	movs	r1, #78	; 0x4e
 8007cce:	187b      	adds	r3, r7, r1
 8007cd0:	8812      	ldrh	r2, [r2, #0]
 8007cd2:	801a      	strh	r2, [r3, #0]
 8007cd4:	187b      	adds	r3, r7, r1
 8007cd6:	881a      	ldrh	r2, [r3, #0]
 8007cd8:	2380      	movs	r3, #128	; 0x80
 8007cda:	01db      	lsls	r3, r3, #7
 8007cdc:	4013      	ands	r3, r2
 8007cde:	d016      	beq.n	8007d0e <USB_ActivateEndpoint+0x61a>
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	18d3      	adds	r3, r2, r3
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	204c      	movs	r0, #76	; 0x4c
 8007cf0:	183b      	adds	r3, r7, r0
 8007cf2:	492a      	ldr	r1, [pc, #168]	; (8007d9c <USB_ActivateEndpoint+0x6a8>)
 8007cf4:	400a      	ands	r2, r1
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	18d3      	adds	r3, r2, r3
 8007d02:	183a      	adds	r2, r7, r0
 8007d04:	8812      	ldrh	r2, [r2, #0]
 8007d06:	4926      	ldr	r1, [pc, #152]	; (8007da0 <USB_ActivateEndpoint+0x6ac>)
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	b292      	uxth	r2, r2
 8007d0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	18d2      	adds	r2, r2, r3
 8007d18:	214a      	movs	r1, #74	; 0x4a
 8007d1a:	187b      	adds	r3, r7, r1
 8007d1c:	8812      	ldrh	r2, [r2, #0]
 8007d1e:	801a      	strh	r2, [r3, #0]
 8007d20:	187b      	adds	r3, r7, r1
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	2240      	movs	r2, #64	; 0x40
 8007d26:	4013      	ands	r3, r2
 8007d28:	d016      	beq.n	8007d58 <USB_ActivateEndpoint+0x664>
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	18d3      	adds	r3, r2, r3
 8007d34:	881b      	ldrh	r3, [r3, #0]
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	2048      	movs	r0, #72	; 0x48
 8007d3a:	183b      	adds	r3, r7, r0
 8007d3c:	4917      	ldr	r1, [pc, #92]	; (8007d9c <USB_ActivateEndpoint+0x6a8>)
 8007d3e:	400a      	ands	r2, r1
 8007d40:	801a      	strh	r2, [r3, #0]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	18d3      	adds	r3, r2, r3
 8007d4c:	183a      	adds	r2, r7, r0
 8007d4e:	8812      	ldrh	r2, [r2, #0]
 8007d50:	4919      	ldr	r1, [pc, #100]	; (8007db8 <USB_ActivateEndpoint+0x6c4>)
 8007d52:	430a      	orrs	r2, r1
 8007d54:	b292      	uxth	r2, r2
 8007d56:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	78db      	ldrb	r3, [r3, #3]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d02f      	beq.n	8007dc0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	18d3      	adds	r3, r2, r3
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	2044      	movs	r0, #68	; 0x44
 8007d70:	183b      	adds	r3, r7, r0
 8007d72:	4912      	ldr	r1, [pc, #72]	; (8007dbc <USB_ActivateEndpoint+0x6c8>)
 8007d74:	400a      	ands	r2, r1
 8007d76:	801a      	strh	r2, [r3, #0]
 8007d78:	183b      	adds	r3, r7, r0
 8007d7a:	183a      	adds	r2, r7, r0
 8007d7c:	8812      	ldrh	r2, [r2, #0]
 8007d7e:	2120      	movs	r1, #32
 8007d80:	404a      	eors	r2, r1
 8007d82:	801a      	strh	r2, [r3, #0]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	18d3      	adds	r3, r2, r3
 8007d8e:	183a      	adds	r2, r7, r0
 8007d90:	8812      	ldrh	r2, [r2, #0]
 8007d92:	4905      	ldr	r1, [pc, #20]	; (8007da8 <USB_ActivateEndpoint+0x6b4>)
 8007d94:	430a      	orrs	r2, r1
 8007d96:	b292      	uxth	r2, r2
 8007d98:	801a      	strh	r2, [r3, #0]
 8007d9a:	e028      	b.n	8007dee <USB_ActivateEndpoint+0x6fa>
 8007d9c:	ffff8f8f 	.word	0xffff8f8f
 8007da0:	ffffc080 	.word	0xffffc080
 8007da4:	ffffbf8f 	.word	0xffffbf8f
 8007da8:	ffff8080 	.word	0xffff8080
 8007dac:	ffff8180 	.word	0xffff8180
 8007db0:	ffff8e8f 	.word	0xffff8e8f
 8007db4:	00000404 	.word	0x00000404
 8007db8:	ffff80c0 	.word	0xffff80c0
 8007dbc:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	18d3      	adds	r3, r2, r3
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	2046      	movs	r0, #70	; 0x46
 8007dd0:	183b      	adds	r3, r7, r0
 8007dd2:	4916      	ldr	r1, [pc, #88]	; (8007e2c <USB_ActivateEndpoint+0x738>)
 8007dd4:	400a      	ands	r2, r1
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	18d3      	adds	r3, r2, r3
 8007de2:	183a      	adds	r2, r7, r0
 8007de4:	8812      	ldrh	r2, [r2, #0]
 8007de6:	4912      	ldr	r1, [pc, #72]	; (8007e30 <USB_ActivateEndpoint+0x73c>)
 8007de8:	430a      	orrs	r2, r1
 8007dea:	b292      	uxth	r2, r2
 8007dec:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	18d3      	adds	r3, r2, r3
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	2042      	movs	r0, #66	; 0x42
 8007dfe:	183b      	adds	r3, r7, r0
 8007e00:	490c      	ldr	r1, [pc, #48]	; (8007e34 <USB_ActivateEndpoint+0x740>)
 8007e02:	400a      	ands	r2, r1
 8007e04:	801a      	strh	r2, [r3, #0]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	18d3      	adds	r3, r2, r3
 8007e10:	183a      	adds	r2, r7, r0
 8007e12:	8812      	ldrh	r2, [r2, #0]
 8007e14:	4906      	ldr	r1, [pc, #24]	; (8007e30 <USB_ActivateEndpoint+0x73c>)
 8007e16:	430a      	orrs	r2, r1
 8007e18:	b292      	uxth	r2, r2
 8007e1a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007e1c:	236f      	movs	r3, #111	; 0x6f
 8007e1e:	18fb      	adds	r3, r7, r3
 8007e20:	781b      	ldrb	r3, [r3, #0]
}
 8007e22:	0018      	movs	r0, r3
 8007e24:	46bd      	mov	sp, r7
 8007e26:	b01c      	add	sp, #112	; 0x70
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	ffff8fbf 	.word	0xffff8fbf
 8007e30:	ffff8080 	.word	0xffff8080
 8007e34:	ffffbf8f 	.word	0xffffbf8f

08007e38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08c      	sub	sp, #48	; 0x30
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	7b1b      	ldrb	r3, [r3, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d000      	beq.n	8007e4c <USB_DeactivateEndpoint+0x14>
 8007e4a:	e07e      	b.n	8007f4a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d03c      	beq.n	8007ece <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	18d2      	adds	r2, r2, r3
 8007e5e:	210c      	movs	r1, #12
 8007e60:	187b      	adds	r3, r7, r1
 8007e62:	8812      	ldrh	r2, [r2, #0]
 8007e64:	801a      	strh	r2, [r3, #0]
 8007e66:	187b      	adds	r3, r7, r1
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	2240      	movs	r2, #64	; 0x40
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	d016      	beq.n	8007e9e <USB_DeactivateEndpoint+0x66>
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	18d3      	adds	r3, r2, r3
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	200a      	movs	r0, #10
 8007e80:	183b      	adds	r3, r7, r0
 8007e82:	49c7      	ldr	r1, [pc, #796]	; (80081a0 <USB_DeactivateEndpoint+0x368>)
 8007e84:	400a      	ands	r2, r1
 8007e86:	801a      	strh	r2, [r3, #0]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	18d3      	adds	r3, r2, r3
 8007e92:	183a      	adds	r2, r7, r0
 8007e94:	8812      	ldrh	r2, [r2, #0]
 8007e96:	49c3      	ldr	r1, [pc, #780]	; (80081a4 <USB_DeactivateEndpoint+0x36c>)
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	b292      	uxth	r2, r2
 8007e9c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	18d3      	adds	r3, r2, r3
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	2008      	movs	r0, #8
 8007eae:	183b      	adds	r3, r7, r0
 8007eb0:	49bd      	ldr	r1, [pc, #756]	; (80081a8 <USB_DeactivateEndpoint+0x370>)
 8007eb2:	400a      	ands	r2, r1
 8007eb4:	801a      	strh	r2, [r3, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	18d3      	adds	r3, r2, r3
 8007ec0:	183a      	adds	r2, r7, r0
 8007ec2:	8812      	ldrh	r2, [r2, #0]
 8007ec4:	49b9      	ldr	r1, [pc, #740]	; (80081ac <USB_DeactivateEndpoint+0x374>)
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	b292      	uxth	r2, r2
 8007eca:	801a      	strh	r2, [r3, #0]
 8007ecc:	e163      	b.n	8008196 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	18d2      	adds	r2, r2, r3
 8007ed8:	2112      	movs	r1, #18
 8007eda:	187b      	adds	r3, r7, r1
 8007edc:	8812      	ldrh	r2, [r2, #0]
 8007ede:	801a      	strh	r2, [r3, #0]
 8007ee0:	187b      	adds	r3, r7, r1
 8007ee2:	881a      	ldrh	r2, [r3, #0]
 8007ee4:	2380      	movs	r3, #128	; 0x80
 8007ee6:	01db      	lsls	r3, r3, #7
 8007ee8:	4013      	ands	r3, r2
 8007eea:	d016      	beq.n	8007f1a <USB_DeactivateEndpoint+0xe2>
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	18d3      	adds	r3, r2, r3
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	2010      	movs	r0, #16
 8007efc:	183b      	adds	r3, r7, r0
 8007efe:	49a8      	ldr	r1, [pc, #672]	; (80081a0 <USB_DeactivateEndpoint+0x368>)
 8007f00:	400a      	ands	r2, r1
 8007f02:	801a      	strh	r2, [r3, #0]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	18d3      	adds	r3, r2, r3
 8007f0e:	183a      	adds	r2, r7, r0
 8007f10:	8812      	ldrh	r2, [r2, #0]
 8007f12:	49a7      	ldr	r1, [pc, #668]	; (80081b0 <USB_DeactivateEndpoint+0x378>)
 8007f14:	430a      	orrs	r2, r1
 8007f16:	b292      	uxth	r2, r2
 8007f18:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	18d3      	adds	r3, r2, r3
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	200e      	movs	r0, #14
 8007f2a:	183b      	adds	r3, r7, r0
 8007f2c:	49a1      	ldr	r1, [pc, #644]	; (80081b4 <USB_DeactivateEndpoint+0x37c>)
 8007f2e:	400a      	ands	r2, r1
 8007f30:	801a      	strh	r2, [r3, #0]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	18d3      	adds	r3, r2, r3
 8007f3c:	183a      	adds	r2, r7, r0
 8007f3e:	8812      	ldrh	r2, [r2, #0]
 8007f40:	499a      	ldr	r1, [pc, #616]	; (80081ac <USB_DeactivateEndpoint+0x374>)
 8007f42:	430a      	orrs	r2, r1
 8007f44:	b292      	uxth	r2, r2
 8007f46:	801a      	strh	r2, [r3, #0]
 8007f48:	e125      	b.n	8008196 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	785b      	ldrb	r3, [r3, #1]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d000      	beq.n	8007f54 <USB_DeactivateEndpoint+0x11c>
 8007f52:	e090      	b.n	8008076 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	18d2      	adds	r2, r2, r3
 8007f5e:	2120      	movs	r1, #32
 8007f60:	187b      	adds	r3, r7, r1
 8007f62:	8812      	ldrh	r2, [r2, #0]
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	187b      	adds	r3, r7, r1
 8007f68:	881a      	ldrh	r2, [r3, #0]
 8007f6a:	2380      	movs	r3, #128	; 0x80
 8007f6c:	01db      	lsls	r3, r3, #7
 8007f6e:	4013      	ands	r3, r2
 8007f70:	d016      	beq.n	8007fa0 <USB_DeactivateEndpoint+0x168>
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	18d3      	adds	r3, r2, r3
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	201e      	movs	r0, #30
 8007f82:	183b      	adds	r3, r7, r0
 8007f84:	4986      	ldr	r1, [pc, #536]	; (80081a0 <USB_DeactivateEndpoint+0x368>)
 8007f86:	400a      	ands	r2, r1
 8007f88:	801a      	strh	r2, [r3, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	18d3      	adds	r3, r2, r3
 8007f94:	183a      	adds	r2, r7, r0
 8007f96:	8812      	ldrh	r2, [r2, #0]
 8007f98:	4985      	ldr	r1, [pc, #532]	; (80081b0 <USB_DeactivateEndpoint+0x378>)
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	b292      	uxth	r2, r2
 8007f9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	18d2      	adds	r2, r2, r3
 8007faa:	211c      	movs	r1, #28
 8007fac:	187b      	adds	r3, r7, r1
 8007fae:	8812      	ldrh	r2, [r2, #0]
 8007fb0:	801a      	strh	r2, [r3, #0]
 8007fb2:	187b      	adds	r3, r7, r1
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	2240      	movs	r2, #64	; 0x40
 8007fb8:	4013      	ands	r3, r2
 8007fba:	d016      	beq.n	8007fea <USB_DeactivateEndpoint+0x1b2>
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	18d3      	adds	r3, r2, r3
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	201a      	movs	r0, #26
 8007fcc:	183b      	adds	r3, r7, r0
 8007fce:	4974      	ldr	r1, [pc, #464]	; (80081a0 <USB_DeactivateEndpoint+0x368>)
 8007fd0:	400a      	ands	r2, r1
 8007fd2:	801a      	strh	r2, [r3, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	18d3      	adds	r3, r2, r3
 8007fde:	183a      	adds	r2, r7, r0
 8007fe0:	8812      	ldrh	r2, [r2, #0]
 8007fe2:	4970      	ldr	r1, [pc, #448]	; (80081a4 <USB_DeactivateEndpoint+0x36c>)
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	b292      	uxth	r2, r2
 8007fe8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	18d3      	adds	r3, r2, r3
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	2018      	movs	r0, #24
 8007ffa:	183b      	adds	r3, r7, r0
 8007ffc:	4968      	ldr	r1, [pc, #416]	; (80081a0 <USB_DeactivateEndpoint+0x368>)
 8007ffe:	400a      	ands	r2, r1
 8008000:	801a      	strh	r2, [r3, #0]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	18d3      	adds	r3, r2, r3
 800800c:	183a      	adds	r2, r7, r0
 800800e:	8812      	ldrh	r2, [r2, #0]
 8008010:	4964      	ldr	r1, [pc, #400]	; (80081a4 <USB_DeactivateEndpoint+0x36c>)
 8008012:	430a      	orrs	r2, r1
 8008014:	b292      	uxth	r2, r2
 8008016:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	18d3      	adds	r3, r2, r3
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29a      	uxth	r2, r3
 8008026:	2016      	movs	r0, #22
 8008028:	183b      	adds	r3, r7, r0
 800802a:	4962      	ldr	r1, [pc, #392]	; (80081b4 <USB_DeactivateEndpoint+0x37c>)
 800802c:	400a      	ands	r2, r1
 800802e:	801a      	strh	r2, [r3, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	18d3      	adds	r3, r2, r3
 800803a:	183a      	adds	r2, r7, r0
 800803c:	8812      	ldrh	r2, [r2, #0]
 800803e:	495b      	ldr	r1, [pc, #364]	; (80081ac <USB_DeactivateEndpoint+0x374>)
 8008040:	430a      	orrs	r2, r1
 8008042:	b292      	uxth	r2, r2
 8008044:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	18d3      	adds	r3, r2, r3
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29a      	uxth	r2, r3
 8008054:	2014      	movs	r0, #20
 8008056:	183b      	adds	r3, r7, r0
 8008058:	4953      	ldr	r1, [pc, #332]	; (80081a8 <USB_DeactivateEndpoint+0x370>)
 800805a:	400a      	ands	r2, r1
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	18d3      	adds	r3, r2, r3
 8008068:	183a      	adds	r2, r7, r0
 800806a:	8812      	ldrh	r2, [r2, #0]
 800806c:	494f      	ldr	r1, [pc, #316]	; (80081ac <USB_DeactivateEndpoint+0x374>)
 800806e:	430a      	orrs	r2, r1
 8008070:	b292      	uxth	r2, r2
 8008072:	801a      	strh	r2, [r3, #0]
 8008074:	e08f      	b.n	8008196 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	18d2      	adds	r2, r2, r3
 8008080:	212e      	movs	r1, #46	; 0x2e
 8008082:	187b      	adds	r3, r7, r1
 8008084:	8812      	ldrh	r2, [r2, #0]
 8008086:	801a      	strh	r2, [r3, #0]
 8008088:	187b      	adds	r3, r7, r1
 800808a:	881a      	ldrh	r2, [r3, #0]
 800808c:	2380      	movs	r3, #128	; 0x80
 800808e:	01db      	lsls	r3, r3, #7
 8008090:	4013      	ands	r3, r2
 8008092:	d016      	beq.n	80080c2 <USB_DeactivateEndpoint+0x28a>
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	18d3      	adds	r3, r2, r3
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	202c      	movs	r0, #44	; 0x2c
 80080a4:	183b      	adds	r3, r7, r0
 80080a6:	493e      	ldr	r1, [pc, #248]	; (80081a0 <USB_DeactivateEndpoint+0x368>)
 80080a8:	400a      	ands	r2, r1
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	18d3      	adds	r3, r2, r3
 80080b6:	183a      	adds	r2, r7, r0
 80080b8:	8812      	ldrh	r2, [r2, #0]
 80080ba:	493d      	ldr	r1, [pc, #244]	; (80081b0 <USB_DeactivateEndpoint+0x378>)
 80080bc:	430a      	orrs	r2, r1
 80080be:	b292      	uxth	r2, r2
 80080c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	18d2      	adds	r2, r2, r3
 80080cc:	212a      	movs	r1, #42	; 0x2a
 80080ce:	187b      	adds	r3, r7, r1
 80080d0:	8812      	ldrh	r2, [r2, #0]
 80080d2:	801a      	strh	r2, [r3, #0]
 80080d4:	187b      	adds	r3, r7, r1
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	2240      	movs	r2, #64	; 0x40
 80080da:	4013      	ands	r3, r2
 80080dc:	d016      	beq.n	800810c <USB_DeactivateEndpoint+0x2d4>
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	18d3      	adds	r3, r2, r3
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	2028      	movs	r0, #40	; 0x28
 80080ee:	183b      	adds	r3, r7, r0
 80080f0:	492b      	ldr	r1, [pc, #172]	; (80081a0 <USB_DeactivateEndpoint+0x368>)
 80080f2:	400a      	ands	r2, r1
 80080f4:	801a      	strh	r2, [r3, #0]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	18d3      	adds	r3, r2, r3
 8008100:	183a      	adds	r2, r7, r0
 8008102:	8812      	ldrh	r2, [r2, #0]
 8008104:	4927      	ldr	r1, [pc, #156]	; (80081a4 <USB_DeactivateEndpoint+0x36c>)
 8008106:	430a      	orrs	r2, r1
 8008108:	b292      	uxth	r2, r2
 800810a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	18d3      	adds	r3, r2, r3
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29a      	uxth	r2, r3
 800811a:	2026      	movs	r0, #38	; 0x26
 800811c:	183b      	adds	r3, r7, r0
 800811e:	4920      	ldr	r1, [pc, #128]	; (80081a0 <USB_DeactivateEndpoint+0x368>)
 8008120:	400a      	ands	r2, r1
 8008122:	801a      	strh	r2, [r3, #0]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	18d3      	adds	r3, r2, r3
 800812e:	183a      	adds	r2, r7, r0
 8008130:	8812      	ldrh	r2, [r2, #0]
 8008132:	491f      	ldr	r1, [pc, #124]	; (80081b0 <USB_DeactivateEndpoint+0x378>)
 8008134:	430a      	orrs	r2, r1
 8008136:	b292      	uxth	r2, r2
 8008138:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	18d3      	adds	r3, r2, r3
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29a      	uxth	r2, r3
 8008148:	2024      	movs	r0, #36	; 0x24
 800814a:	183b      	adds	r3, r7, r0
 800814c:	4916      	ldr	r1, [pc, #88]	; (80081a8 <USB_DeactivateEndpoint+0x370>)
 800814e:	400a      	ands	r2, r1
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	18d3      	adds	r3, r2, r3
 800815c:	183a      	adds	r2, r7, r0
 800815e:	8812      	ldrh	r2, [r2, #0]
 8008160:	4912      	ldr	r1, [pc, #72]	; (80081ac <USB_DeactivateEndpoint+0x374>)
 8008162:	430a      	orrs	r2, r1
 8008164:	b292      	uxth	r2, r2
 8008166:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	18d3      	adds	r3, r2, r3
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29a      	uxth	r2, r3
 8008176:	2022      	movs	r0, #34	; 0x22
 8008178:	183b      	adds	r3, r7, r0
 800817a:	490e      	ldr	r1, [pc, #56]	; (80081b4 <USB_DeactivateEndpoint+0x37c>)
 800817c:	400a      	ands	r2, r1
 800817e:	801a      	strh	r2, [r3, #0]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	18d3      	adds	r3, r2, r3
 800818a:	183a      	adds	r2, r7, r0
 800818c:	8812      	ldrh	r2, [r2, #0]
 800818e:	4907      	ldr	r1, [pc, #28]	; (80081ac <USB_DeactivateEndpoint+0x374>)
 8008190:	430a      	orrs	r2, r1
 8008192:	b292      	uxth	r2, r2
 8008194:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	0018      	movs	r0, r3
 800819a:	46bd      	mov	sp, r7
 800819c:	b00c      	add	sp, #48	; 0x30
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	ffff8f8f 	.word	0xffff8f8f
 80081a4:	ffff80c0 	.word	0xffff80c0
 80081a8:	ffff8fbf 	.word	0xffff8fbf
 80081ac:	ffff8080 	.word	0xffff8080
 80081b0:	ffffc080 	.word	0xffffc080
 80081b4:	ffffbf8f 	.word	0xffffbf8f

080081b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081b8:	b590      	push	{r4, r7, lr}
 80081ba:	b0c3      	sub	sp, #268	; 0x10c
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	785b      	ldrb	r3, [r3, #1]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d001      	beq.n	80081ce <USB_EPStartXfer+0x16>
 80081ca:	f000 fd2d 	bl	8008c28 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d905      	bls.n	80081e6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	1d7a      	adds	r2, r7, #5
 80081e0:	32ff      	adds	r2, #255	; 0xff
 80081e2:	6013      	str	r3, [r2, #0]
 80081e4:	e004      	b.n	80081f0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	1d7a      	adds	r2, r7, #5
 80081ec:	32ff      	adds	r2, #255	; 0xff
 80081ee:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	7b1b      	ldrb	r3, [r3, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d125      	bne.n	8008244 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	6959      	ldr	r1, [r3, #20]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	88da      	ldrh	r2, [r3, #6]
 8008200:	1d7b      	adds	r3, r7, #5
 8008202:	33ff      	adds	r3, #255	; 0xff
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	b29b      	uxth	r3, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 fa47 	bl	800969c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	613b      	str	r3, [r7, #16]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2250      	movs	r2, #80	; 0x50
 8008216:	5a9b      	ldrh	r3, [r3, r2]
 8008218:	b29b      	uxth	r3, r3
 800821a:	001a      	movs	r2, r3
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	189b      	adds	r3, r3, r2
 8008220:	613b      	str	r3, [r7, #16]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	00da      	lsls	r2, r3, #3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	18d3      	adds	r3, r2, r3
 800822c:	4ad7      	ldr	r2, [pc, #860]	; (800858c <USB_EPStartXfer+0x3d4>)
 800822e:	4694      	mov	ip, r2
 8008230:	4463      	add	r3, ip
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	1d7b      	adds	r3, r7, #5
 8008236:	33ff      	adds	r3, #255	; 0xff
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	b29a      	uxth	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	f000 fccd 	bl	8008bde <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	78db      	ldrb	r3, [r3, #3]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d000      	beq.n	800824e <USB_EPStartXfer+0x96>
 800824c:	e362      	b.n	8008914 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	6a1a      	ldr	r2, [r3, #32]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	429a      	cmp	r2, r3
 8008258:	d800      	bhi.n	800825c <USB_EPStartXfer+0xa4>
 800825a:	e309      	b.n	8008870 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	18d3      	adds	r3, r2, r3
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29a      	uxth	r2, r3
 800826a:	2056      	movs	r0, #86	; 0x56
 800826c:	183b      	adds	r3, r7, r0
 800826e:	49c8      	ldr	r1, [pc, #800]	; (8008590 <USB_EPStartXfer+0x3d8>)
 8008270:	400a      	ands	r2, r1
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	18d3      	adds	r3, r2, r3
 800827e:	183a      	adds	r2, r7, r0
 8008280:	8812      	ldrh	r2, [r2, #0]
 8008282:	49c4      	ldr	r1, [pc, #784]	; (8008594 <USB_EPStartXfer+0x3dc>)
 8008284:	430a      	orrs	r2, r1
 8008286:	b292      	uxth	r2, r2
 8008288:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	6a1a      	ldr	r2, [r3, #32]
 800828e:	1d7b      	adds	r3, r7, #5
 8008290:	33ff      	adds	r3, #255	; 0xff
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	1ad2      	subs	r2, r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	18d3      	adds	r3, r2, r3
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	001a      	movs	r2, r3
 80082aa:	2340      	movs	r3, #64	; 0x40
 80082ac:	4013      	ands	r3, r2
 80082ae:	d100      	bne.n	80082b2 <USB_EPStartXfer+0xfa>
 80082b0:	e176      	b.n	80085a0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	633b      	str	r3, [r7, #48]	; 0x30
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d000      	beq.n	80082c0 <USB_EPStartXfer+0x108>
 80082be:	e074      	b.n	80083aa <USB_EPStartXfer+0x1f2>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2250      	movs	r2, #80	; 0x50
 80082c8:	5a9b      	ldrh	r3, [r3, r2]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	001a      	movs	r2, r3
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	189b      	adds	r3, r3, r2
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	00da      	lsls	r2, r3, #3
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	18d3      	adds	r3, r2, r3
 80082de:	4aae      	ldr	r2, [pc, #696]	; (8008598 <USB_EPStartXfer+0x3e0>)
 80082e0:	4694      	mov	ip, r2
 80082e2:	4463      	add	r3, ip
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	059b      	lsls	r3, r3, #22
 80082ee:	0d9b      	lsrs	r3, r3, #22
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	1d7b      	adds	r3, r7, #5
 80082f8:	33ff      	adds	r3, #255	; 0xff
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b3e      	cmp	r3, #62	; 0x3e
 80082fe:	d924      	bls.n	800834a <USB_EPStartXfer+0x192>
 8008300:	1d7b      	adds	r3, r7, #5
 8008302:	33ff      	adds	r3, #255	; 0xff
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	095b      	lsrs	r3, r3, #5
 8008308:	1c7a      	adds	r2, r7, #1
 800830a:	32ff      	adds	r2, #255	; 0xff
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	1d7b      	adds	r3, r7, #5
 8008310:	33ff      	adds	r3, #255	; 0xff
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	221f      	movs	r2, #31
 8008316:	4013      	ands	r3, r2
 8008318:	d106      	bne.n	8008328 <USB_EPStartXfer+0x170>
 800831a:	1c7b      	adds	r3, r7, #1
 800831c:	33ff      	adds	r3, #255	; 0xff
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3b01      	subs	r3, #1
 8008322:	1c7a      	adds	r2, r7, #1
 8008324:	32ff      	adds	r2, #255	; 0xff
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29a      	uxth	r2, r3
 800832e:	1c7b      	adds	r3, r7, #1
 8008330:	33ff      	adds	r3, #255	; 0xff
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	b29b      	uxth	r3, r3
 8008336:	029b      	lsls	r3, r3, #10
 8008338:	b29b      	uxth	r3, r3
 800833a:	4313      	orrs	r3, r2
 800833c:	b29b      	uxth	r3, r3
 800833e:	4a97      	ldr	r2, [pc, #604]	; (800859c <USB_EPStartXfer+0x3e4>)
 8008340:	4313      	orrs	r3, r2
 8008342:	b29a      	uxth	r2, r3
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	801a      	strh	r2, [r3, #0]
 8008348:	e04a      	b.n	80083e0 <USB_EPStartXfer+0x228>
 800834a:	1d7b      	adds	r3, r7, #5
 800834c:	33ff      	adds	r3, #255	; 0xff
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d108      	bne.n	8008366 <USB_EPStartXfer+0x1ae>
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	4a90      	ldr	r2, [pc, #576]	; (800859c <USB_EPStartXfer+0x3e4>)
 800835c:	4313      	orrs	r3, r2
 800835e:	b29a      	uxth	r2, r3
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	801a      	strh	r2, [r3, #0]
 8008364:	e03c      	b.n	80083e0 <USB_EPStartXfer+0x228>
 8008366:	1d7b      	adds	r3, r7, #5
 8008368:	33ff      	adds	r3, #255	; 0xff
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	085b      	lsrs	r3, r3, #1
 800836e:	1c7a      	adds	r2, r7, #1
 8008370:	32ff      	adds	r2, #255	; 0xff
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	1d7b      	adds	r3, r7, #5
 8008376:	33ff      	adds	r3, #255	; 0xff
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2201      	movs	r2, #1
 800837c:	4013      	ands	r3, r2
 800837e:	d006      	beq.n	800838e <USB_EPStartXfer+0x1d6>
 8008380:	1c7b      	adds	r3, r7, #1
 8008382:	33ff      	adds	r3, #255	; 0xff
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	1c7a      	adds	r2, r7, #1
 800838a:	32ff      	adds	r2, #255	; 0xff
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29a      	uxth	r2, r3
 8008394:	1c7b      	adds	r3, r7, #1
 8008396:	33ff      	adds	r3, #255	; 0xff
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	029b      	lsls	r3, r3, #10
 800839e:	b29b      	uxth	r3, r3
 80083a0:	4313      	orrs	r3, r2
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	801a      	strh	r2, [r3, #0]
 80083a8:	e01a      	b.n	80083e0 <USB_EPStartXfer+0x228>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	785b      	ldrb	r3, [r3, #1]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d116      	bne.n	80083e0 <USB_EPStartXfer+0x228>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2250      	movs	r2, #80	; 0x50
 80083b6:	5a9b      	ldrh	r3, [r3, r2]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	001a      	movs	r2, r3
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	189b      	adds	r3, r3, r2
 80083c0:	633b      	str	r3, [r7, #48]	; 0x30
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	00da      	lsls	r2, r3, #3
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	18d3      	adds	r3, r2, r3
 80083cc:	4a72      	ldr	r2, [pc, #456]	; (8008598 <USB_EPStartXfer+0x3e0>)
 80083ce:	4694      	mov	ip, r2
 80083d0:	4463      	add	r3, ip
 80083d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083d4:	1d7b      	adds	r3, r7, #5
 80083d6:	33ff      	adds	r3, #255	; 0xff
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	b29a      	uxth	r2, r3
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80083e0:	2076      	movs	r0, #118	; 0x76
 80083e2:	183b      	adds	r3, r7, r0
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	8952      	ldrh	r2, [r2, #10]
 80083e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6959      	ldr	r1, [r3, #20]
 80083ee:	1d7b      	adds	r3, r7, #5
 80083f0:	33ff      	adds	r3, #255	; 0xff
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	b29c      	uxth	r4, r3
 80083f6:	183b      	adds	r3, r7, r0
 80083f8:	881a      	ldrh	r2, [r3, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	0023      	movs	r3, r4
 80083fe:	f001 f94d 	bl	800969c <USB_WritePMA>
            ep->xfer_buff += len;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	695a      	ldr	r2, [r3, #20]
 8008406:	1d7b      	adds	r3, r7, #5
 8008408:	33ff      	adds	r3, #255	; 0xff
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	18d2      	adds	r2, r2, r3
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6a1a      	ldr	r2, [r3, #32]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	429a      	cmp	r2, r3
 800841c:	d908      	bls.n	8008430 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	6a1a      	ldr	r2, [r3, #32]
 8008422:	1d7b      	adds	r3, r7, #5
 8008424:	33ff      	adds	r3, #255	; 0xff
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	1ad2      	subs	r2, r2, r3
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	621a      	str	r2, [r3, #32]
 800842e:	e007      	b.n	8008440 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	1d7a      	adds	r2, r7, #5
 8008436:	32ff      	adds	r2, #255	; 0xff
 8008438:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2200      	movs	r2, #0
 800843e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d000      	beq.n	800844a <USB_EPStartXfer+0x292>
 8008448:	e070      	b.n	800852c <USB_EPStartXfer+0x374>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	61bb      	str	r3, [r7, #24]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2250      	movs	r2, #80	; 0x50
 8008452:	5a9b      	ldrh	r3, [r3, r2]
 8008454:	b29b      	uxth	r3, r3
 8008456:	001a      	movs	r2, r3
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	189b      	adds	r3, r3, r2
 800845c:	61bb      	str	r3, [r7, #24]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	00da      	lsls	r2, r3, #3
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	18d3      	adds	r3, r2, r3
 8008468:	4a48      	ldr	r2, [pc, #288]	; (800858c <USB_EPStartXfer+0x3d4>)
 800846a:	4694      	mov	ip, r2
 800846c:	4463      	add	r3, ip
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b29b      	uxth	r3, r3
 8008476:	059b      	lsls	r3, r3, #22
 8008478:	0d9b      	lsrs	r3, r3, #22
 800847a:	b29a      	uxth	r2, r3
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	801a      	strh	r2, [r3, #0]
 8008480:	1d7b      	adds	r3, r7, #5
 8008482:	33ff      	adds	r3, #255	; 0xff
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b3e      	cmp	r3, #62	; 0x3e
 8008488:	d922      	bls.n	80084d0 <USB_EPStartXfer+0x318>
 800848a:	1d7b      	adds	r3, r7, #5
 800848c:	33ff      	adds	r3, #255	; 0xff
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	095b      	lsrs	r3, r3, #5
 8008492:	21fc      	movs	r1, #252	; 0xfc
 8008494:	187a      	adds	r2, r7, r1
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	1d7b      	adds	r3, r7, #5
 800849a:	33ff      	adds	r3, #255	; 0xff
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	221f      	movs	r2, #31
 80084a0:	4013      	ands	r3, r2
 80084a2:	d104      	bne.n	80084ae <USB_EPStartXfer+0x2f6>
 80084a4:	187b      	adds	r3, r7, r1
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	187a      	adds	r2, r7, r1
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	23fc      	movs	r3, #252	; 0xfc
 80084b6:	18fb      	adds	r3, r7, r3
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	029b      	lsls	r3, r3, #10
 80084be:	b29b      	uxth	r3, r3
 80084c0:	4313      	orrs	r3, r2
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	4a35      	ldr	r2, [pc, #212]	; (800859c <USB_EPStartXfer+0x3e4>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	e04a      	b.n	8008566 <USB_EPStartXfer+0x3ae>
 80084d0:	1d7b      	adds	r3, r7, #5
 80084d2:	33ff      	adds	r3, #255	; 0xff
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d108      	bne.n	80084ec <USB_EPStartXfer+0x334>
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b29b      	uxth	r3, r3
 80084e0:	4a2e      	ldr	r2, [pc, #184]	; (800859c <USB_EPStartXfer+0x3e4>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	801a      	strh	r2, [r3, #0]
 80084ea:	e03c      	b.n	8008566 <USB_EPStartXfer+0x3ae>
 80084ec:	1d7b      	adds	r3, r7, #5
 80084ee:	33ff      	adds	r3, #255	; 0xff
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	085b      	lsrs	r3, r3, #1
 80084f4:	21fc      	movs	r1, #252	; 0xfc
 80084f6:	187a      	adds	r2, r7, r1
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	1d7b      	adds	r3, r7, #5
 80084fc:	33ff      	adds	r3, #255	; 0xff
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2201      	movs	r2, #1
 8008502:	4013      	ands	r3, r2
 8008504:	d004      	beq.n	8008510 <USB_EPStartXfer+0x358>
 8008506:	187b      	adds	r3, r7, r1
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3301      	adds	r3, #1
 800850c:	187a      	adds	r2, r7, r1
 800850e:	6013      	str	r3, [r2, #0]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29a      	uxth	r2, r3
 8008516:	23fc      	movs	r3, #252	; 0xfc
 8008518:	18fb      	adds	r3, r7, r3
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	029b      	lsls	r3, r3, #10
 8008520:	b29b      	uxth	r3, r3
 8008522:	4313      	orrs	r3, r2
 8008524:	b29a      	uxth	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	801a      	strh	r2, [r3, #0]
 800852a:	e01c      	b.n	8008566 <USB_EPStartXfer+0x3ae>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	785b      	ldrb	r3, [r3, #1]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d118      	bne.n	8008566 <USB_EPStartXfer+0x3ae>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	623b      	str	r3, [r7, #32]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2250      	movs	r2, #80	; 0x50
 800853c:	5a9b      	ldrh	r3, [r3, r2]
 800853e:	b29b      	uxth	r3, r3
 8008540:	001a      	movs	r2, r3
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	189b      	adds	r3, r3, r2
 8008546:	623b      	str	r3, [r7, #32]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	00da      	lsls	r2, r3, #3
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	18d3      	adds	r3, r2, r3
 8008552:	4a0e      	ldr	r2, [pc, #56]	; (800858c <USB_EPStartXfer+0x3d4>)
 8008554:	4694      	mov	ip, r2
 8008556:	4463      	add	r3, ip
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	1d7b      	adds	r3, r7, #5
 800855c:	33ff      	adds	r3, #255	; 0xff
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	b29a      	uxth	r2, r3
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008566:	2076      	movs	r0, #118	; 0x76
 8008568:	183b      	adds	r3, r7, r0
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	8912      	ldrh	r2, [r2, #8]
 800856e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	6959      	ldr	r1, [r3, #20]
 8008574:	1d7b      	adds	r3, r7, #5
 8008576:	33ff      	adds	r3, #255	; 0xff
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	b29c      	uxth	r4, r3
 800857c:	183b      	adds	r3, r7, r0
 800857e:	881a      	ldrh	r2, [r3, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	0023      	movs	r3, r4
 8008584:	f001 f88a 	bl	800969c <USB_WritePMA>
 8008588:	e329      	b.n	8008bde <USB_EPStartXfer+0xa26>
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	00000402 	.word	0x00000402
 8008590:	ffff8f8f 	.word	0xffff8f8f
 8008594:	ffff8180 	.word	0xffff8180
 8008598:	00000406 	.word	0x00000406
 800859c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d000      	beq.n	80085aa <USB_EPStartXfer+0x3f2>
 80085a8:	e070      	b.n	800868c <USB_EPStartXfer+0x4d4>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2250      	movs	r2, #80	; 0x50
 80085b2:	5a9b      	ldrh	r3, [r3, r2]
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	001a      	movs	r2, r3
 80085b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ba:	189b      	adds	r3, r3, r2
 80085bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	00da      	lsls	r2, r3, #3
 80085c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c6:	18d3      	adds	r3, r2, r3
 80085c8:	4acd      	ldr	r2, [pc, #820]	; (8008900 <USB_EPStartXfer+0x748>)
 80085ca:	4694      	mov	ip, r2
 80085cc:	4463      	add	r3, ip
 80085ce:	647b      	str	r3, [r7, #68]	; 0x44
 80085d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	059b      	lsls	r3, r3, #22
 80085d8:	0d9b      	lsrs	r3, r3, #22
 80085da:	b29a      	uxth	r2, r3
 80085dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085de:	801a      	strh	r2, [r3, #0]
 80085e0:	1d7b      	adds	r3, r7, #5
 80085e2:	33ff      	adds	r3, #255	; 0xff
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b3e      	cmp	r3, #62	; 0x3e
 80085e8:	d922      	bls.n	8008630 <USB_EPStartXfer+0x478>
 80085ea:	1d7b      	adds	r3, r7, #5
 80085ec:	33ff      	adds	r3, #255	; 0xff
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	095b      	lsrs	r3, r3, #5
 80085f2:	21f8      	movs	r1, #248	; 0xf8
 80085f4:	187a      	adds	r2, r7, r1
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	1d7b      	adds	r3, r7, #5
 80085fa:	33ff      	adds	r3, #255	; 0xff
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	221f      	movs	r2, #31
 8008600:	4013      	ands	r3, r2
 8008602:	d104      	bne.n	800860e <USB_EPStartXfer+0x456>
 8008604:	187b      	adds	r3, r7, r1
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3b01      	subs	r3, #1
 800860a:	187a      	adds	r2, r7, r1
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	b29a      	uxth	r2, r3
 8008614:	23f8      	movs	r3, #248	; 0xf8
 8008616:	18fb      	adds	r3, r7, r3
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	b29b      	uxth	r3, r3
 800861c:	029b      	lsls	r3, r3, #10
 800861e:	b29b      	uxth	r3, r3
 8008620:	4313      	orrs	r3, r2
 8008622:	b29b      	uxth	r3, r3
 8008624:	4ab7      	ldr	r2, [pc, #732]	; (8008904 <USB_EPStartXfer+0x74c>)
 8008626:	4313      	orrs	r3, r2
 8008628:	b29a      	uxth	r2, r3
 800862a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	e04a      	b.n	80086c6 <USB_EPStartXfer+0x50e>
 8008630:	1d7b      	adds	r3, r7, #5
 8008632:	33ff      	adds	r3, #255	; 0xff
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d108      	bne.n	800864c <USB_EPStartXfer+0x494>
 800863a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	4ab0      	ldr	r2, [pc, #704]	; (8008904 <USB_EPStartXfer+0x74c>)
 8008642:	4313      	orrs	r3, r2
 8008644:	b29a      	uxth	r2, r3
 8008646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008648:	801a      	strh	r2, [r3, #0]
 800864a:	e03c      	b.n	80086c6 <USB_EPStartXfer+0x50e>
 800864c:	1d7b      	adds	r3, r7, #5
 800864e:	33ff      	adds	r3, #255	; 0xff
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	085b      	lsrs	r3, r3, #1
 8008654:	21f8      	movs	r1, #248	; 0xf8
 8008656:	187a      	adds	r2, r7, r1
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	1d7b      	adds	r3, r7, #5
 800865c:	33ff      	adds	r3, #255	; 0xff
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2201      	movs	r2, #1
 8008662:	4013      	ands	r3, r2
 8008664:	d004      	beq.n	8008670 <USB_EPStartXfer+0x4b8>
 8008666:	187b      	adds	r3, r7, r1
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3301      	adds	r3, #1
 800866c:	187a      	adds	r2, r7, r1
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	b29a      	uxth	r2, r3
 8008676:	23f8      	movs	r3, #248	; 0xf8
 8008678:	18fb      	adds	r3, r7, r3
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	b29b      	uxth	r3, r3
 800867e:	029b      	lsls	r3, r3, #10
 8008680:	b29b      	uxth	r3, r3
 8008682:	4313      	orrs	r3, r2
 8008684:	b29a      	uxth	r2, r3
 8008686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008688:	801a      	strh	r2, [r3, #0]
 800868a:	e01c      	b.n	80086c6 <USB_EPStartXfer+0x50e>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	785b      	ldrb	r3, [r3, #1]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d118      	bne.n	80086c6 <USB_EPStartXfer+0x50e>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	653b      	str	r3, [r7, #80]	; 0x50
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2250      	movs	r2, #80	; 0x50
 800869c:	5a9b      	ldrh	r3, [r3, r2]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	001a      	movs	r2, r3
 80086a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a4:	189b      	adds	r3, r3, r2
 80086a6:	653b      	str	r3, [r7, #80]	; 0x50
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	00da      	lsls	r2, r3, #3
 80086ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086b0:	18d3      	adds	r3, r2, r3
 80086b2:	4a93      	ldr	r2, [pc, #588]	; (8008900 <USB_EPStartXfer+0x748>)
 80086b4:	4694      	mov	ip, r2
 80086b6:	4463      	add	r3, ip
 80086b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086ba:	1d7b      	adds	r3, r7, #5
 80086bc:	33ff      	adds	r3, #255	; 0xff
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086c6:	2076      	movs	r0, #118	; 0x76
 80086c8:	183b      	adds	r3, r7, r0
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	8912      	ldrh	r2, [r2, #8]
 80086ce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	6959      	ldr	r1, [r3, #20]
 80086d4:	1d7b      	adds	r3, r7, #5
 80086d6:	33ff      	adds	r3, #255	; 0xff
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	b29c      	uxth	r4, r3
 80086dc:	183b      	adds	r3, r7, r0
 80086de:	881a      	ldrh	r2, [r3, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	0023      	movs	r3, r4
 80086e4:	f000 ffda 	bl	800969c <USB_WritePMA>
            ep->xfer_buff += len;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	695a      	ldr	r2, [r3, #20]
 80086ec:	1d7b      	adds	r3, r7, #5
 80086ee:	33ff      	adds	r3, #255	; 0xff
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	18d2      	adds	r2, r2, r3
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	6a1a      	ldr	r2, [r3, #32]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	429a      	cmp	r2, r3
 8008702:	d908      	bls.n	8008716 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	6a1a      	ldr	r2, [r3, #32]
 8008708:	1d7b      	adds	r3, r7, #5
 800870a:	33ff      	adds	r3, #255	; 0xff
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	1ad2      	subs	r2, r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	621a      	str	r2, [r3, #32]
 8008714:	e007      	b.n	8008726 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	1d7a      	adds	r2, r7, #5
 800871c:	32ff      	adds	r2, #255	; 0xff
 800871e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2200      	movs	r2, #0
 8008724:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	643b      	str	r3, [r7, #64]	; 0x40
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	785b      	ldrb	r3, [r3, #1]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d000      	beq.n	8008734 <USB_EPStartXfer+0x57c>
 8008732:	e070      	b.n	8008816 <USB_EPStartXfer+0x65e>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	63bb      	str	r3, [r7, #56]	; 0x38
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2250      	movs	r2, #80	; 0x50
 800873c:	5a9b      	ldrh	r3, [r3, r2]
 800873e:	b29b      	uxth	r3, r3
 8008740:	001a      	movs	r2, r3
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	189b      	adds	r3, r3, r2
 8008746:	63bb      	str	r3, [r7, #56]	; 0x38
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	00da      	lsls	r2, r3, #3
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	18d3      	adds	r3, r2, r3
 8008752:	4a6d      	ldr	r2, [pc, #436]	; (8008908 <USB_EPStartXfer+0x750>)
 8008754:	4694      	mov	ip, r2
 8008756:	4463      	add	r3, ip
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
 800875a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29b      	uxth	r3, r3
 8008760:	059b      	lsls	r3, r3, #22
 8008762:	0d9b      	lsrs	r3, r3, #22
 8008764:	b29a      	uxth	r2, r3
 8008766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008768:	801a      	strh	r2, [r3, #0]
 800876a:	1d7b      	adds	r3, r7, #5
 800876c:	33ff      	adds	r3, #255	; 0xff
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b3e      	cmp	r3, #62	; 0x3e
 8008772:	d922      	bls.n	80087ba <USB_EPStartXfer+0x602>
 8008774:	1d7b      	adds	r3, r7, #5
 8008776:	33ff      	adds	r3, #255	; 0xff
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	21f4      	movs	r1, #244	; 0xf4
 800877e:	187a      	adds	r2, r7, r1
 8008780:	6013      	str	r3, [r2, #0]
 8008782:	1d7b      	adds	r3, r7, #5
 8008784:	33ff      	adds	r3, #255	; 0xff
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	221f      	movs	r2, #31
 800878a:	4013      	ands	r3, r2
 800878c:	d104      	bne.n	8008798 <USB_EPStartXfer+0x5e0>
 800878e:	187b      	adds	r3, r7, r1
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3b01      	subs	r3, #1
 8008794:	187a      	adds	r2, r7, r1
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	b29a      	uxth	r2, r3
 800879e:	23f4      	movs	r3, #244	; 0xf4
 80087a0:	18fb      	adds	r3, r7, r3
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	029b      	lsls	r3, r3, #10
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	4313      	orrs	r3, r2
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	4a55      	ldr	r2, [pc, #340]	; (8008904 <USB_EPStartXfer+0x74c>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	801a      	strh	r2, [r3, #0]
 80087b8:	e048      	b.n	800884c <USB_EPStartXfer+0x694>
 80087ba:	1d7b      	adds	r3, r7, #5
 80087bc:	33ff      	adds	r3, #255	; 0xff
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d108      	bne.n	80087d6 <USB_EPStartXfer+0x61e>
 80087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4a4e      	ldr	r2, [pc, #312]	; (8008904 <USB_EPStartXfer+0x74c>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d2:	801a      	strh	r2, [r3, #0]
 80087d4:	e03a      	b.n	800884c <USB_EPStartXfer+0x694>
 80087d6:	1d7b      	adds	r3, r7, #5
 80087d8:	33ff      	adds	r3, #255	; 0xff
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	21f4      	movs	r1, #244	; 0xf4
 80087e0:	187a      	adds	r2, r7, r1
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	1d7b      	adds	r3, r7, #5
 80087e6:	33ff      	adds	r3, #255	; 0xff
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2201      	movs	r2, #1
 80087ec:	4013      	ands	r3, r2
 80087ee:	d004      	beq.n	80087fa <USB_EPStartXfer+0x642>
 80087f0:	187b      	adds	r3, r7, r1
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3301      	adds	r3, #1
 80087f6:	187a      	adds	r2, r7, r1
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29a      	uxth	r2, r3
 8008800:	23f4      	movs	r3, #244	; 0xf4
 8008802:	18fb      	adds	r3, r7, r3
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	029b      	lsls	r3, r3, #10
 800880a:	b29b      	uxth	r3, r3
 800880c:	4313      	orrs	r3, r2
 800880e:	b29a      	uxth	r2, r3
 8008810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008812:	801a      	strh	r2, [r3, #0]
 8008814:	e01a      	b.n	800884c <USB_EPStartXfer+0x694>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	785b      	ldrb	r3, [r3, #1]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d116      	bne.n	800884c <USB_EPStartXfer+0x694>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2250      	movs	r2, #80	; 0x50
 8008822:	5a9b      	ldrh	r3, [r3, r2]
 8008824:	b29b      	uxth	r3, r3
 8008826:	001a      	movs	r2, r3
 8008828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800882a:	189b      	adds	r3, r3, r2
 800882c:	643b      	str	r3, [r7, #64]	; 0x40
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	00da      	lsls	r2, r3, #3
 8008834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008836:	18d3      	adds	r3, r2, r3
 8008838:	4a33      	ldr	r2, [pc, #204]	; (8008908 <USB_EPStartXfer+0x750>)
 800883a:	4694      	mov	ip, r2
 800883c:	4463      	add	r3, ip
 800883e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008840:	1d7b      	adds	r3, r7, #5
 8008842:	33ff      	adds	r3, #255	; 0xff
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	b29a      	uxth	r2, r3
 8008848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800884c:	2076      	movs	r0, #118	; 0x76
 800884e:	183b      	adds	r3, r7, r0
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	8952      	ldrh	r2, [r2, #10]
 8008854:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6959      	ldr	r1, [r3, #20]
 800885a:	1d7b      	adds	r3, r7, #5
 800885c:	33ff      	adds	r3, #255	; 0xff
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	b29c      	uxth	r4, r3
 8008862:	183b      	adds	r3, r7, r0
 8008864:	881a      	ldrh	r2, [r3, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	0023      	movs	r3, r4
 800886a:	f000 ff17 	bl	800969c <USB_WritePMA>
 800886e:	e1b6      	b.n	8008bde <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	1d7a      	adds	r2, r7, #5
 8008876:	32ff      	adds	r2, #255	; 0xff
 8008878:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	18d3      	adds	r3, r2, r3
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29a      	uxth	r2, r3
 8008888:	2062      	movs	r0, #98	; 0x62
 800888a:	183b      	adds	r3, r7, r0
 800888c:	491f      	ldr	r1, [pc, #124]	; (800890c <USB_EPStartXfer+0x754>)
 800888e:	400a      	ands	r2, r1
 8008890:	801a      	strh	r2, [r3, #0]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	18d3      	adds	r3, r2, r3
 800889c:	183a      	adds	r2, r7, r0
 800889e:	8812      	ldrh	r2, [r2, #0]
 80088a0:	491b      	ldr	r1, [pc, #108]	; (8008910 <USB_EPStartXfer+0x758>)
 80088a2:	430a      	orrs	r2, r1
 80088a4:	b292      	uxth	r2, r2
 80088a6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2250      	movs	r2, #80	; 0x50
 80088b0:	5a9b      	ldrh	r3, [r3, r2]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	001a      	movs	r2, r3
 80088b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b8:	189b      	adds	r3, r3, r2
 80088ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	00da      	lsls	r2, r3, #3
 80088c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088c4:	18d3      	adds	r3, r2, r3
 80088c6:	4a0e      	ldr	r2, [pc, #56]	; (8008900 <USB_EPStartXfer+0x748>)
 80088c8:	4694      	mov	ip, r2
 80088ca:	4463      	add	r3, ip
 80088cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80088ce:	1d7b      	adds	r3, r7, #5
 80088d0:	33ff      	adds	r3, #255	; 0xff
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80088da:	2076      	movs	r0, #118	; 0x76
 80088dc:	183b      	adds	r3, r7, r0
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	8912      	ldrh	r2, [r2, #8]
 80088e2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	6959      	ldr	r1, [r3, #20]
 80088e8:	1d7b      	adds	r3, r7, #5
 80088ea:	33ff      	adds	r3, #255	; 0xff
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	b29c      	uxth	r4, r3
 80088f0:	183b      	adds	r3, r7, r0
 80088f2:	881a      	ldrh	r2, [r3, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	0023      	movs	r3, r4
 80088f8:	f000 fed0 	bl	800969c <USB_WritePMA>
 80088fc:	e16f      	b.n	8008bde <USB_EPStartXfer+0xa26>
 80088fe:	46c0      	nop			; (mov r8, r8)
 8008900:	00000402 	.word	0x00000402
 8008904:	ffff8000 	.word	0xffff8000
 8008908:	00000406 	.word	0x00000406
 800890c:	ffff8e8f 	.word	0xffff8e8f
 8008910:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	6a1a      	ldr	r2, [r3, #32]
 8008918:	1d7b      	adds	r3, r7, #5
 800891a:	33ff      	adds	r3, #255	; 0xff
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	1ad2      	subs	r2, r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	18d3      	adds	r3, r2, r3
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	b29b      	uxth	r3, r3
 8008932:	001a      	movs	r2, r3
 8008934:	2340      	movs	r3, #64	; 0x40
 8008936:	4013      	ands	r3, r2
 8008938:	d100      	bne.n	800893c <USB_EPStartXfer+0x784>
 800893a:	e0a4      	b.n	8008a86 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	673b      	str	r3, [r7, #112]	; 0x70
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d000      	beq.n	800894a <USB_EPStartXfer+0x792>
 8008948:	e070      	b.n	8008a2c <USB_EPStartXfer+0x874>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	66bb      	str	r3, [r7, #104]	; 0x68
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2250      	movs	r2, #80	; 0x50
 8008952:	5a9b      	ldrh	r3, [r3, r2]
 8008954:	b29b      	uxth	r3, r3
 8008956:	001a      	movs	r2, r3
 8008958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800895a:	189b      	adds	r3, r3, r2
 800895c:	66bb      	str	r3, [r7, #104]	; 0x68
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	00da      	lsls	r2, r3, #3
 8008964:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008966:	18d3      	adds	r3, r2, r3
 8008968:	4abc      	ldr	r2, [pc, #752]	; (8008c5c <USB_EPStartXfer+0xaa4>)
 800896a:	4694      	mov	ip, r2
 800896c:	4463      	add	r3, ip
 800896e:	667b      	str	r3, [r7, #100]	; 0x64
 8008970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	059b      	lsls	r3, r3, #22
 8008978:	0d9b      	lsrs	r3, r3, #22
 800897a:	b29a      	uxth	r2, r3
 800897c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	1d7b      	adds	r3, r7, #5
 8008982:	33ff      	adds	r3, #255	; 0xff
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b3e      	cmp	r3, #62	; 0x3e
 8008988:	d922      	bls.n	80089d0 <USB_EPStartXfer+0x818>
 800898a:	1d7b      	adds	r3, r7, #5
 800898c:	33ff      	adds	r3, #255	; 0xff
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	095b      	lsrs	r3, r3, #5
 8008992:	21f0      	movs	r1, #240	; 0xf0
 8008994:	187a      	adds	r2, r7, r1
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	1d7b      	adds	r3, r7, #5
 800899a:	33ff      	adds	r3, #255	; 0xff
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	221f      	movs	r2, #31
 80089a0:	4013      	ands	r3, r2
 80089a2:	d104      	bne.n	80089ae <USB_EPStartXfer+0x7f6>
 80089a4:	187b      	adds	r3, r7, r1
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	187a      	adds	r2, r7, r1
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089b0:	881b      	ldrh	r3, [r3, #0]
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	23f0      	movs	r3, #240	; 0xf0
 80089b6:	18fb      	adds	r3, r7, r3
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	029b      	lsls	r3, r3, #10
 80089be:	b29b      	uxth	r3, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	4aa6      	ldr	r2, [pc, #664]	; (8008c60 <USB_EPStartXfer+0xaa8>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089cc:	801a      	strh	r2, [r3, #0]
 80089ce:	e048      	b.n	8008a62 <USB_EPStartXfer+0x8aa>
 80089d0:	1d7b      	adds	r3, r7, #5
 80089d2:	33ff      	adds	r3, #255	; 0xff
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d108      	bne.n	80089ec <USB_EPStartXfer+0x834>
 80089da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4a9f      	ldr	r2, [pc, #636]	; (8008c60 <USB_EPStartXfer+0xaa8>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089e8:	801a      	strh	r2, [r3, #0]
 80089ea:	e03a      	b.n	8008a62 <USB_EPStartXfer+0x8aa>
 80089ec:	1d7b      	adds	r3, r7, #5
 80089ee:	33ff      	adds	r3, #255	; 0xff
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	085b      	lsrs	r3, r3, #1
 80089f4:	21f0      	movs	r1, #240	; 0xf0
 80089f6:	187a      	adds	r2, r7, r1
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	1d7b      	adds	r3, r7, #5
 80089fc:	33ff      	adds	r3, #255	; 0xff
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2201      	movs	r2, #1
 8008a02:	4013      	ands	r3, r2
 8008a04:	d004      	beq.n	8008a10 <USB_EPStartXfer+0x858>
 8008a06:	187b      	adds	r3, r7, r1
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	187a      	adds	r2, r7, r1
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	23f0      	movs	r3, #240	; 0xf0
 8008a18:	18fb      	adds	r3, r7, r3
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	029b      	lsls	r3, r3, #10
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4313      	orrs	r3, r2
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a28:	801a      	strh	r2, [r3, #0]
 8008a2a:	e01a      	b.n	8008a62 <USB_EPStartXfer+0x8aa>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	785b      	ldrb	r3, [r3, #1]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d116      	bne.n	8008a62 <USB_EPStartXfer+0x8aa>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2250      	movs	r2, #80	; 0x50
 8008a38:	5a9b      	ldrh	r3, [r3, r2]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	001a      	movs	r2, r3
 8008a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a40:	189b      	adds	r3, r3, r2
 8008a42:	673b      	str	r3, [r7, #112]	; 0x70
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	00da      	lsls	r2, r3, #3
 8008a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a4c:	18d3      	adds	r3, r2, r3
 8008a4e:	4a83      	ldr	r2, [pc, #524]	; (8008c5c <USB_EPStartXfer+0xaa4>)
 8008a50:	4694      	mov	ip, r2
 8008a52:	4463      	add	r3, ip
 8008a54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a56:	1d7b      	adds	r3, r7, #5
 8008a58:	33ff      	adds	r3, #255	; 0xff
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008a62:	2076      	movs	r0, #118	; 0x76
 8008a64:	183b      	adds	r3, r7, r0
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	8952      	ldrh	r2, [r2, #10]
 8008a6a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	6959      	ldr	r1, [r3, #20]
 8008a70:	1d7b      	adds	r3, r7, #5
 8008a72:	33ff      	adds	r3, #255	; 0xff
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	b29c      	uxth	r4, r3
 8008a78:	183b      	adds	r3, r7, r0
 8008a7a:	881a      	ldrh	r2, [r3, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	0023      	movs	r3, r4
 8008a80:	f000 fe0c 	bl	800969c <USB_WritePMA>
 8008a84:	e0ab      	b.n	8008bde <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	785b      	ldrb	r3, [r3, #1]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d000      	beq.n	8008a90 <USB_EPStartXfer+0x8d8>
 8008a8e:	e070      	b.n	8008b72 <USB_EPStartXfer+0x9ba>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2250      	movs	r2, #80	; 0x50
 8008a98:	5a9b      	ldrh	r3, [r3, r2]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	001a      	movs	r2, r3
 8008a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008aa0:	189b      	adds	r3, r3, r2
 8008aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	00da      	lsls	r2, r3, #3
 8008aaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008aac:	18d3      	adds	r3, r2, r3
 8008aae:	4a6d      	ldr	r2, [pc, #436]	; (8008c64 <USB_EPStartXfer+0xaac>)
 8008ab0:	4694      	mov	ip, r2
 8008ab2:	4463      	add	r3, ip
 8008ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	059b      	lsls	r3, r3, #22
 8008abe:	0d9b      	lsrs	r3, r3, #22
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ac4:	801a      	strh	r2, [r3, #0]
 8008ac6:	1d7b      	adds	r3, r7, #5
 8008ac8:	33ff      	adds	r3, #255	; 0xff
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b3e      	cmp	r3, #62	; 0x3e
 8008ace:	d922      	bls.n	8008b16 <USB_EPStartXfer+0x95e>
 8008ad0:	1d7b      	adds	r3, r7, #5
 8008ad2:	33ff      	adds	r3, #255	; 0xff
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	095b      	lsrs	r3, r3, #5
 8008ad8:	21ec      	movs	r1, #236	; 0xec
 8008ada:	187a      	adds	r2, r7, r1
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	1d7b      	adds	r3, r7, #5
 8008ae0:	33ff      	adds	r3, #255	; 0xff
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	221f      	movs	r2, #31
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	d104      	bne.n	8008af4 <USB_EPStartXfer+0x93c>
 8008aea:	187b      	adds	r3, r7, r1
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3b01      	subs	r3, #1
 8008af0:	187a      	adds	r2, r7, r1
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	23ec      	movs	r3, #236	; 0xec
 8008afc:	18fb      	adds	r3, r7, r3
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	029b      	lsls	r3, r3, #10
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	4313      	orrs	r3, r2
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	4a55      	ldr	r2, [pc, #340]	; (8008c60 <USB_EPStartXfer+0xaa8>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b12:	801a      	strh	r2, [r3, #0]
 8008b14:	e052      	b.n	8008bbc <USB_EPStartXfer+0xa04>
 8008b16:	1d7b      	adds	r3, r7, #5
 8008b18:	33ff      	adds	r3, #255	; 0xff
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d108      	bne.n	8008b32 <USB_EPStartXfer+0x97a>
 8008b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	4a4e      	ldr	r2, [pc, #312]	; (8008c60 <USB_EPStartXfer+0xaa8>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b2e:	801a      	strh	r2, [r3, #0]
 8008b30:	e044      	b.n	8008bbc <USB_EPStartXfer+0xa04>
 8008b32:	1d7b      	adds	r3, r7, #5
 8008b34:	33ff      	adds	r3, #255	; 0xff
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	085b      	lsrs	r3, r3, #1
 8008b3a:	21ec      	movs	r1, #236	; 0xec
 8008b3c:	187a      	adds	r2, r7, r1
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	1d7b      	adds	r3, r7, #5
 8008b42:	33ff      	adds	r3, #255	; 0xff
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2201      	movs	r2, #1
 8008b48:	4013      	ands	r3, r2
 8008b4a:	d004      	beq.n	8008b56 <USB_EPStartXfer+0x99e>
 8008b4c:	187b      	adds	r3, r7, r1
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3301      	adds	r3, #1
 8008b52:	187a      	adds	r2, r7, r1
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	23ec      	movs	r3, #236	; 0xec
 8008b5e:	18fb      	adds	r3, r7, r3
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	029b      	lsls	r3, r3, #10
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b6e:	801a      	strh	r2, [r3, #0]
 8008b70:	e024      	b.n	8008bbc <USB_EPStartXfer+0xa04>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	785b      	ldrb	r3, [r3, #1]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d120      	bne.n	8008bbc <USB_EPStartXfer+0xa04>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2184      	movs	r1, #132	; 0x84
 8008b7e:	187a      	adds	r2, r7, r1
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2250      	movs	r2, #80	; 0x50
 8008b86:	5a9b      	ldrh	r3, [r3, r2]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	001a      	movs	r2, r3
 8008b8c:	187b      	adds	r3, r7, r1
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	189b      	adds	r3, r3, r2
 8008b92:	187a      	adds	r2, r7, r1
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	00da      	lsls	r2, r3, #3
 8008b9c:	187b      	adds	r3, r7, r1
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	18d3      	adds	r3, r2, r3
 8008ba2:	4a30      	ldr	r2, [pc, #192]	; (8008c64 <USB_EPStartXfer+0xaac>)
 8008ba4:	4694      	mov	ip, r2
 8008ba6:	4463      	add	r3, ip
 8008ba8:	2180      	movs	r1, #128	; 0x80
 8008baa:	187a      	adds	r2, r7, r1
 8008bac:	6013      	str	r3, [r2, #0]
 8008bae:	1d7b      	adds	r3, r7, #5
 8008bb0:	33ff      	adds	r3, #255	; 0xff
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	187b      	adds	r3, r7, r1
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008bbc:	2076      	movs	r0, #118	; 0x76
 8008bbe:	183b      	adds	r3, r7, r0
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	8912      	ldrh	r2, [r2, #8]
 8008bc4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	6959      	ldr	r1, [r3, #20]
 8008bca:	1d7b      	adds	r3, r7, #5
 8008bcc:	33ff      	adds	r3, #255	; 0xff
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	b29c      	uxth	r4, r3
 8008bd2:	183b      	adds	r3, r7, r0
 8008bd4:	881a      	ldrh	r2, [r3, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	0023      	movs	r3, r4
 8008bda:	f000 fd5f 	bl	800969c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	18d3      	adds	r3, r2, r3
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	200a      	movs	r0, #10
 8008bee:	183b      	adds	r3, r7, r0
 8008bf0:	491d      	ldr	r1, [pc, #116]	; (8008c68 <USB_EPStartXfer+0xab0>)
 8008bf2:	400a      	ands	r2, r1
 8008bf4:	801a      	strh	r2, [r3, #0]
 8008bf6:	183b      	adds	r3, r7, r0
 8008bf8:	183a      	adds	r2, r7, r0
 8008bfa:	8812      	ldrh	r2, [r2, #0]
 8008bfc:	2110      	movs	r1, #16
 8008bfe:	404a      	eors	r2, r1
 8008c00:	801a      	strh	r2, [r3, #0]
 8008c02:	183b      	adds	r3, r7, r0
 8008c04:	183a      	adds	r2, r7, r0
 8008c06:	8812      	ldrh	r2, [r2, #0]
 8008c08:	2120      	movs	r1, #32
 8008c0a:	404a      	eors	r2, r1
 8008c0c:	801a      	strh	r2, [r3, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	18d3      	adds	r3, r2, r3
 8008c18:	183a      	adds	r2, r7, r0
 8008c1a:	8812      	ldrh	r2, [r2, #0]
 8008c1c:	4913      	ldr	r1, [pc, #76]	; (8008c6c <USB_EPStartXfer+0xab4>)
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	b292      	uxth	r2, r2
 8008c22:	801a      	strh	r2, [r3, #0]
 8008c24:	f000 fbf4 	bl	8009410 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	7b1b      	ldrb	r3, [r3, #12]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d000      	beq.n	8008c32 <USB_EPStartXfer+0xa7a>
 8008c30:	e0a9      	b.n	8008d86 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	699a      	ldr	r2, [r3, #24]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d918      	bls.n	8008c70 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	1d7a      	adds	r2, r7, #5
 8008c44:	32ff      	adds	r2, #255	; 0xff
 8008c46:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	1d7b      	adds	r3, r7, #5
 8008c4e:	33ff      	adds	r3, #255	; 0xff
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	1ad2      	subs	r2, r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	619a      	str	r2, [r3, #24]
 8008c58:	e012      	b.n	8008c80 <USB_EPStartXfer+0xac8>
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	00000406 	.word	0x00000406
 8008c60:	ffff8000 	.word	0xffff8000
 8008c64:	00000402 	.word	0x00000402
 8008c68:	ffff8fbf 	.word	0xffff8fbf
 8008c6c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	1d7a      	adds	r2, r7, #5
 8008c76:	32ff      	adds	r2, #255	; 0xff
 8008c78:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2190      	movs	r1, #144	; 0x90
 8008c84:	187a      	adds	r2, r7, r1
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2250      	movs	r2, #80	; 0x50
 8008c8c:	5a9b      	ldrh	r3, [r3, r2]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	001a      	movs	r2, r3
 8008c92:	187b      	adds	r3, r7, r1
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	189b      	adds	r3, r3, r2
 8008c98:	187a      	adds	r2, r7, r1
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	00da      	lsls	r2, r3, #3
 8008ca2:	187b      	adds	r3, r7, r1
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	18d3      	adds	r3, r2, r3
 8008ca8:	4acf      	ldr	r2, [pc, #828]	; (8008fe8 <USB_EPStartXfer+0xe30>)
 8008caa:	4694      	mov	ip, r2
 8008cac:	4463      	add	r3, ip
 8008cae:	218c      	movs	r1, #140	; 0x8c
 8008cb0:	187a      	adds	r2, r7, r1
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	187b      	adds	r3, r7, r1
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	059b      	lsls	r3, r3, #22
 8008cbe:	0d9b      	lsrs	r3, r3, #22
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	187b      	adds	r3, r7, r1
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	1d7b      	adds	r3, r7, #5
 8008cca:	33ff      	adds	r3, #255	; 0xff
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b3e      	cmp	r3, #62	; 0x3e
 8008cd0:	d925      	bls.n	8008d1e <USB_EPStartXfer+0xb66>
 8008cd2:	1d7b      	adds	r3, r7, #5
 8008cd4:	33ff      	adds	r3, #255	; 0xff
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	095b      	lsrs	r3, r3, #5
 8008cda:	21e8      	movs	r1, #232	; 0xe8
 8008cdc:	187a      	adds	r2, r7, r1
 8008cde:	6013      	str	r3, [r2, #0]
 8008ce0:	1d7b      	adds	r3, r7, #5
 8008ce2:	33ff      	adds	r3, #255	; 0xff
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	221f      	movs	r2, #31
 8008ce8:	4013      	ands	r3, r2
 8008cea:	d104      	bne.n	8008cf6 <USB_EPStartXfer+0xb3e>
 8008cec:	187b      	adds	r3, r7, r1
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	187a      	adds	r2, r7, r1
 8008cf4:	6013      	str	r3, [r2, #0]
 8008cf6:	218c      	movs	r1, #140	; 0x8c
 8008cf8:	187b      	adds	r3, r7, r1
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	23e8      	movs	r3, #232	; 0xe8
 8008d02:	18fb      	adds	r3, r7, r3
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	029b      	lsls	r3, r3, #10
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	4ab6      	ldr	r2, [pc, #728]	; (8008fec <USB_EPStartXfer+0xe34>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	187b      	adds	r3, r7, r1
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	801a      	strh	r2, [r3, #0]
 8008d1c:	e353      	b.n	80093c6 <USB_EPStartXfer+0x120e>
 8008d1e:	1d7b      	adds	r3, r7, #5
 8008d20:	33ff      	adds	r3, #255	; 0xff
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10b      	bne.n	8008d40 <USB_EPStartXfer+0xb88>
 8008d28:	218c      	movs	r1, #140	; 0x8c
 8008d2a:	187b      	adds	r3, r7, r1
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	4aae      	ldr	r2, [pc, #696]	; (8008fec <USB_EPStartXfer+0xe34>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	187b      	adds	r3, r7, r1
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	801a      	strh	r2, [r3, #0]
 8008d3e:	e342      	b.n	80093c6 <USB_EPStartXfer+0x120e>
 8008d40:	1d7b      	adds	r3, r7, #5
 8008d42:	33ff      	adds	r3, #255	; 0xff
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	085b      	lsrs	r3, r3, #1
 8008d48:	21e8      	movs	r1, #232	; 0xe8
 8008d4a:	187a      	adds	r2, r7, r1
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	1d7b      	adds	r3, r7, #5
 8008d50:	33ff      	adds	r3, #255	; 0xff
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2201      	movs	r2, #1
 8008d56:	4013      	ands	r3, r2
 8008d58:	d004      	beq.n	8008d64 <USB_EPStartXfer+0xbac>
 8008d5a:	187b      	adds	r3, r7, r1
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	187a      	adds	r2, r7, r1
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	218c      	movs	r1, #140	; 0x8c
 8008d66:	187b      	adds	r3, r7, r1
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	23e8      	movs	r3, #232	; 0xe8
 8008d70:	18fb      	adds	r3, r7, r3
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	029b      	lsls	r3, r3, #10
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	187b      	adds	r3, r7, r1
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	801a      	strh	r2, [r3, #0]
 8008d84:	e31f      	b.n	80093c6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	78db      	ldrb	r3, [r3, #3]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d000      	beq.n	8008d90 <USB_EPStartXfer+0xbd8>
 8008d8e:	e191      	b.n	80090b4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	785b      	ldrb	r3, [r3, #1]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d000      	beq.n	8008d9a <USB_EPStartXfer+0xbe2>
 8008d98:	e07c      	b.n	8008e94 <USB_EPStartXfer+0xcdc>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	21ac      	movs	r1, #172	; 0xac
 8008d9e:	187a      	adds	r2, r7, r1
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2250      	movs	r2, #80	; 0x50
 8008da6:	5a9b      	ldrh	r3, [r3, r2]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	001a      	movs	r2, r3
 8008dac:	187b      	adds	r3, r7, r1
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	189b      	adds	r3, r3, r2
 8008db2:	187a      	adds	r2, r7, r1
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	00da      	lsls	r2, r3, #3
 8008dbc:	187b      	adds	r3, r7, r1
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	18d3      	adds	r3, r2, r3
 8008dc2:	4a8b      	ldr	r2, [pc, #556]	; (8008ff0 <USB_EPStartXfer+0xe38>)
 8008dc4:	4694      	mov	ip, r2
 8008dc6:	4463      	add	r3, ip
 8008dc8:	21a8      	movs	r1, #168	; 0xa8
 8008dca:	187a      	adds	r2, r7, r1
 8008dcc:	6013      	str	r3, [r2, #0]
 8008dce:	187b      	adds	r3, r7, r1
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	059b      	lsls	r3, r3, #22
 8008dd8:	0d9b      	lsrs	r3, r3, #22
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	187b      	adds	r3, r7, r1
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	801a      	strh	r2, [r3, #0]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	2b3e      	cmp	r3, #62	; 0x3e
 8008de8:	d923      	bls.n	8008e32 <USB_EPStartXfer+0xc7a>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	21e4      	movs	r1, #228	; 0xe4
 8008df2:	187a      	adds	r2, r7, r1
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	221f      	movs	r2, #31
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	d104      	bne.n	8008e0a <USB_EPStartXfer+0xc52>
 8008e00:	187b      	adds	r3, r7, r1
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	187a      	adds	r2, r7, r1
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	21a8      	movs	r1, #168	; 0xa8
 8008e0c:	187b      	adds	r3, r7, r1
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	23e4      	movs	r3, #228	; 0xe4
 8008e16:	18fb      	adds	r3, r7, r3
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	029b      	lsls	r3, r3, #10
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	4313      	orrs	r3, r2
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	4a71      	ldr	r2, [pc, #452]	; (8008fec <USB_EPStartXfer+0xe34>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	187b      	adds	r3, r7, r1
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	801a      	strh	r2, [r3, #0]
 8008e30:	e054      	b.n	8008edc <USB_EPStartXfer+0xd24>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10b      	bne.n	8008e52 <USB_EPStartXfer+0xc9a>
 8008e3a:	21a8      	movs	r1, #168	; 0xa8
 8008e3c:	187b      	adds	r3, r7, r1
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	4a69      	ldr	r2, [pc, #420]	; (8008fec <USB_EPStartXfer+0xe34>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	187b      	adds	r3, r7, r1
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	801a      	strh	r2, [r3, #0]
 8008e50:	e044      	b.n	8008edc <USB_EPStartXfer+0xd24>
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	21e4      	movs	r1, #228	; 0xe4
 8008e5a:	187a      	adds	r2, r7, r1
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2201      	movs	r2, #1
 8008e64:	4013      	ands	r3, r2
 8008e66:	d004      	beq.n	8008e72 <USB_EPStartXfer+0xcba>
 8008e68:	187b      	adds	r3, r7, r1
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	187a      	adds	r2, r7, r1
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	21a8      	movs	r1, #168	; 0xa8
 8008e74:	187b      	adds	r3, r7, r1
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	23e4      	movs	r3, #228	; 0xe4
 8008e7e:	18fb      	adds	r3, r7, r3
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	029b      	lsls	r3, r3, #10
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	187b      	adds	r3, r7, r1
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	e023      	b.n	8008edc <USB_EPStartXfer+0xd24>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	785b      	ldrb	r3, [r3, #1]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d11f      	bne.n	8008edc <USB_EPStartXfer+0xd24>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	21b4      	movs	r1, #180	; 0xb4
 8008ea0:	187a      	adds	r2, r7, r1
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2250      	movs	r2, #80	; 0x50
 8008ea8:	5a9b      	ldrh	r3, [r3, r2]
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	001a      	movs	r2, r3
 8008eae:	187b      	adds	r3, r7, r1
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	189b      	adds	r3, r3, r2
 8008eb4:	187a      	adds	r2, r7, r1
 8008eb6:	6013      	str	r3, [r2, #0]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	00da      	lsls	r2, r3, #3
 8008ebe:	187b      	adds	r3, r7, r1
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	18d3      	adds	r3, r2, r3
 8008ec4:	4a4a      	ldr	r2, [pc, #296]	; (8008ff0 <USB_EPStartXfer+0xe38>)
 8008ec6:	4694      	mov	ip, r2
 8008ec8:	4463      	add	r3, ip
 8008eca:	21b0      	movs	r1, #176	; 0xb0
 8008ecc:	187a      	adds	r2, r7, r1
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	187b      	adds	r3, r7, r1
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	801a      	strh	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	22a4      	movs	r2, #164	; 0xa4
 8008ee0:	18ba      	adds	r2, r7, r2
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	785b      	ldrb	r3, [r3, #1]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d000      	beq.n	8008eee <USB_EPStartXfer+0xd36>
 8008eec:	e082      	b.n	8008ff4 <USB_EPStartXfer+0xe3c>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	219c      	movs	r1, #156	; 0x9c
 8008ef2:	187a      	adds	r2, r7, r1
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2250      	movs	r2, #80	; 0x50
 8008efa:	5a9b      	ldrh	r3, [r3, r2]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	001a      	movs	r2, r3
 8008f00:	187b      	adds	r3, r7, r1
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	189b      	adds	r3, r3, r2
 8008f06:	187a      	adds	r2, r7, r1
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	00da      	lsls	r2, r3, #3
 8008f10:	187b      	adds	r3, r7, r1
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	18d3      	adds	r3, r2, r3
 8008f16:	4a34      	ldr	r2, [pc, #208]	; (8008fe8 <USB_EPStartXfer+0xe30>)
 8008f18:	4694      	mov	ip, r2
 8008f1a:	4463      	add	r3, ip
 8008f1c:	2198      	movs	r1, #152	; 0x98
 8008f1e:	187a      	adds	r2, r7, r1
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	187b      	adds	r3, r7, r1
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	059b      	lsls	r3, r3, #22
 8008f2c:	0d9b      	lsrs	r3, r3, #22
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	187b      	adds	r3, r7, r1
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f3c:	d923      	bls.n	8008f86 <USB_EPStartXfer+0xdce>
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	21e0      	movs	r1, #224	; 0xe0
 8008f46:	187a      	adds	r2, r7, r1
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	221f      	movs	r2, #31
 8008f50:	4013      	ands	r3, r2
 8008f52:	d104      	bne.n	8008f5e <USB_EPStartXfer+0xda6>
 8008f54:	187b      	adds	r3, r7, r1
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	187a      	adds	r2, r7, r1
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	2198      	movs	r1, #152	; 0x98
 8008f60:	187b      	adds	r3, r7, r1
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	23e0      	movs	r3, #224	; 0xe0
 8008f6a:	18fb      	adds	r3, r7, r3
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	029b      	lsls	r3, r3, #10
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	4a1c      	ldr	r2, [pc, #112]	; (8008fec <USB_EPStartXfer+0xe34>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	187b      	adds	r3, r7, r1
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	801a      	strh	r2, [r3, #0]
 8008f84:	e057      	b.n	8009036 <USB_EPStartXfer+0xe7e>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10b      	bne.n	8008fa6 <USB_EPStartXfer+0xdee>
 8008f8e:	2198      	movs	r1, #152	; 0x98
 8008f90:	187b      	adds	r3, r7, r1
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	4a14      	ldr	r2, [pc, #80]	; (8008fec <USB_EPStartXfer+0xe34>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	187b      	adds	r3, r7, r1
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	801a      	strh	r2, [r3, #0]
 8008fa4:	e047      	b.n	8009036 <USB_EPStartXfer+0xe7e>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	085b      	lsrs	r3, r3, #1
 8008fac:	21e0      	movs	r1, #224	; 0xe0
 8008fae:	187a      	adds	r2, r7, r1
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	4013      	ands	r3, r2
 8008fba:	d004      	beq.n	8008fc6 <USB_EPStartXfer+0xe0e>
 8008fbc:	187b      	adds	r3, r7, r1
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	187a      	adds	r2, r7, r1
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	2198      	movs	r1, #152	; 0x98
 8008fc8:	187b      	adds	r3, r7, r1
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	23e0      	movs	r3, #224	; 0xe0
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	029b      	lsls	r3, r3, #10
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	187b      	adds	r3, r7, r1
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	801a      	strh	r2, [r3, #0]
 8008fe6:	e026      	b.n	8009036 <USB_EPStartXfer+0xe7e>
 8008fe8:	00000406 	.word	0x00000406
 8008fec:	ffff8000 	.word	0xffff8000
 8008ff0:	00000402 	.word	0x00000402
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	785b      	ldrb	r3, [r3, #1]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d11c      	bne.n	8009036 <USB_EPStartXfer+0xe7e>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2250      	movs	r2, #80	; 0x50
 8009000:	5a9b      	ldrh	r3, [r3, r2]
 8009002:	b29b      	uxth	r3, r3
 8009004:	001a      	movs	r2, r3
 8009006:	21a4      	movs	r1, #164	; 0xa4
 8009008:	187b      	adds	r3, r7, r1
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	189b      	adds	r3, r3, r2
 800900e:	187a      	adds	r2, r7, r1
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	00da      	lsls	r2, r3, #3
 8009018:	187b      	adds	r3, r7, r1
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	18d3      	adds	r3, r2, r3
 800901e:	4ad2      	ldr	r2, [pc, #840]	; (8009368 <USB_EPStartXfer+0x11b0>)
 8009020:	4694      	mov	ip, r2
 8009022:	4463      	add	r3, ip
 8009024:	21a0      	movs	r1, #160	; 0xa0
 8009026:	187a      	adds	r2, r7, r1
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	b29a      	uxth	r2, r3
 8009030:	187b      	adds	r3, r7, r1
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d100      	bne.n	8009040 <USB_EPStartXfer+0xe88>
 800903e:	e1c2      	b.n	80093c6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	18d2      	adds	r2, r2, r3
 800904a:	2196      	movs	r1, #150	; 0x96
 800904c:	187b      	adds	r3, r7, r1
 800904e:	8812      	ldrh	r2, [r2, #0]
 8009050:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009052:	187b      	adds	r3, r7, r1
 8009054:	881a      	ldrh	r2, [r3, #0]
 8009056:	2380      	movs	r3, #128	; 0x80
 8009058:	01db      	lsls	r3, r3, #7
 800905a:	4013      	ands	r3, r2
 800905c:	d004      	beq.n	8009068 <USB_EPStartXfer+0xeb0>
 800905e:	187b      	adds	r3, r7, r1
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	2240      	movs	r2, #64	; 0x40
 8009064:	4013      	ands	r3, r2
 8009066:	d10d      	bne.n	8009084 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009068:	2196      	movs	r1, #150	; 0x96
 800906a:	187b      	adds	r3, r7, r1
 800906c:	881a      	ldrh	r2, [r3, #0]
 800906e:	2380      	movs	r3, #128	; 0x80
 8009070:	01db      	lsls	r3, r3, #7
 8009072:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009074:	d000      	beq.n	8009078 <USB_EPStartXfer+0xec0>
 8009076:	e1a6      	b.n	80093c6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009078:	187b      	adds	r3, r7, r1
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	2240      	movs	r2, #64	; 0x40
 800907e:	4013      	ands	r3, r2
 8009080:	d000      	beq.n	8009084 <USB_EPStartXfer+0xecc>
 8009082:	e1a0      	b.n	80093c6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	18d3      	adds	r3, r2, r3
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	b29a      	uxth	r2, r3
 8009092:	2094      	movs	r0, #148	; 0x94
 8009094:	183b      	adds	r3, r7, r0
 8009096:	49b5      	ldr	r1, [pc, #724]	; (800936c <USB_EPStartXfer+0x11b4>)
 8009098:	400a      	ands	r2, r1
 800909a:	801a      	strh	r2, [r3, #0]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	18d3      	adds	r3, r2, r3
 80090a6:	183a      	adds	r2, r7, r0
 80090a8:	8812      	ldrh	r2, [r2, #0]
 80090aa:	49b1      	ldr	r1, [pc, #708]	; (8009370 <USB_EPStartXfer+0x11b8>)
 80090ac:	430a      	orrs	r2, r1
 80090ae:	b292      	uxth	r2, r2
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	e188      	b.n	80093c6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	78db      	ldrb	r3, [r3, #3]
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d000      	beq.n	80090be <USB_EPStartXfer+0xf06>
 80090bc:	e181      	b.n	80093c2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d90d      	bls.n	80090e6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	1d7a      	adds	r2, r7, #5
 80090d0:	32ff      	adds	r2, #255	; 0xff
 80090d2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	699a      	ldr	r2, [r3, #24]
 80090d8:	1d7b      	adds	r3, r7, #5
 80090da:	33ff      	adds	r3, #255	; 0xff
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	619a      	str	r2, [r3, #24]
 80090e4:	e007      	b.n	80090f6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	1d7a      	adds	r2, r7, #5
 80090ec:	32ff      	adds	r2, #255	; 0xff
 80090ee:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	785b      	ldrb	r3, [r3, #1]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d000      	beq.n	8009100 <USB_EPStartXfer+0xf48>
 80090fe:	e082      	b.n	8009206 <USB_EPStartXfer+0x104e>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	21cc      	movs	r1, #204	; 0xcc
 8009104:	187a      	adds	r2, r7, r1
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2250      	movs	r2, #80	; 0x50
 800910c:	5a9b      	ldrh	r3, [r3, r2]
 800910e:	b29b      	uxth	r3, r3
 8009110:	001a      	movs	r2, r3
 8009112:	187b      	adds	r3, r7, r1
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	189b      	adds	r3, r3, r2
 8009118:	187a      	adds	r2, r7, r1
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	00da      	lsls	r2, r3, #3
 8009122:	187b      	adds	r3, r7, r1
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	18d3      	adds	r3, r2, r3
 8009128:	4a92      	ldr	r2, [pc, #584]	; (8009374 <USB_EPStartXfer+0x11bc>)
 800912a:	4694      	mov	ip, r2
 800912c:	4463      	add	r3, ip
 800912e:	21c8      	movs	r1, #200	; 0xc8
 8009130:	187a      	adds	r2, r7, r1
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	187b      	adds	r3, r7, r1
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	059b      	lsls	r3, r3, #22
 800913e:	0d9b      	lsrs	r3, r3, #22
 8009140:	b29a      	uxth	r2, r3
 8009142:	187b      	adds	r3, r7, r1
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	801a      	strh	r2, [r3, #0]
 8009148:	1d7b      	adds	r3, r7, #5
 800914a:	33ff      	adds	r3, #255	; 0xff
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b3e      	cmp	r3, #62	; 0x3e
 8009150:	d925      	bls.n	800919e <USB_EPStartXfer+0xfe6>
 8009152:	1d7b      	adds	r3, r7, #5
 8009154:	33ff      	adds	r3, #255	; 0xff
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	095b      	lsrs	r3, r3, #5
 800915a:	21dc      	movs	r1, #220	; 0xdc
 800915c:	187a      	adds	r2, r7, r1
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	1d7b      	adds	r3, r7, #5
 8009162:	33ff      	adds	r3, #255	; 0xff
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	221f      	movs	r2, #31
 8009168:	4013      	ands	r3, r2
 800916a:	d104      	bne.n	8009176 <USB_EPStartXfer+0xfbe>
 800916c:	187b      	adds	r3, r7, r1
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3b01      	subs	r3, #1
 8009172:	187a      	adds	r2, r7, r1
 8009174:	6013      	str	r3, [r2, #0]
 8009176:	21c8      	movs	r1, #200	; 0xc8
 8009178:	187b      	adds	r3, r7, r1
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	b29a      	uxth	r2, r3
 8009180:	23dc      	movs	r3, #220	; 0xdc
 8009182:	18fb      	adds	r3, r7, r3
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	b29b      	uxth	r3, r3
 8009188:	029b      	lsls	r3, r3, #10
 800918a:	b29b      	uxth	r3, r3
 800918c:	4313      	orrs	r3, r2
 800918e:	b29b      	uxth	r3, r3
 8009190:	4a79      	ldr	r2, [pc, #484]	; (8009378 <USB_EPStartXfer+0x11c0>)
 8009192:	4313      	orrs	r3, r2
 8009194:	b29a      	uxth	r2, r3
 8009196:	187b      	adds	r3, r7, r1
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	801a      	strh	r2, [r3, #0]
 800919c:	e058      	b.n	8009250 <USB_EPStartXfer+0x1098>
 800919e:	1d7b      	adds	r3, r7, #5
 80091a0:	33ff      	adds	r3, #255	; 0xff
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10b      	bne.n	80091c0 <USB_EPStartXfer+0x1008>
 80091a8:	21c8      	movs	r1, #200	; 0xc8
 80091aa:	187b      	adds	r3, r7, r1
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	4a71      	ldr	r2, [pc, #452]	; (8009378 <USB_EPStartXfer+0x11c0>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	187b      	adds	r3, r7, r1
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	e047      	b.n	8009250 <USB_EPStartXfer+0x1098>
 80091c0:	1d7b      	adds	r3, r7, #5
 80091c2:	33ff      	adds	r3, #255	; 0xff
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	085b      	lsrs	r3, r3, #1
 80091c8:	21dc      	movs	r1, #220	; 0xdc
 80091ca:	187a      	adds	r2, r7, r1
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	1d7b      	adds	r3, r7, #5
 80091d0:	33ff      	adds	r3, #255	; 0xff
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2201      	movs	r2, #1
 80091d6:	4013      	ands	r3, r2
 80091d8:	d004      	beq.n	80091e4 <USB_EPStartXfer+0x102c>
 80091da:	187b      	adds	r3, r7, r1
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3301      	adds	r3, #1
 80091e0:	187a      	adds	r2, r7, r1
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	21c8      	movs	r1, #200	; 0xc8
 80091e6:	187b      	adds	r3, r7, r1
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	23dc      	movs	r3, #220	; 0xdc
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	029b      	lsls	r3, r3, #10
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	4313      	orrs	r3, r2
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	187b      	adds	r3, r7, r1
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	801a      	strh	r2, [r3, #0]
 8009204:	e024      	b.n	8009250 <USB_EPStartXfer+0x1098>
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	785b      	ldrb	r3, [r3, #1]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d120      	bne.n	8009250 <USB_EPStartXfer+0x1098>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	21d4      	movs	r1, #212	; 0xd4
 8009212:	187a      	adds	r2, r7, r1
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2250      	movs	r2, #80	; 0x50
 800921a:	5a9b      	ldrh	r3, [r3, r2]
 800921c:	b29b      	uxth	r3, r3
 800921e:	001a      	movs	r2, r3
 8009220:	187b      	adds	r3, r7, r1
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	189b      	adds	r3, r3, r2
 8009226:	187a      	adds	r2, r7, r1
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	00da      	lsls	r2, r3, #3
 8009230:	187b      	adds	r3, r7, r1
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	18d3      	adds	r3, r2, r3
 8009236:	4a4f      	ldr	r2, [pc, #316]	; (8009374 <USB_EPStartXfer+0x11bc>)
 8009238:	4694      	mov	ip, r2
 800923a:	4463      	add	r3, ip
 800923c:	21d0      	movs	r1, #208	; 0xd0
 800923e:	187a      	adds	r2, r7, r1
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	1d7b      	adds	r3, r7, #5
 8009244:	33ff      	adds	r3, #255	; 0xff
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	b29a      	uxth	r2, r3
 800924a:	187b      	adds	r3, r7, r1
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	801a      	strh	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	22c4      	movs	r2, #196	; 0xc4
 8009254:	18ba      	adds	r2, r7, r2
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	785b      	ldrb	r3, [r3, #1]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d000      	beq.n	8009262 <USB_EPStartXfer+0x10aa>
 8009260:	e08c      	b.n	800937c <USB_EPStartXfer+0x11c4>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	21bc      	movs	r1, #188	; 0xbc
 8009266:	187a      	adds	r2, r7, r1
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2250      	movs	r2, #80	; 0x50
 800926e:	5a9b      	ldrh	r3, [r3, r2]
 8009270:	b29b      	uxth	r3, r3
 8009272:	001a      	movs	r2, r3
 8009274:	187b      	adds	r3, r7, r1
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	189b      	adds	r3, r3, r2
 800927a:	187a      	adds	r2, r7, r1
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	00da      	lsls	r2, r3, #3
 8009284:	187b      	adds	r3, r7, r1
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	18d3      	adds	r3, r2, r3
 800928a:	4a37      	ldr	r2, [pc, #220]	; (8009368 <USB_EPStartXfer+0x11b0>)
 800928c:	4694      	mov	ip, r2
 800928e:	4463      	add	r3, ip
 8009290:	21b8      	movs	r1, #184	; 0xb8
 8009292:	187a      	adds	r2, r7, r1
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	187b      	adds	r3, r7, r1
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	b29b      	uxth	r3, r3
 800929e:	059b      	lsls	r3, r3, #22
 80092a0:	0d9b      	lsrs	r3, r3, #22
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	187b      	adds	r3, r7, r1
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	801a      	strh	r2, [r3, #0]
 80092aa:	1d7b      	adds	r3, r7, #5
 80092ac:	33ff      	adds	r3, #255	; 0xff
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b3e      	cmp	r3, #62	; 0x3e
 80092b2:	d925      	bls.n	8009300 <USB_EPStartXfer+0x1148>
 80092b4:	1d7b      	adds	r3, r7, #5
 80092b6:	33ff      	adds	r3, #255	; 0xff
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	095b      	lsrs	r3, r3, #5
 80092bc:	21d8      	movs	r1, #216	; 0xd8
 80092be:	187a      	adds	r2, r7, r1
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	1d7b      	adds	r3, r7, #5
 80092c4:	33ff      	adds	r3, #255	; 0xff
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	221f      	movs	r2, #31
 80092ca:	4013      	ands	r3, r2
 80092cc:	d104      	bne.n	80092d8 <USB_EPStartXfer+0x1120>
 80092ce:	187b      	adds	r3, r7, r1
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	187a      	adds	r2, r7, r1
 80092d6:	6013      	str	r3, [r2, #0]
 80092d8:	21b8      	movs	r1, #184	; 0xb8
 80092da:	187b      	adds	r3, r7, r1
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	23d8      	movs	r3, #216	; 0xd8
 80092e4:	18fb      	adds	r3, r7, r3
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	029b      	lsls	r3, r3, #10
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	4313      	orrs	r3, r2
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	4a21      	ldr	r2, [pc, #132]	; (8009378 <USB_EPStartXfer+0x11c0>)
 80092f4:	4313      	orrs	r3, r2
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	187b      	adds	r3, r7, r1
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	801a      	strh	r2, [r3, #0]
 80092fe:	e062      	b.n	80093c6 <USB_EPStartXfer+0x120e>
 8009300:	1d7b      	adds	r3, r7, #5
 8009302:	33ff      	adds	r3, #255	; 0xff
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10b      	bne.n	8009322 <USB_EPStartXfer+0x116a>
 800930a:	21b8      	movs	r1, #184	; 0xb8
 800930c:	187b      	adds	r3, r7, r1
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	b29b      	uxth	r3, r3
 8009314:	4a18      	ldr	r2, [pc, #96]	; (8009378 <USB_EPStartXfer+0x11c0>)
 8009316:	4313      	orrs	r3, r2
 8009318:	b29a      	uxth	r2, r3
 800931a:	187b      	adds	r3, r7, r1
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	801a      	strh	r2, [r3, #0]
 8009320:	e051      	b.n	80093c6 <USB_EPStartXfer+0x120e>
 8009322:	1d7b      	adds	r3, r7, #5
 8009324:	33ff      	adds	r3, #255	; 0xff
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	085b      	lsrs	r3, r3, #1
 800932a:	21d8      	movs	r1, #216	; 0xd8
 800932c:	187a      	adds	r2, r7, r1
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	1d7b      	adds	r3, r7, #5
 8009332:	33ff      	adds	r3, #255	; 0xff
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2201      	movs	r2, #1
 8009338:	4013      	ands	r3, r2
 800933a:	d004      	beq.n	8009346 <USB_EPStartXfer+0x118e>
 800933c:	187b      	adds	r3, r7, r1
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3301      	adds	r3, #1
 8009342:	187a      	adds	r2, r7, r1
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	21b8      	movs	r1, #184	; 0xb8
 8009348:	187b      	adds	r3, r7, r1
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	b29a      	uxth	r2, r3
 8009350:	23d8      	movs	r3, #216	; 0xd8
 8009352:	18fb      	adds	r3, r7, r3
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	b29b      	uxth	r3, r3
 8009358:	029b      	lsls	r3, r3, #10
 800935a:	b29b      	uxth	r3, r3
 800935c:	4313      	orrs	r3, r2
 800935e:	b29a      	uxth	r2, r3
 8009360:	187b      	adds	r3, r7, r1
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	e02e      	b.n	80093c6 <USB_EPStartXfer+0x120e>
 8009368:	00000406 	.word	0x00000406
 800936c:	ffff8f8f 	.word	0xffff8f8f
 8009370:	ffff80c0 	.word	0xffff80c0
 8009374:	00000402 	.word	0x00000402
 8009378:	ffff8000 	.word	0xffff8000
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	785b      	ldrb	r3, [r3, #1]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d120      	bne.n	80093c6 <USB_EPStartXfer+0x120e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2250      	movs	r2, #80	; 0x50
 8009388:	5a9b      	ldrh	r3, [r3, r2]
 800938a:	b29b      	uxth	r3, r3
 800938c:	001a      	movs	r2, r3
 800938e:	21c4      	movs	r1, #196	; 0xc4
 8009390:	187b      	adds	r3, r7, r1
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	189b      	adds	r3, r3, r2
 8009396:	187a      	adds	r2, r7, r1
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	00da      	lsls	r2, r3, #3
 80093a0:	187b      	adds	r3, r7, r1
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	18d3      	adds	r3, r2, r3
 80093a6:	4a1d      	ldr	r2, [pc, #116]	; (800941c <USB_EPStartXfer+0x1264>)
 80093a8:	4694      	mov	ip, r2
 80093aa:	4463      	add	r3, ip
 80093ac:	21c0      	movs	r1, #192	; 0xc0
 80093ae:	187a      	adds	r2, r7, r1
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	1d7b      	adds	r3, r7, #5
 80093b4:	33ff      	adds	r3, #255	; 0xff
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	187b      	adds	r3, r7, r1
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	801a      	strh	r2, [r3, #0]
 80093c0:	e001      	b.n	80093c6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e025      	b.n	8009412 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	18d3      	adds	r3, r2, r3
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	208a      	movs	r0, #138	; 0x8a
 80093d6:	183b      	adds	r3, r7, r0
 80093d8:	4911      	ldr	r1, [pc, #68]	; (8009420 <USB_EPStartXfer+0x1268>)
 80093da:	400a      	ands	r2, r1
 80093dc:	801a      	strh	r2, [r3, #0]
 80093de:	183b      	adds	r3, r7, r0
 80093e0:	183a      	adds	r2, r7, r0
 80093e2:	8812      	ldrh	r2, [r2, #0]
 80093e4:	2180      	movs	r1, #128	; 0x80
 80093e6:	0149      	lsls	r1, r1, #5
 80093e8:	404a      	eors	r2, r1
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	183b      	adds	r3, r7, r0
 80093ee:	183a      	adds	r2, r7, r0
 80093f0:	8812      	ldrh	r2, [r2, #0]
 80093f2:	2180      	movs	r1, #128	; 0x80
 80093f4:	0189      	lsls	r1, r1, #6
 80093f6:	404a      	eors	r2, r1
 80093f8:	801a      	strh	r2, [r3, #0]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	18d3      	adds	r3, r2, r3
 8009404:	183a      	adds	r2, r7, r0
 8009406:	8812      	ldrh	r2, [r2, #0]
 8009408:	4906      	ldr	r1, [pc, #24]	; (8009424 <USB_EPStartXfer+0x126c>)
 800940a:	430a      	orrs	r2, r1
 800940c:	b292      	uxth	r2, r2
 800940e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	0018      	movs	r0, r3
 8009414:	46bd      	mov	sp, r7
 8009416:	b043      	add	sp, #268	; 0x10c
 8009418:	bd90      	pop	{r4, r7, pc}
 800941a:	46c0      	nop			; (mov r8, r8)
 800941c:	00000406 	.word	0x00000406
 8009420:	ffffbf8f 	.word	0xffffbf8f
 8009424:	ffff8080 	.word	0xffff8080

08009428 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	785b      	ldrb	r3, [r3, #1]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d01d      	beq.n	8009476 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	18d3      	adds	r3, r2, r3
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29a      	uxth	r2, r3
 8009448:	200c      	movs	r0, #12
 800944a:	183b      	adds	r3, r7, r0
 800944c:	491b      	ldr	r1, [pc, #108]	; (80094bc <USB_EPSetStall+0x94>)
 800944e:	400a      	ands	r2, r1
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	183b      	adds	r3, r7, r0
 8009454:	183a      	adds	r2, r7, r0
 8009456:	8812      	ldrh	r2, [r2, #0]
 8009458:	2110      	movs	r1, #16
 800945a:	404a      	eors	r2, r1
 800945c:	801a      	strh	r2, [r3, #0]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	18d3      	adds	r3, r2, r3
 8009468:	183a      	adds	r2, r7, r0
 800946a:	8812      	ldrh	r2, [r2, #0]
 800946c:	4914      	ldr	r1, [pc, #80]	; (80094c0 <USB_EPSetStall+0x98>)
 800946e:	430a      	orrs	r2, r1
 8009470:	b292      	uxth	r2, r2
 8009472:	801a      	strh	r2, [r3, #0]
 8009474:	e01d      	b.n	80094b2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	18d3      	adds	r3, r2, r3
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29a      	uxth	r2, r3
 8009484:	200e      	movs	r0, #14
 8009486:	183b      	adds	r3, r7, r0
 8009488:	490e      	ldr	r1, [pc, #56]	; (80094c4 <USB_EPSetStall+0x9c>)
 800948a:	400a      	ands	r2, r1
 800948c:	801a      	strh	r2, [r3, #0]
 800948e:	183b      	adds	r3, r7, r0
 8009490:	183a      	adds	r2, r7, r0
 8009492:	8812      	ldrh	r2, [r2, #0]
 8009494:	2180      	movs	r1, #128	; 0x80
 8009496:	0149      	lsls	r1, r1, #5
 8009498:	404a      	eors	r2, r1
 800949a:	801a      	strh	r2, [r3, #0]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	18d3      	adds	r3, r2, r3
 80094a6:	183a      	adds	r2, r7, r0
 80094a8:	8812      	ldrh	r2, [r2, #0]
 80094aa:	4905      	ldr	r1, [pc, #20]	; (80094c0 <USB_EPSetStall+0x98>)
 80094ac:	430a      	orrs	r2, r1
 80094ae:	b292      	uxth	r2, r2
 80094b0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	0018      	movs	r0, r3
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b004      	add	sp, #16
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	ffff8fbf 	.word	0xffff8fbf
 80094c0:	ffff8080 	.word	0xffff8080
 80094c4:	ffffbf8f 	.word	0xffffbf8f

080094c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	7b1b      	ldrb	r3, [r3, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d000      	beq.n	80094dc <USB_EPClearStall+0x14>
 80094da:	e095      	b.n	8009608 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	785b      	ldrb	r3, [r3, #1]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d046      	beq.n	8009572 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	18d2      	adds	r2, r2, r3
 80094ee:	2110      	movs	r1, #16
 80094f0:	187b      	adds	r3, r7, r1
 80094f2:	8812      	ldrh	r2, [r2, #0]
 80094f4:	801a      	strh	r2, [r3, #0]
 80094f6:	187b      	adds	r3, r7, r1
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	2240      	movs	r2, #64	; 0x40
 80094fc:	4013      	ands	r3, r2
 80094fe:	d016      	beq.n	800952e <USB_EPClearStall+0x66>
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	18d3      	adds	r3, r2, r3
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	b29a      	uxth	r2, r3
 800950e:	200e      	movs	r0, #14
 8009510:	183b      	adds	r3, r7, r0
 8009512:	4940      	ldr	r1, [pc, #256]	; (8009614 <USB_EPClearStall+0x14c>)
 8009514:	400a      	ands	r2, r1
 8009516:	801a      	strh	r2, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	18d3      	adds	r3, r2, r3
 8009522:	183a      	adds	r2, r7, r0
 8009524:	8812      	ldrh	r2, [r2, #0]
 8009526:	493c      	ldr	r1, [pc, #240]	; (8009618 <USB_EPClearStall+0x150>)
 8009528:	430a      	orrs	r2, r1
 800952a:	b292      	uxth	r2, r2
 800952c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	78db      	ldrb	r3, [r3, #3]
 8009532:	2b01      	cmp	r3, #1
 8009534:	d068      	beq.n	8009608 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	18d3      	adds	r3, r2, r3
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	b29a      	uxth	r2, r3
 8009544:	200c      	movs	r0, #12
 8009546:	183b      	adds	r3, r7, r0
 8009548:	4934      	ldr	r1, [pc, #208]	; (800961c <USB_EPClearStall+0x154>)
 800954a:	400a      	ands	r2, r1
 800954c:	801a      	strh	r2, [r3, #0]
 800954e:	183b      	adds	r3, r7, r0
 8009550:	183a      	adds	r2, r7, r0
 8009552:	8812      	ldrh	r2, [r2, #0]
 8009554:	2120      	movs	r1, #32
 8009556:	404a      	eors	r2, r1
 8009558:	801a      	strh	r2, [r3, #0]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	18d3      	adds	r3, r2, r3
 8009564:	183a      	adds	r2, r7, r0
 8009566:	8812      	ldrh	r2, [r2, #0]
 8009568:	492d      	ldr	r1, [pc, #180]	; (8009620 <USB_EPClearStall+0x158>)
 800956a:	430a      	orrs	r2, r1
 800956c:	b292      	uxth	r2, r2
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	e04a      	b.n	8009608 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	18d2      	adds	r2, r2, r3
 800957c:	2116      	movs	r1, #22
 800957e:	187b      	adds	r3, r7, r1
 8009580:	8812      	ldrh	r2, [r2, #0]
 8009582:	801a      	strh	r2, [r3, #0]
 8009584:	187b      	adds	r3, r7, r1
 8009586:	881a      	ldrh	r2, [r3, #0]
 8009588:	2380      	movs	r3, #128	; 0x80
 800958a:	01db      	lsls	r3, r3, #7
 800958c:	4013      	ands	r3, r2
 800958e:	d016      	beq.n	80095be <USB_EPClearStall+0xf6>
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	18d3      	adds	r3, r2, r3
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	b29a      	uxth	r2, r3
 800959e:	2014      	movs	r0, #20
 80095a0:	183b      	adds	r3, r7, r0
 80095a2:	491c      	ldr	r1, [pc, #112]	; (8009614 <USB_EPClearStall+0x14c>)
 80095a4:	400a      	ands	r2, r1
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	18d3      	adds	r3, r2, r3
 80095b2:	183a      	adds	r2, r7, r0
 80095b4:	8812      	ldrh	r2, [r2, #0]
 80095b6:	491b      	ldr	r1, [pc, #108]	; (8009624 <USB_EPClearStall+0x15c>)
 80095b8:	430a      	orrs	r2, r1
 80095ba:	b292      	uxth	r2, r2
 80095bc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	18d3      	adds	r3, r2, r3
 80095c8:	881b      	ldrh	r3, [r3, #0]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	2012      	movs	r0, #18
 80095ce:	183b      	adds	r3, r7, r0
 80095d0:	4915      	ldr	r1, [pc, #84]	; (8009628 <USB_EPClearStall+0x160>)
 80095d2:	400a      	ands	r2, r1
 80095d4:	801a      	strh	r2, [r3, #0]
 80095d6:	183b      	adds	r3, r7, r0
 80095d8:	183a      	adds	r2, r7, r0
 80095da:	8812      	ldrh	r2, [r2, #0]
 80095dc:	2180      	movs	r1, #128	; 0x80
 80095de:	0149      	lsls	r1, r1, #5
 80095e0:	404a      	eors	r2, r1
 80095e2:	801a      	strh	r2, [r3, #0]
 80095e4:	183b      	adds	r3, r7, r0
 80095e6:	183a      	adds	r2, r7, r0
 80095e8:	8812      	ldrh	r2, [r2, #0]
 80095ea:	2180      	movs	r1, #128	; 0x80
 80095ec:	0189      	lsls	r1, r1, #6
 80095ee:	404a      	eors	r2, r1
 80095f0:	801a      	strh	r2, [r3, #0]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	18d3      	adds	r3, r2, r3
 80095fc:	183a      	adds	r2, r7, r0
 80095fe:	8812      	ldrh	r2, [r2, #0]
 8009600:	4907      	ldr	r1, [pc, #28]	; (8009620 <USB_EPClearStall+0x158>)
 8009602:	430a      	orrs	r2, r1
 8009604:	b292      	uxth	r2, r2
 8009606:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	0018      	movs	r0, r3
 800960c:	46bd      	mov	sp, r7
 800960e:	b006      	add	sp, #24
 8009610:	bd80      	pop	{r7, pc}
 8009612:	46c0      	nop			; (mov r8, r8)
 8009614:	ffff8f8f 	.word	0xffff8f8f
 8009618:	ffff80c0 	.word	0xffff80c0
 800961c:	ffff8fbf 	.word	0xffff8fbf
 8009620:	ffff8080 	.word	0xffff8080
 8009624:	ffffc080 	.word	0xffffc080
 8009628:	ffffbf8f 	.word	0xffffbf8f

0800962c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	000a      	movs	r2, r1
 8009636:	1cfb      	adds	r3, r7, #3
 8009638:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800963a:	1cfb      	adds	r3, r7, #3
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d103      	bne.n	800964a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	224c      	movs	r2, #76	; 0x4c
 8009646:	2180      	movs	r1, #128	; 0x80
 8009648:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	0018      	movs	r0, r3
 800964e:	46bd      	mov	sp, r7
 8009650:	b002      	add	sp, #8
 8009652:	bd80      	pop	{r7, pc}

08009654 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2258      	movs	r2, #88	; 0x58
 8009660:	5a9b      	ldrh	r3, [r3, r2]
 8009662:	b29b      	uxth	r3, r3
 8009664:	4a05      	ldr	r2, [pc, #20]	; (800967c <USB_DevConnect+0x28>)
 8009666:	4313      	orrs	r3, r2
 8009668:	b299      	uxth	r1, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2258      	movs	r2, #88	; 0x58
 800966e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	0018      	movs	r0, r3
 8009674:	46bd      	mov	sp, r7
 8009676:	b002      	add	sp, #8
 8009678:	bd80      	pop	{r7, pc}
 800967a:	46c0      	nop			; (mov r8, r8)
 800967c:	ffff8000 	.word	0xffff8000

08009680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2244      	movs	r2, #68	; 0x44
 800968c:	5a9b      	ldrh	r3, [r3, r2]
 800968e:	b29b      	uxth	r3, r3
 8009690:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009692:	68fb      	ldr	r3, [r7, #12]
}
 8009694:	0018      	movs	r0, r3
 8009696:	46bd      	mov	sp, r7
 8009698:	b004      	add	sp, #16
 800969a:	bd80      	pop	{r7, pc}

0800969c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b08a      	sub	sp, #40	; 0x28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	0019      	movs	r1, r3
 80096a8:	1dbb      	adds	r3, r7, #6
 80096aa:	801a      	strh	r2, [r3, #0]
 80096ac:	1d3b      	adds	r3, r7, #4
 80096ae:	1c0a      	adds	r2, r1, #0
 80096b0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80096b2:	1d3b      	adds	r3, r7, #4
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	085b      	lsrs	r3, r3, #1
 80096ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80096c4:	1dbb      	adds	r3, r7, #6
 80096c6:	881a      	ldrh	r2, [r3, #0]
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	18d3      	adds	r3, r2, r3
 80096cc:	2280      	movs	r2, #128	; 0x80
 80096ce:	00d2      	lsls	r2, r2, #3
 80096d0:	4694      	mov	ip, r2
 80096d2:	4463      	add	r3, ip
 80096d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
 80096da:	e020      	b.n	800971e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	781a      	ldrb	r2, [r3, #0]
 80096e0:	2112      	movs	r1, #18
 80096e2:	187b      	adds	r3, r7, r1
 80096e4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	3301      	adds	r3, #1
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	021b      	lsls	r3, r3, #8
 80096ee:	b21a      	sxth	r2, r3
 80096f0:	187b      	adds	r3, r7, r1
 80096f2:	2000      	movs	r0, #0
 80096f4:	5e1b      	ldrsh	r3, [r3, r0]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	b21a      	sxth	r2, r3
 80096fa:	187b      	adds	r3, r7, r1
 80096fc:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	187a      	adds	r2, r7, r1
 8009702:	8812      	ldrh	r2, [r2, #0]
 8009704:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	3302      	adds	r3, #2
 800970a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	3301      	adds	r3, #1
 8009710:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	3301      	adds	r3, #1
 8009716:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	3b01      	subs	r3, #1
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1db      	bne.n	80096dc <USB_WritePMA+0x40>
  }
}
 8009724:	46c0      	nop			; (mov r8, r8)
 8009726:	46c0      	nop			; (mov r8, r8)
 8009728:	46bd      	mov	sp, r7
 800972a:	b00a      	add	sp, #40	; 0x28
 800972c:	bd80      	pop	{r7, pc}

0800972e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b08a      	sub	sp, #40	; 0x28
 8009732:	af00      	add	r7, sp, #0
 8009734:	60f8      	str	r0, [r7, #12]
 8009736:	60b9      	str	r1, [r7, #8]
 8009738:	0019      	movs	r1, r3
 800973a:	1dbb      	adds	r3, r7, #6
 800973c:	801a      	strh	r2, [r3, #0]
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	1c0a      	adds	r2, r1, #0
 8009742:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009744:	1d3b      	adds	r3, r7, #4
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	085b      	lsrs	r3, r3, #1
 800974a:	b29b      	uxth	r3, r3
 800974c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009756:	1dbb      	adds	r3, r7, #6
 8009758:	881a      	ldrh	r2, [r3, #0]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	18d3      	adds	r3, r2, r3
 800975e:	2280      	movs	r2, #128	; 0x80
 8009760:	00d2      	lsls	r2, r2, #3
 8009762:	4694      	mov	ip, r2
 8009764:	4463      	add	r3, ip
 8009766:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
 800976c:	e018      	b.n	80097a0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	b29b      	uxth	r3, r3
 8009774:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	3302      	adds	r3, #2
 800977a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	b2da      	uxtb	r2, r3
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	3301      	adds	r3, #1
 8009788:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	0a1b      	lsrs	r3, r3, #8
 800978e:	b2da      	uxtb	r2, r3
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	3301      	adds	r3, #1
 8009798:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	3b01      	subs	r3, #1
 800979e:	627b      	str	r3, [r7, #36]	; 0x24
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1e3      	bne.n	800976e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80097a6:	1d3b      	adds	r3, r7, #4
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	2201      	movs	r2, #1
 80097ac:	4013      	ands	r3, r2
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d007      	beq.n	80097c4 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	881b      	ldrh	r3, [r3, #0]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	701a      	strb	r2, [r3, #0]
  }
}
 80097c4:	46c0      	nop			; (mov r8, r8)
 80097c6:	46bd      	mov	sp, r7
 80097c8:	b00a      	add	sp, #40	; 0x28
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_CUSTOM_HID_Init>:
 *         Initialize the CUSTOM_HID interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 80097cc:	b590      	push	{r4, r7, lr}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	000a      	movs	r2, r1
 80097d6:	1cfb      	adds	r3, r7, #3
 80097d8:	701a      	strb	r2, [r3, #0]
	uint8_t ret = 0U;
 80097da:	240f      	movs	r4, #15
 80097dc:	193b      	adds	r3, r7, r4
 80097de:	2200      	movs	r2, #0
 80097e0:	701a      	strb	r2, [r3, #0]
	USBD_CUSTOM_HID_HandleTypeDef *hhid;

	/* Open EP IN */
	USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	2302      	movs	r3, #2
 80097e6:	2203      	movs	r2, #3
 80097e8:	2181      	movs	r1, #129	; 0x81
 80097ea:	f001 ffd0 	bl	800b78e <USBD_LL_OpenEP>
	CUSTOM_HID_EPIN_SIZE);

	pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Open EP OUT */
	USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	2302      	movs	r3, #2
 80097f8:	2203      	movs	r2, #3
 80097fa:	2101      	movs	r1, #1
 80097fc:	f001 ffc7 	bl	800b78e <USBD_LL_OpenEP>
	CUSTOM_HID_EPOUT_SIZE);

	pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	23b6      	movs	r3, #182	; 0xb6
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	2101      	movs	r1, #1
 8009808:	50d1      	str	r1, [r2, r3]

	pdev->pClassData = USBD_malloc (sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800980a:	2034      	movs	r0, #52	; 0x34
 800980c:	f002 f942 	bl	800ba94 <USBD_static_malloc>
 8009810:	0001      	movs	r1, r0
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	23ae      	movs	r3, #174	; 0xae
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	50d1      	str	r1, [r2, r3]

	if (pdev->pClassData == NULL) {
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	23ae      	movs	r3, #174	; 0xae
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	58d3      	ldr	r3, [r2, r3]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d103      	bne.n	800982e <USBD_CUSTOM_HID_Init+0x62>
		ret = 1U;
 8009826:	193b      	adds	r3, r7, r4
 8009828:	2201      	movs	r2, #1
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	e014      	b.n	8009858 <USBD_CUSTOM_HID_Init+0x8c>
	} else {
		hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	23ae      	movs	r3, #174	; 0xae
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	58d3      	ldr	r3, [r2, r3]
 8009836:	60bb      	str	r3, [r7, #8]

		hhid->state = CUSTOM_HID_IDLE;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2230      	movs	r2, #48	; 0x30
 800983c:	2100      	movs	r1, #0
 800983e:	5499      	strb	r1, [r3, r2]
		((USBD_CUSTOM_HID_ItfTypeDef*) pdev->pUserData)->Init();
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	23af      	movs	r3, #175	; 0xaf
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	58d3      	ldr	r3, [r2, r3]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	4798      	blx	r3

		/* Prepare Out endpoint to receive 1st packet */
		USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	2320      	movs	r3, #32
 8009852:	2101      	movs	r1, #1
 8009854:	f002 f8e6 	bl	800ba24 <USBD_LL_PrepareReceive>
		USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
	}

	return ret;
 8009858:	230f      	movs	r3, #15
 800985a:	18fb      	adds	r3, r7, r3
 800985c:	781b      	ldrb	r3, [r3, #0]
}
 800985e:	0018      	movs	r0, r3
 8009860:	46bd      	mov	sp, r7
 8009862:	b005      	add	sp, #20
 8009864:	bd90      	pop	{r4, r7, pc}

08009866 <USBD_CUSTOM_HID_DeInit>:
 *         DeInitialize the CUSTOM_HID layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	000a      	movs	r2, r1
 8009870:	1cfb      	adds	r3, r7, #3
 8009872:	701a      	strb	r2, [r3, #0]
	/* Close CUSTOM_HID EP IN */
	USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2181      	movs	r1, #129	; 0x81
 8009878:	0018      	movs	r0, r3
 800987a:	f001 ffbf 	bl	800b7fc <USBD_LL_CloseEP>
	pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Close CUSTOM_HID EP OUT */
	USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2101      	movs	r1, #1
 8009888:	0018      	movs	r0, r3
 800988a:	f001 ffb7 	bl	800b7fc <USBD_LL_CloseEP>
	pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	23b6      	movs	r3, #182	; 0xb6
 8009892:	005b      	lsls	r3, r3, #1
 8009894:	2100      	movs	r1, #0
 8009896:	50d1      	str	r1, [r2, r3]

	/* FRee allocated memory */
	if (pdev->pClassData != NULL) {
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	23ae      	movs	r3, #174	; 0xae
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	58d3      	ldr	r3, [r2, r3]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d011      	beq.n	80098c8 <USBD_CUSTOM_HID_DeInit+0x62>
		((USBD_CUSTOM_HID_ItfTypeDef*) pdev->pUserData)->DeInit();
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	23af      	movs	r3, #175	; 0xaf
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	58d3      	ldr	r3, [r2, r3]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	4798      	blx	r3
		USBD_free(pdev->pClassData);
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	23ae      	movs	r3, #174	; 0xae
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	58d3      	ldr	r3, [r2, r3]
 80098b8:	0018      	movs	r0, r3
 80098ba:	f002 f8f7 	bl	800baac <USBD_static_free>
		pdev->pClassData = NULL;
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	23ae      	movs	r3, #174	; 0xae
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	2100      	movs	r1, #0
 80098c6:	50d1      	str	r1, [r2, r3]
	}
	return USBD_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	0018      	movs	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	b002      	add	sp, #8
 80098d0:	bd80      	pop	{r7, pc}
	...

080098d4 <USBD_CUSTOM_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
	USBD_CUSTOM_HID_HandleTypeDef *hhid =
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	23ae      	movs	r3, #174	; 0xae
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	58d3      	ldr	r3, [r2, r3]
 80098e6:	613b      	str	r3, [r7, #16]
			(USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
	uint16_t len = 0U;
 80098e8:	231e      	movs	r3, #30
 80098ea:	18fb      	adds	r3, r7, r3
 80098ec:	2200      	movs	r2, #0
 80098ee:	801a      	strh	r2, [r3, #0]
	uint8_t *pbuf = NULL;
 80098f0:	2300      	movs	r3, #0
 80098f2:	61bb      	str	r3, [r7, #24]
	uint16_t status_info = 0U;
 80098f4:	230e      	movs	r3, #14
 80098f6:	18fb      	adds	r3, r7, r3
 80098f8:	2200      	movs	r2, #0
 80098fa:	801a      	strh	r2, [r3, #0]
	uint8_t ret = USBD_OK;
 80098fc:	2317      	movs	r3, #23
 80098fe:	18fb      	adds	r3, r7, r3
 8009900:	2200      	movs	r2, #0
 8009902:	701a      	strb	r2, [r3, #0]

	switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	001a      	movs	r2, r3
 800990a:	2360      	movs	r3, #96	; 0x60
 800990c:	4013      	ands	r3, r2
 800990e:	d044      	beq.n	800999a <USBD_CUSTOM_HID_Setup+0xc6>
 8009910:	2b20      	cmp	r3, #32
 8009912:	d000      	beq.n	8009916 <USBD_CUSTOM_HID_Setup+0x42>
 8009914:	e0d8      	b.n	8009ac8 <USBD_CUSTOM_HID_Setup+0x1f4>
	case USB_REQ_TYPE_CLASS:
		switch (req->bRequest) {
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	785b      	ldrb	r3, [r3, #1]
 800991a:	2b0b      	cmp	r3, #11
 800991c:	d831      	bhi.n	8009982 <USBD_CUSTOM_HID_Setup+0xae>
 800991e:	009a      	lsls	r2, r3, #2
 8009920:	4b72      	ldr	r3, [pc, #456]	; (8009aec <USBD_CUSTOM_HID_Setup+0x218>)
 8009922:	18d3      	adds	r3, r2, r3
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	469f      	mov	pc, r3
		case CUSTOM_HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t) (req->wValue);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	885b      	ldrh	r3, [r3, #2]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	001a      	movs	r2, r3
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	621a      	str	r2, [r3, #32]
			break;
 8009934:	e030      	b.n	8009998 <USBD_CUSTOM_HID_Setup+0xc4>

		case CUSTOM_HID_REQ_GET_PROTOCOL:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->Protocol, 1U);
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	3320      	adds	r3, #32
 800993a:	0019      	movs	r1, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	0018      	movs	r0, r3
 8009942:	f001 fb23 	bl	800af8c <USBD_CtlSendData>
			break;
 8009946:	e027      	b.n	8009998 <USBD_CUSTOM_HID_Setup+0xc4>

		case CUSTOM_HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t) (req->wValue >> 8);
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	885b      	ldrh	r3, [r3, #2]
 800994c:	0a1b      	lsrs	r3, r3, #8
 800994e:	b29b      	uxth	r3, r3
 8009950:	b2db      	uxtb	r3, r3
 8009952:	001a      	movs	r2, r3
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8009958:	e01e      	b.n	8009998 <USBD_CUSTOM_HID_Setup+0xc4>

		case CUSTOM_HID_REQ_GET_IDLE:
			USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->IdleState, 1U);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	3324      	adds	r3, #36	; 0x24
 800995e:	0019      	movs	r1, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	0018      	movs	r0, r3
 8009966:	f001 fb11 	bl	800af8c <USBD_CtlSendData>
			break;
 800996a:	e015      	b.n	8009998 <USBD_CUSTOM_HID_Setup+0xc4>

		case CUSTOM_HID_REQ_SET_REPORT:
			hhid->IsReportAvailable = 1U;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2201      	movs	r2, #1
 8009970:	62da      	str	r2, [r3, #44]	; 0x2c
			USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8009972:	6939      	ldr	r1, [r7, #16]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	88da      	ldrh	r2, [r3, #6]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	0018      	movs	r0, r3
 800997c:	f001 fb39 	bl	800aff2 <USBD_CtlPrepareRx>
			break;
 8009980:	e00a      	b.n	8009998 <USBD_CUSTOM_HID_Setup+0xc4>

		default:
			USBD_CtlError(pdev, req);
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	0011      	movs	r1, r2
 8009988:	0018      	movs	r0, r3
 800998a:	f001 fa81 	bl	800ae90 <USBD_CtlError>
			ret = USBD_FAIL;
 800998e:	2317      	movs	r3, #23
 8009990:	18fb      	adds	r3, r7, r3
 8009992:	2202      	movs	r2, #2
 8009994:	701a      	strb	r2, [r3, #0]
			break;
 8009996:	46c0      	nop			; (mov r8, r8)
		}
		break;
 8009998:	e0a1      	b.n	8009ade <USBD_CUSTOM_HID_Setup+0x20a>

	case USB_REQ_TYPE_STANDARD:
		switch (req->bRequest) {
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	785b      	ldrb	r3, [r3, #1]
 800999e:	2b0b      	cmp	r3, #11
 80099a0:	d100      	bne.n	80099a4 <USBD_CUSTOM_HID_Setup+0xd0>
 80099a2:	e06d      	b.n	8009a80 <USBD_CUSTOM_HID_Setup+0x1ac>
 80099a4:	dd00      	ble.n	80099a8 <USBD_CUSTOM_HID_Setup+0xd4>
 80099a6:	e083      	b.n	8009ab0 <USBD_CUSTOM_HID_Setup+0x1dc>
 80099a8:	2b0a      	cmp	r3, #10
 80099aa:	d04f      	beq.n	8009a4c <USBD_CUSTOM_HID_Setup+0x178>
 80099ac:	dd00      	ble.n	80099b0 <USBD_CUSTOM_HID_Setup+0xdc>
 80099ae:	e07f      	b.n	8009ab0 <USBD_CUSTOM_HID_Setup+0x1dc>
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <USBD_CUSTOM_HID_Setup+0xe6>
 80099b4:	2b06      	cmp	r3, #6
 80099b6:	d019      	beq.n	80099ec <USBD_CUSTOM_HID_Setup+0x118>
 80099b8:	e07a      	b.n	8009ab0 <USBD_CUSTOM_HID_Setup+0x1dc>
		case USB_REQ_GET_STATUS:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	23a7      	movs	r3, #167	; 0xa7
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	5cd3      	ldrb	r3, [r2, r3]
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d107      	bne.n	80099d6 <USBD_CUSTOM_HID_Setup+0x102>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &status_info, 2U);
 80099c6:	230e      	movs	r3, #14
 80099c8:	18f9      	adds	r1, r7, r3
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2202      	movs	r2, #2
 80099ce:	0018      	movs	r0, r3
 80099d0:	f001 fadc 	bl	800af8c <USBD_CtlSendData>
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 80099d4:	e077      	b.n	8009ac6 <USBD_CUSTOM_HID_Setup+0x1f2>
				USBD_CtlError(pdev, req);
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	0011      	movs	r1, r2
 80099dc:	0018      	movs	r0, r3
 80099de:	f001 fa57 	bl	800ae90 <USBD_CtlError>
				ret = USBD_FAIL;
 80099e2:	2317      	movs	r3, #23
 80099e4:	18fb      	adds	r3, r7, r3
 80099e6:	2202      	movs	r2, #2
 80099e8:	701a      	strb	r2, [r3, #0]
			break;
 80099ea:	e06c      	b.n	8009ac6 <USBD_CUSTOM_HID_Setup+0x1f2>

		case USB_REQ_GET_DESCRIPTOR:
			if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC) {
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	885b      	ldrh	r3, [r3, #2]
 80099f0:	0a1b      	lsrs	r3, r3, #8
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	2b22      	cmp	r3, #34	; 0x22
 80099f6:	d10f      	bne.n	8009a18 <USBD_CUSTOM_HID_Setup+0x144>
				len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	88db      	ldrh	r3, [r3, #6]
 80099fc:	221e      	movs	r2, #30
 80099fe:	18ba      	adds	r2, r7, r2
 8009a00:	b299      	uxth	r1, r3
 8009a02:	2921      	cmp	r1, #33	; 0x21
 8009a04:	d900      	bls.n	8009a08 <USBD_CUSTOM_HID_Setup+0x134>
 8009a06:	2321      	movs	r3, #33	; 0x21
 8009a08:	8013      	strh	r3, [r2, #0]
				pbuf = ((USBD_CUSTOM_HID_ItfTypeDef*) pdev->pUserData)->pReport;
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	23af      	movs	r3, #175	; 0xaf
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	58d3      	ldr	r3, [r2, r3]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	61bb      	str	r3, [r7, #24]
 8009a16:	e010      	b.n	8009a3a <USBD_CUSTOM_HID_Setup+0x166>
			} else {
				if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE) {
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	885b      	ldrh	r3, [r3, #2]
 8009a1c:	0a1b      	lsrs	r3, r3, #8
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	2b21      	cmp	r3, #33	; 0x21
 8009a22:	d10a      	bne.n	8009a3a <USBD_CUSTOM_HID_Setup+0x166>
					pbuf = USBD_CUSTOM_HID_Desc;
 8009a24:	4b32      	ldr	r3, [pc, #200]	; (8009af0 <USBD_CUSTOM_HID_Setup+0x21c>)
 8009a26:	61bb      	str	r3, [r7, #24]
					len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	88db      	ldrh	r3, [r3, #6]
 8009a2c:	221e      	movs	r2, #30
 8009a2e:	18ba      	adds	r2, r7, r2
 8009a30:	b299      	uxth	r1, r3
 8009a32:	2909      	cmp	r1, #9
 8009a34:	d900      	bls.n	8009a38 <USBD_CUSTOM_HID_Setup+0x164>
 8009a36:	2309      	movs	r3, #9
 8009a38:	8013      	strh	r3, [r2, #0]
				}
			}

			USBD_CtlSendData(pdev, pbuf, len);
 8009a3a:	231e      	movs	r3, #30
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	881a      	ldrh	r2, [r3, #0]
 8009a40:	69b9      	ldr	r1, [r7, #24]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	0018      	movs	r0, r3
 8009a46:	f001 faa1 	bl	800af8c <USBD_CtlSendData>
			break;
 8009a4a:	e03c      	b.n	8009ac6 <USBD_CUSTOM_HID_Setup+0x1f2>

		case USB_REQ_GET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	23a7      	movs	r3, #167	; 0xa7
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	5cd3      	ldrb	r3, [r2, r3]
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	d108      	bne.n	8009a6a <USBD_CUSTOM_HID_Setup+0x196>
				USBD_CtlSendData(pdev, (uint8_t*) (void*) &hhid->AltSetting,
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	3328      	adds	r3, #40	; 0x28
 8009a5c:	0019      	movs	r1, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	0018      	movs	r0, r3
 8009a64:	f001 fa92 	bl	800af8c <USBD_CtlSendData>
						1U);
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8009a68:	e02d      	b.n	8009ac6 <USBD_CUSTOM_HID_Setup+0x1f2>
				USBD_CtlError(pdev, req);
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	0011      	movs	r1, r2
 8009a70:	0018      	movs	r0, r3
 8009a72:	f001 fa0d 	bl	800ae90 <USBD_CtlError>
				ret = USBD_FAIL;
 8009a76:	2317      	movs	r3, #23
 8009a78:	18fb      	adds	r3, r7, r3
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	701a      	strb	r2, [r3, #0]
			break;
 8009a7e:	e022      	b.n	8009ac6 <USBD_CUSTOM_HID_Setup+0x1f2>

		case USB_REQ_SET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	23a7      	movs	r3, #167	; 0xa7
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	5cd3      	ldrb	r3, [r2, r3]
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d106      	bne.n	8009a9a <USBD_CUSTOM_HID_Setup+0x1c6>
				hhid->AltSetting = (uint8_t) (req->wValue);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	885b      	ldrh	r3, [r3, #2]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	001a      	movs	r2, r3
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 8009a98:	e015      	b.n	8009ac6 <USBD_CUSTOM_HID_Setup+0x1f2>
				USBD_CtlError(pdev, req);
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	0011      	movs	r1, r2
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f001 f9f5 	bl	800ae90 <USBD_CtlError>
				ret = USBD_FAIL;
 8009aa6:	2317      	movs	r3, #23
 8009aa8:	18fb      	adds	r3, r7, r3
 8009aaa:	2202      	movs	r2, #2
 8009aac:	701a      	strb	r2, [r3, #0]
			break;
 8009aae:	e00a      	b.n	8009ac6 <USBD_CUSTOM_HID_Setup+0x1f2>

		default:
			USBD_CtlError(pdev, req);
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	0011      	movs	r1, r2
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f001 f9ea 	bl	800ae90 <USBD_CtlError>
			ret = USBD_FAIL;
 8009abc:	2317      	movs	r3, #23
 8009abe:	18fb      	adds	r3, r7, r3
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	701a      	strb	r2, [r3, #0]
			break;
 8009ac4:	46c0      	nop			; (mov r8, r8)
		}
		break;
 8009ac6:	e00a      	b.n	8009ade <USBD_CUSTOM_HID_Setup+0x20a>

	default:
		USBD_CtlError(pdev, req);
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	0011      	movs	r1, r2
 8009ace:	0018      	movs	r0, r3
 8009ad0:	f001 f9de 	bl	800ae90 <USBD_CtlError>
		ret = USBD_FAIL;
 8009ad4:	2317      	movs	r3, #23
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	2202      	movs	r2, #2
 8009ada:	701a      	strb	r2, [r3, #0]
		break;
 8009adc:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
 8009ade:	2317      	movs	r3, #23
 8009ae0:	18fb      	adds	r3, r7, r3
 8009ae2:	781b      	ldrb	r3, [r3, #0]
}
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	b008      	add	sp, #32
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	0800be68 	.word	0x0800be68
 8009af0:	200000d4 	.word	0x200000d4

08009af4 <USBD_CUSTOM_HID_SendReport>:
 * @param  pdev: device instance
 * @param  buff: pointer to report
 * @retval status
 */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report,
		uint16_t len) {
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	1dbb      	adds	r3, r7, #6
 8009b00:	801a      	strh	r2, [r3, #0]
	USBD_CUSTOM_HID_HandleTypeDef *hhid =
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	23ae      	movs	r3, #174	; 0xae
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	58d3      	ldr	r3, [r2, r3]
 8009b0a:	617b      	str	r3, [r7, #20]
			(USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;

	if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	23a7      	movs	r3, #167	; 0xa7
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	5cd3      	ldrb	r3, [r2, r3]
 8009b14:	2b03      	cmp	r3, #3
 8009b16:	d112      	bne.n	8009b3e <USBD_CUSTOM_HID_SendReport+0x4a>
		if (hhid->state == CUSTOM_HID_IDLE) {
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	2230      	movs	r2, #48	; 0x30
 8009b1c:	5c9b      	ldrb	r3, [r3, r2]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <USBD_CUSTOM_HID_SendReport+0x46>
			hhid->state = CUSTOM_HID_BUSY;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2230      	movs	r2, #48	; 0x30
 8009b26:	2101      	movs	r1, #1
 8009b28:	5499      	strb	r1, [r3, r2]
			USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8009b2a:	1dbb      	adds	r3, r7, #6
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	2181      	movs	r1, #129	; 0x81
 8009b34:	f001 ff3f 	bl	800b9b6 <USBD_LL_Transmit>
 8009b38:	e001      	b.n	8009b3e <USBD_CUSTOM_HID_SendReport+0x4a>
		} else {
			return USBD_BUSY;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <USBD_CUSTOM_HID_SendReport+0x4c>
		}
	}
	return USBD_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	0018      	movs	r0, r3
 8009b42:	46bd      	mov	sp, r7
 8009b44:	b006      	add	sp, #24
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_CUSTOM_HID_GetFSCfgDesc>:
 *         return FS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length) {
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2229      	movs	r2, #41	; 0x29
 8009b54:	801a      	strh	r2, [r3, #0]
	return USBD_CUSTOM_HID_CfgFSDesc;
 8009b56:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8009b58:	0018      	movs	r0, r3
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b002      	add	sp, #8
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20000050 	.word	0x20000050

08009b64 <USBD_CUSTOM_HID_GetHSCfgDesc>:
 *         return HS configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length) {
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2229      	movs	r2, #41	; 0x29
 8009b70:	801a      	strh	r2, [r3, #0]
	return USBD_CUSTOM_HID_CfgHSDesc;
 8009b72:	4b02      	ldr	r3, [pc, #8]	; (8009b7c <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8009b74:	0018      	movs	r0, r3
 8009b76:	46bd      	mov	sp, r7
 8009b78:	b002      	add	sp, #8
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	2000007c 	.word	0x2000007c

08009b80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
 *         return other speed configuration descriptor
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length) {
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2229      	movs	r2, #41	; 0x29
 8009b8c:	801a      	strh	r2, [r3, #0]
	return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8009b8e:	4b02      	ldr	r3, [pc, #8]	; (8009b98 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8009b90:	0018      	movs	r0, r3
 8009b92:	46bd      	mov	sp, r7
 8009b94:	b002      	add	sp, #8
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	200000a8 	.word	0x200000a8

08009b9c <USBD_CUSTOM_HID_DataIn>:
 *         handle data IN Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	000a      	movs	r2, r1
 8009ba6:	1cfb      	adds	r3, r7, #3
 8009ba8:	701a      	strb	r2, [r3, #0]
	/* Ensure that the FIFO is empty before a new transfer, this condition could
	 be caused by  a new transfer before the end of the previous transfer */
	((USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData)->state =
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	23ae      	movs	r3, #174	; 0xae
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	58d3      	ldr	r3, [r2, r3]
 8009bb2:	2230      	movs	r2, #48	; 0x30
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	5499      	strb	r1, [r3, r2]
			CUSTOM_HID_IDLE;

	return USBD_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	0018      	movs	r0, r3
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	b002      	add	sp, #8
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <USBD_CUSTOM_HID_DataOut>:
 *         handle data OUT Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b084      	sub	sp, #16
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	000a      	movs	r2, r1
 8009bcc:	1cfb      	adds	r3, r7, #3
 8009bce:	701a      	strb	r2, [r3, #0]

	USBD_CUSTOM_HID_HandleTypeDef *hhid =
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	23ae      	movs	r3, #174	; 0xae
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	58d3      	ldr	r3, [r2, r3]
 8009bd8:	60fb      	str	r3, [r7, #12]
			(USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;

	((USBD_CUSTOM_HID_ItfTypeDef*) pdev->pUserData)->OutEvent(hhid->Report_buf,
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	23af      	movs	r3, #175	; 0xaf
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	58d3      	ldr	r3, [r2, r3]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	2120      	movs	r1, #32
 8009be8:	0010      	movs	r0, r2
 8009bea:	4798      	blx	r3
	USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

	USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	f001 ff16 	bl	800ba24 <USBD_LL_PrepareReceive>
	USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

	return USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	0018      	movs	r0, r3
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	b004      	add	sp, #16
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_CUSTOM_HID_EP0_RxReady>:
 * @brief  USBD_CUSTOM_HID_EP0_RxReady
 *         Handles control request data.
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev) {
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
	USBD_CUSTOM_HID_HandleTypeDef *hhid =
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	23ae      	movs	r3, #174	; 0xae
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	58d3      	ldr	r3, [r2, r3]
 8009c12:	60fb      	str	r3, [r7, #12]
			(USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;

	if (hhid->IsReportAvailable == 1U) {
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d10b      	bne.n	8009c34 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
		((USBD_CUSTOM_HID_ItfTypeDef*) pdev->pUserData)->OutEvent(
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	23af      	movs	r3, #175	; 0xaf
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	58d3      	ldr	r3, [r2, r3]
 8009c24:	68db      	ldr	r3, [r3, #12]
				hhid->Report_buf,
 8009c26:	68fa      	ldr	r2, [r7, #12]
		((USBD_CUSTOM_HID_ItfTypeDef*) pdev->pUserData)->OutEvent(
 8009c28:	2120      	movs	r1, #32
 8009c2a:	0010      	movs	r0, r2
 8009c2c:	4798      	blx	r3
				USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
		hhid->IsReportAvailable = 0U;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	return USBD_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	0018      	movs	r0, r3
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	b004      	add	sp, #16
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
 * @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length) {
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
	*length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	220a      	movs	r2, #10
 8009c4c:	801a      	strh	r2, [r3, #0]
	return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009c4e:	4b02      	ldr	r3, [pc, #8]	; (8009c58 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8009c50:	0018      	movs	r0, r3
 8009c52:	46bd      	mov	sp, r7
 8009c54:	b002      	add	sp, #8
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	200000e0 	.word	0x200000e0

08009c5c <USBD_CUSTOM_HID_RegisterInterface>:
 * @param  pdev: device instance
 * @param  fops: CUSTOMHID Interface callback
 * @retval status
 */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
		USBD_CUSTOM_HID_ItfTypeDef *fops) {
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
	uint8_t ret = USBD_FAIL;
 8009c66:	200f      	movs	r0, #15
 8009c68:	183b      	adds	r3, r7, r0
 8009c6a:	2202      	movs	r2, #2
 8009c6c:	701a      	strb	r2, [r3, #0]

	if (fops != NULL) {
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d007      	beq.n	8009c84 <USBD_CUSTOM_HID_RegisterInterface+0x28>
		pdev->pUserData = fops;
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	23af      	movs	r3, #175	; 0xaf
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	50d1      	str	r1, [r2, r3]
		ret = USBD_OK;
 8009c7e:	183b      	adds	r3, r7, r0
 8009c80:	2200      	movs	r2, #0
 8009c82:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 8009c84:	230f      	movs	r3, #15
 8009c86:	18fb      	adds	r3, r7, r3
 8009c88:	781b      	ldrb	r3, [r3, #0]
}
 8009c8a:	0018      	movs	r0, r3
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	b004      	add	sp, #16
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	1dfb      	adds	r3, r7, #7
 8009c9e:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d101      	bne.n	8009caa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	e020      	b.n	8009cec <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	23ad      	movs	r3, #173	; 0xad
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	58d3      	ldr	r3, [r2, r3]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d004      	beq.n	8009cc0 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	23ad      	movs	r3, #173	; 0xad
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d004      	beq.n	8009cd0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	23ac      	movs	r3, #172	; 0xac
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	68b9      	ldr	r1, [r7, #8]
 8009cce:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	23a7      	movs	r3, #167	; 0xa7
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	1dfa      	adds	r2, r7, #7
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	0018      	movs	r0, r3
 8009ce6:	f001 fcd5 	bl	800b694 <USBD_LL_Init>

  return USBD_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	0018      	movs	r0, r3
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	b004      	add	sp, #16
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009cfe:	200f      	movs	r0, #15
 8009d00:	183b      	adds	r3, r7, r0
 8009d02:	2200      	movs	r2, #0
 8009d04:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d008      	beq.n	8009d1e <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	23ad      	movs	r3, #173	; 0xad
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009d16:	183b      	adds	r3, r7, r0
 8009d18:	2200      	movs	r2, #0
 8009d1a:	701a      	strb	r2, [r3, #0]
 8009d1c:	e003      	b.n	8009d26 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009d1e:	230f      	movs	r3, #15
 8009d20:	18fb      	adds	r3, r7, r3
 8009d22:	2202      	movs	r2, #2
 8009d24:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009d26:	230f      	movs	r3, #15
 8009d28:	18fb      	adds	r3, r7, r3
 8009d2a:	781b      	ldrb	r3, [r3, #0]
}
 8009d2c:	0018      	movs	r0, r3
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	b004      	add	sp, #16
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f001 fd00 	bl	800b744 <USBD_LL_Start>

  return USBD_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	0018      	movs	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	b002      	add	sp, #8
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	0018      	movs	r0, r3
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	b002      	add	sp, #8
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009d60:	b590      	push	{r4, r7, lr}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	000a      	movs	r2, r1
 8009d6a:	1cfb      	adds	r3, r7, #3
 8009d6c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009d6e:	240f      	movs	r4, #15
 8009d70:	193b      	adds	r3, r7, r4
 8009d72:	2202      	movs	r2, #2
 8009d74:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	23ad      	movs	r3, #173	; 0xad
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	58d3      	ldr	r3, [r2, r3]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00e      	beq.n	8009da0 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	23ad      	movs	r3, #173	; 0xad
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	58d3      	ldr	r3, [r2, r3]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	1cfa      	adds	r2, r7, #3
 8009d8e:	7811      	ldrb	r1, [r2, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	0010      	movs	r0, r2
 8009d94:	4798      	blx	r3
 8009d96:	1e03      	subs	r3, r0, #0
 8009d98:	d102      	bne.n	8009da0 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8009d9a:	193b      	adds	r3, r7, r4
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009da0:	230f      	movs	r3, #15
 8009da2:	18fb      	adds	r3, r7, r3
 8009da4:	781b      	ldrb	r3, [r3, #0]
}
 8009da6:	0018      	movs	r0, r3
 8009da8:	46bd      	mov	sp, r7
 8009daa:	b005      	add	sp, #20
 8009dac:	bd90      	pop	{r4, r7, pc}

08009dae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	000a      	movs	r2, r1
 8009db8:	1cfb      	adds	r3, r7, #3
 8009dba:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	23ad      	movs	r3, #173	; 0xad
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	58d3      	ldr	r3, [r2, r3]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	1cfa      	adds	r2, r7, #3
 8009dc8:	7811      	ldrb	r1, [r2, #0]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	0010      	movs	r0, r2
 8009dce:	4798      	blx	r3

  return USBD_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	b002      	add	sp, #8
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	22aa      	movs	r2, #170	; 0xaa
 8009dea:	0092      	lsls	r2, r2, #2
 8009dec:	4694      	mov	ip, r2
 8009dee:	4463      	add	r3, ip
 8009df0:	683a      	ldr	r2, [r7, #0]
 8009df2:	0011      	movs	r1, r2
 8009df4:	0018      	movs	r0, r3
 8009df6:	f001 f810 	bl	800ae1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	23a5      	movs	r3, #165	; 0xa5
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	2101      	movs	r1, #1
 8009e02:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a23      	ldr	r2, [pc, #140]	; (8009e94 <USBD_LL_SetupStage+0xb8>)
 8009e08:	5a9b      	ldrh	r3, [r3, r2]
 8009e0a:	0019      	movs	r1, r3
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	23a6      	movs	r3, #166	; 0xa6
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	23aa      	movs	r3, #170	; 0xaa
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	5cd3      	ldrb	r3, [r2, r3]
 8009e1c:	001a      	movs	r2, r3
 8009e1e:	231f      	movs	r3, #31
 8009e20:	4013      	ands	r3, r2
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d019      	beq.n	8009e5a <USBD_LL_SetupStage+0x7e>
 8009e26:	d822      	bhi.n	8009e6e <USBD_LL_SetupStage+0x92>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <USBD_LL_SetupStage+0x56>
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d00a      	beq.n	8009e46 <USBD_LL_SetupStage+0x6a>
 8009e30:	e01d      	b.n	8009e6e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	22aa      	movs	r2, #170	; 0xaa
 8009e36:	0092      	lsls	r2, r2, #2
 8009e38:	189a      	adds	r2, r3, r2
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	0011      	movs	r1, r2
 8009e3e:	0018      	movs	r0, r3
 8009e40:	f000 fa10 	bl	800a264 <USBD_StdDevReq>
      break;
 8009e44:	e020      	b.n	8009e88 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	22aa      	movs	r2, #170	; 0xaa
 8009e4a:	0092      	lsls	r2, r2, #2
 8009e4c:	189a      	adds	r2, r3, r2
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	0011      	movs	r1, r2
 8009e52:	0018      	movs	r0, r3
 8009e54:	f000 fa78 	bl	800a348 <USBD_StdItfReq>
      break;
 8009e58:	e016      	b.n	8009e88 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	22aa      	movs	r2, #170	; 0xaa
 8009e5e:	0092      	lsls	r2, r2, #2
 8009e60:	189a      	adds	r2, r3, r2
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	0011      	movs	r1, r2
 8009e66:	0018      	movs	r0, r3
 8009e68:	f000 fac5 	bl	800a3f6 <USBD_StdEPReq>
      break;
 8009e6c:	e00c      	b.n	8009e88 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	23aa      	movs	r3, #170	; 0xaa
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	5cd3      	ldrb	r3, [r2, r3]
 8009e76:	227f      	movs	r2, #127	; 0x7f
 8009e78:	4393      	bics	r3, r2
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	0011      	movs	r1, r2
 8009e80:	0018      	movs	r0, r3
 8009e82:	f001 fce6 	bl	800b852 <USBD_LL_StallEP>
      break;
 8009e86:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b002      	add	sp, #8
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	46c0      	nop			; (mov r8, r8)
 8009e94:	000002ae 	.word	0x000002ae

08009e98 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	607a      	str	r2, [r7, #4]
 8009ea2:	200b      	movs	r0, #11
 8009ea4:	183b      	adds	r3, r7, r0
 8009ea6:	1c0a      	adds	r2, r1, #0
 8009ea8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009eaa:	183b      	adds	r3, r7, r0
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d154      	bne.n	8009f5c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3355      	adds	r3, #85	; 0x55
 8009eb6:	33ff      	adds	r3, #255	; 0xff
 8009eb8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	23a5      	movs	r3, #165	; 0xa5
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	58d3      	ldr	r3, [r2, r3]
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	d139      	bne.n	8009f3a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d919      	bls.n	8009f06 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	1ad2      	subs	r2, r2, r3
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	68da      	ldr	r2, [r3, #12]
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d203      	bcs.n	8009ef4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	e002      	b.n	8009efa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	001a      	movs	r2, r3
 8009f00:	f001 f89b 	bl	800b03a <USBD_CtlContinueRx>
 8009f04:	e045      	b.n	8009f92 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	23ad      	movs	r3, #173	; 0xad
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	58d3      	ldr	r3, [r2, r3]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00d      	beq.n	8009f30 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	23a7      	movs	r3, #167	; 0xa7
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d107      	bne.n	8009f30 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	23ad      	movs	r3, #173	; 0xad
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	58d3      	ldr	r3, [r2, r3]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	0010      	movs	r0, r2
 8009f2e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	0018      	movs	r0, r3
 8009f34:	f001 f894 	bl	800b060 <USBD_CtlSendStatus>
 8009f38:	e02b      	b.n	8009f92 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	23a5      	movs	r3, #165	; 0xa5
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	58d3      	ldr	r3, [r2, r3]
 8009f42:	2b05      	cmp	r3, #5
 8009f44:	d125      	bne.n	8009f92 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	23a5      	movs	r3, #165	; 0xa5
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2100      	movs	r1, #0
 8009f54:	0018      	movs	r0, r3
 8009f56:	f001 fc7c 	bl	800b852 <USBD_LL_StallEP>
 8009f5a:	e01a      	b.n	8009f92 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	23ad      	movs	r3, #173	; 0xad
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	58d3      	ldr	r3, [r2, r3]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d011      	beq.n	8009f8e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	23a7      	movs	r3, #167	; 0xa7
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	d10b      	bne.n	8009f8e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	23ad      	movs	r3, #173	; 0xad
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	58d3      	ldr	r3, [r2, r3]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	220b      	movs	r2, #11
 8009f82:	18ba      	adds	r2, r7, r2
 8009f84:	7811      	ldrb	r1, [r2, #0]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	0010      	movs	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	e001      	b.n	8009f92 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e000      	b.n	8009f94 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	0018      	movs	r0, r3
 8009f96:	46bd      	mov	sp, r7
 8009f98:	b006      	add	sp, #24
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	607a      	str	r2, [r7, #4]
 8009fa6:	200b      	movs	r0, #11
 8009fa8:	183b      	adds	r3, r7, r0
 8009faa:	1c0a      	adds	r2, r1, #0
 8009fac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009fae:	183b      	adds	r3, r7, r0
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d000      	beq.n	8009fb8 <USBD_LL_DataInStage+0x1c>
 8009fb6:	e08e      	b.n	800a0d6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3314      	adds	r3, #20
 8009fbc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	23a5      	movs	r3, #165	; 0xa5
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	58d3      	ldr	r3, [r2, r3]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d164      	bne.n	800a094 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d915      	bls.n	800a002 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	68da      	ldr	r2, [r3, #12]
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	1ad2      	subs	r2, r2, r3
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	0018      	movs	r0, r3
 8009ff0:	f000 ffec 	bl	800afcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	f001 fd12 	bl	800ba24 <USBD_LL_PrepareReceive>
 800a000:	e059      	b.n	800a0b6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	0019      	movs	r1, r3
 800a00c:	0010      	movs	r0, r2
 800a00e:	f7f6 f901 	bl	8000214 <__aeabi_uidivmod>
 800a012:	1e0b      	subs	r3, r1, #0
 800a014:	d11f      	bne.n	800a056 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	689a      	ldr	r2, [r3, #8]
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a01e:	429a      	cmp	r2, r3
 800a020:	d319      	bcc.n	800a056 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	689a      	ldr	r2, [r3, #8]
 800a026:	68f9      	ldr	r1, [r7, #12]
 800a028:	23a6      	movs	r3, #166	; 0xa6
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800a02e:	429a      	cmp	r2, r3
 800a030:	d211      	bcs.n	800a056 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	2100      	movs	r1, #0
 800a038:	0018      	movs	r0, r3
 800a03a:	f000 ffc7 	bl	800afcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	23a6      	movs	r3, #166	; 0xa6
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	2100      	movs	r1, #0
 800a046:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	2300      	movs	r3, #0
 800a04c:	2200      	movs	r2, #0
 800a04e:	2100      	movs	r1, #0
 800a050:	f001 fce8 	bl	800ba24 <USBD_LL_PrepareReceive>
 800a054:	e02f      	b.n	800a0b6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	23ad      	movs	r3, #173	; 0xad
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	58d3      	ldr	r3, [r2, r3]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00d      	beq.n	800a080 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	23a7      	movs	r3, #167	; 0xa7
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d107      	bne.n	800a080 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	23ad      	movs	r3, #173	; 0xad
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	58d3      	ldr	r3, [r2, r3]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	0010      	movs	r0, r2
 800a07e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2180      	movs	r1, #128	; 0x80
 800a084:	0018      	movs	r0, r3
 800a086:	f001 fbe4 	bl	800b852 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	0018      	movs	r0, r3
 800a08e:	f000 fffb 	bl	800b088 <USBD_CtlReceiveStatus>
 800a092:	e010      	b.n	800a0b6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	23a5      	movs	r3, #165	; 0xa5
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	58d3      	ldr	r3, [r2, r3]
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	d005      	beq.n	800a0ac <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	23a5      	movs	r3, #165	; 0xa5
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d104      	bne.n	800a0b6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2180      	movs	r1, #128	; 0x80
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f001 fbce 	bl	800b852 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	23a8      	movs	r3, #168	; 0xa8
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	5cd3      	ldrb	r3, [r2, r3]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d124      	bne.n	800a10c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f7ff fe42 	bl	8009d4e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	23a8      	movs	r3, #168	; 0xa8
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	54d1      	strb	r1, [r2, r3]
 800a0d4:	e01a      	b.n	800a10c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	23ad      	movs	r3, #173	; 0xad
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	58d3      	ldr	r3, [r2, r3]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d011      	beq.n	800a108 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	23a7      	movs	r3, #167	; 0xa7
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d10b      	bne.n	800a108 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	23ad      	movs	r3, #173	; 0xad
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	58d3      	ldr	r3, [r2, r3]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	220b      	movs	r2, #11
 800a0fc:	18ba      	adds	r2, r7, r2
 800a0fe:	7811      	ldrb	r1, [r2, #0]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	0010      	movs	r0, r2
 800a104:	4798      	blx	r3
 800a106:	e001      	b.n	800a10c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a108:	2302      	movs	r3, #2
 800a10a:	e000      	b.n	800a10e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	0018      	movs	r0, r3
 800a110:	46bd      	mov	sp, r7
 800a112:	b006      	add	sp, #24
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	2340      	movs	r3, #64	; 0x40
 800a122:	2200      	movs	r2, #0
 800a124:	2100      	movs	r1, #0
 800a126:	f001 fb32 	bl	800b78e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	23ac      	movs	r3, #172	; 0xac
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	2101      	movs	r1, #1
 800a132:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	23b2      	movs	r3, #178	; 0xb2
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	2140      	movs	r1, #64	; 0x40
 800a13c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	2200      	movs	r2, #0
 800a144:	2180      	movs	r1, #128	; 0x80
 800a146:	f001 fb22 	bl	800b78e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2240      	movs	r2, #64	; 0x40
 800a154:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	23a7      	movs	r3, #167	; 0xa7
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	2101      	movs	r1, #1
 800a15e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	23a5      	movs	r3, #165	; 0xa5
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	2100      	movs	r1, #0
 800a168:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	23a9      	movs	r3, #169	; 0xa9
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	2100      	movs	r1, #0
 800a178:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	23ae      	movs	r3, #174	; 0xae
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	58d3      	ldr	r3, [r2, r3]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	23ad      	movs	r3, #173	; 0xad
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	58d3      	ldr	r3, [r2, r3]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	b2d9      	uxtb	r1, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	0018      	movs	r0, r3
 800a19a:	4790      	blx	r2
  }

  return USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	0018      	movs	r0, r3
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	b002      	add	sp, #8
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	000a      	movs	r2, r1
 800a1b0:	1cfb      	adds	r3, r7, #3
 800a1b2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	1cfa      	adds	r2, r7, #3
 800a1b8:	7812      	ldrb	r2, [r2, #0]
 800a1ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	0018      	movs	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	b002      	add	sp, #8
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	23a7      	movs	r3, #167	; 0xa7
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	5cd1      	ldrb	r1, [r2, r3]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a06      	ldr	r2, [pc, #24]	; (800a1f4 <USBD_LL_Suspend+0x2c>)
 800a1dc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	23a7      	movs	r3, #167	; 0xa7
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	2104      	movs	r1, #4
 800a1e6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	b002      	add	sp, #8
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	0000029d 	.word	0x0000029d

0800a1f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	23a7      	movs	r3, #167	; 0xa7
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	5cd3      	ldrb	r3, [r2, r3]
 800a208:	2b04      	cmp	r3, #4
 800a20a:	d106      	bne.n	800a21a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a05      	ldr	r2, [pc, #20]	; (800a224 <USBD_LL_Resume+0x2c>)
 800a210:	5c99      	ldrb	r1, [r3, r2]
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	23a7      	movs	r3, #167	; 0xa7
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	0018      	movs	r0, r3
 800a21e:	46bd      	mov	sp, r7
 800a220:	b002      	add	sp, #8
 800a222:	bd80      	pop	{r7, pc}
 800a224:	0000029d 	.word	0x0000029d

0800a228 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	23a7      	movs	r3, #167	; 0xa7
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	5cd3      	ldrb	r3, [r2, r3]
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d10e      	bne.n	800a25a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	23ad      	movs	r3, #173	; 0xad
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	58d3      	ldr	r3, [r2, r3]
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d007      	beq.n	800a25a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	23ad      	movs	r3, #173	; 0xad
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	58d3      	ldr	r3, [r2, r3]
 800a252:	69db      	ldr	r3, [r3, #28]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	0010      	movs	r0, r2
 800a258:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	0018      	movs	r0, r3
 800a25e:	46bd      	mov	sp, r7
 800a260:	b002      	add	sp, #8
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a26e:	230f      	movs	r3, #15
 800a270:	18fb      	adds	r3, r7, r3
 800a272:	2200      	movs	r2, #0
 800a274:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	001a      	movs	r2, r3
 800a27c:	2360      	movs	r3, #96	; 0x60
 800a27e:	4013      	ands	r3, r2
 800a280:	2b40      	cmp	r3, #64	; 0x40
 800a282:	d004      	beq.n	800a28e <USBD_StdDevReq+0x2a>
 800a284:	d84f      	bhi.n	800a326 <USBD_StdDevReq+0xc2>
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00b      	beq.n	800a2a2 <USBD_StdDevReq+0x3e>
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	d14b      	bne.n	800a326 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	23ad      	movs	r3, #173	; 0xad
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	58d3      	ldr	r3, [r2, r3]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	0010      	movs	r0, r2
 800a29e:	4798      	blx	r3
      break;
 800a2a0:	e048      	b.n	800a334 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	785b      	ldrb	r3, [r3, #1]
 800a2a6:	2b09      	cmp	r3, #9
 800a2a8:	d835      	bhi.n	800a316 <USBD_StdDevReq+0xb2>
 800a2aa:	009a      	lsls	r2, r3, #2
 800a2ac:	4b25      	ldr	r3, [pc, #148]	; (800a344 <USBD_StdDevReq+0xe0>)
 800a2ae:	18d3      	adds	r3, r2, r3
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a2b4:	683a      	ldr	r2, [r7, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	0011      	movs	r1, r2
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f000 fa52 	bl	800a764 <USBD_GetDescriptor>
          break;
 800a2c0:	e030      	b.n	800a324 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	0011      	movs	r1, r2
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	f000 fbfd 	bl	800aac8 <USBD_SetAddress>
          break;
 800a2ce:	e029      	b.n	800a324 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	0011      	movs	r1, r2
 800a2d6:	0018      	movs	r0, r3
 800a2d8:	f000 fc4a 	bl	800ab70 <USBD_SetConfig>
          break;
 800a2dc:	e022      	b.n	800a324 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	0011      	movs	r1, r2
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	f000 fce7 	bl	800acb8 <USBD_GetConfig>
          break;
 800a2ea:	e01b      	b.n	800a324 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	0011      	movs	r1, r2
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	f000 fd1b 	bl	800ad2e <USBD_GetStatus>
          break;
 800a2f8:	e014      	b.n	800a324 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	0011      	movs	r1, r2
 800a300:	0018      	movs	r0, r3
 800a302:	f000 fd4e 	bl	800ada2 <USBD_SetFeature>
          break;
 800a306:	e00d      	b.n	800a324 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	0011      	movs	r1, r2
 800a30e:	0018      	movs	r0, r3
 800a310:	f000 fd5d 	bl	800adce <USBD_ClrFeature>
          break;
 800a314:	e006      	b.n	800a324 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	0011      	movs	r1, r2
 800a31c:	0018      	movs	r0, r3
 800a31e:	f000 fdb7 	bl	800ae90 <USBD_CtlError>
          break;
 800a322:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a324:	e006      	b.n	800a334 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	0011      	movs	r1, r2
 800a32c:	0018      	movs	r0, r3
 800a32e:	f000 fdaf 	bl	800ae90 <USBD_CtlError>
      break;
 800a332:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a334:	230f      	movs	r3, #15
 800a336:	18fb      	adds	r3, r7, r3
 800a338:	781b      	ldrb	r3, [r3, #0]
}
 800a33a:	0018      	movs	r0, r3
 800a33c:	46bd      	mov	sp, r7
 800a33e:	b004      	add	sp, #16
 800a340:	bd80      	pop	{r7, pc}
 800a342:	46c0      	nop			; (mov r8, r8)
 800a344:	0800be98 	.word	0x0800be98

0800a348 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a348:	b5b0      	push	{r4, r5, r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a352:	230f      	movs	r3, #15
 800a354:	18fb      	adds	r3, r7, r3
 800a356:	2200      	movs	r2, #0
 800a358:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	001a      	movs	r2, r3
 800a360:	2360      	movs	r3, #96	; 0x60
 800a362:	4013      	ands	r3, r2
 800a364:	2b40      	cmp	r3, #64	; 0x40
 800a366:	d004      	beq.n	800a372 <USBD_StdItfReq+0x2a>
 800a368:	d839      	bhi.n	800a3de <USBD_StdItfReq+0x96>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d001      	beq.n	800a372 <USBD_StdItfReq+0x2a>
 800a36e:	2b20      	cmp	r3, #32
 800a370:	d135      	bne.n	800a3de <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	23a7      	movs	r3, #167	; 0xa7
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	5cd3      	ldrb	r3, [r2, r3]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d825      	bhi.n	800a3cc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	889b      	ldrh	r3, [r3, #4]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b01      	cmp	r3, #1
 800a388:	d819      	bhi.n	800a3be <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	23ad      	movs	r3, #173	; 0xad
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	58d3      	ldr	r3, [r2, r3]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	250f      	movs	r5, #15
 800a396:	197c      	adds	r4, r7, r5
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	0010      	movs	r0, r2
 800a39e:	4798      	blx	r3
 800a3a0:	0003      	movs	r3, r0
 800a3a2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	88db      	ldrh	r3, [r3, #6]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d116      	bne.n	800a3da <USBD_StdItfReq+0x92>
 800a3ac:	197b      	adds	r3, r7, r5
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d112      	bne.n	800a3da <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f000 fe52 	bl	800b060 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a3bc:	e00d      	b.n	800a3da <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	0011      	movs	r1, r2
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f000 fd63 	bl	800ae90 <USBD_CtlError>
          break;
 800a3ca:	e006      	b.n	800a3da <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	0011      	movs	r1, r2
 800a3d2:	0018      	movs	r0, r3
 800a3d4:	f000 fd5c 	bl	800ae90 <USBD_CtlError>
          break;
 800a3d8:	e000      	b.n	800a3dc <USBD_StdItfReq+0x94>
          break;
 800a3da:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a3dc:	e006      	b.n	800a3ec <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	0011      	movs	r1, r2
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f000 fd53 	bl	800ae90 <USBD_CtlError>
      break;
 800a3ea:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	b004      	add	sp, #16
 800a3f4:	bdb0      	pop	{r4, r5, r7, pc}

0800a3f6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a3f6:	b5b0      	push	{r4, r5, r7, lr}
 800a3f8:	b084      	sub	sp, #16
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a400:	230f      	movs	r3, #15
 800a402:	18fb      	adds	r3, r7, r3
 800a404:	2200      	movs	r2, #0
 800a406:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	889a      	ldrh	r2, [r3, #4]
 800a40c:	230e      	movs	r3, #14
 800a40e:	18fb      	adds	r3, r7, r3
 800a410:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	001a      	movs	r2, r3
 800a418:	2360      	movs	r3, #96	; 0x60
 800a41a:	4013      	ands	r3, r2
 800a41c:	2b40      	cmp	r3, #64	; 0x40
 800a41e:	d006      	beq.n	800a42e <USBD_StdEPReq+0x38>
 800a420:	d900      	bls.n	800a424 <USBD_StdEPReq+0x2e>
 800a422:	e190      	b.n	800a746 <USBD_StdEPReq+0x350>
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00c      	beq.n	800a442 <USBD_StdEPReq+0x4c>
 800a428:	2b20      	cmp	r3, #32
 800a42a:	d000      	beq.n	800a42e <USBD_StdEPReq+0x38>
 800a42c:	e18b      	b.n	800a746 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	23ad      	movs	r3, #173	; 0xad
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	58d3      	ldr	r3, [r2, r3]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	0010      	movs	r0, r2
 800a43e:	4798      	blx	r3
      break;
 800a440:	e188      	b.n	800a754 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	001a      	movs	r2, r3
 800a448:	2360      	movs	r3, #96	; 0x60
 800a44a:	4013      	ands	r3, r2
 800a44c:	2b20      	cmp	r3, #32
 800a44e:	d10f      	bne.n	800a470 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	23ad      	movs	r3, #173	; 0xad
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	58d3      	ldr	r3, [r2, r3]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	250f      	movs	r5, #15
 800a45c:	197c      	adds	r4, r7, r5
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	0010      	movs	r0, r2
 800a464:	4798      	blx	r3
 800a466:	0003      	movs	r3, r0
 800a468:	7023      	strb	r3, [r4, #0]

        return ret;
 800a46a:	197b      	adds	r3, r7, r5
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	e174      	b.n	800a75a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	785b      	ldrb	r3, [r3, #1]
 800a474:	2b03      	cmp	r3, #3
 800a476:	d007      	beq.n	800a488 <USBD_StdEPReq+0x92>
 800a478:	dd00      	ble.n	800a47c <USBD_StdEPReq+0x86>
 800a47a:	e15c      	b.n	800a736 <USBD_StdEPReq+0x340>
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d100      	bne.n	800a482 <USBD_StdEPReq+0x8c>
 800a480:	e092      	b.n	800a5a8 <USBD_StdEPReq+0x1b2>
 800a482:	2b01      	cmp	r3, #1
 800a484:	d04b      	beq.n	800a51e <USBD_StdEPReq+0x128>
 800a486:	e156      	b.n	800a736 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	23a7      	movs	r3, #167	; 0xa7
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	5cd3      	ldrb	r3, [r2, r3]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d002      	beq.n	800a49a <USBD_StdEPReq+0xa4>
 800a494:	2b03      	cmp	r3, #3
 800a496:	d01d      	beq.n	800a4d4 <USBD_StdEPReq+0xde>
 800a498:	e039      	b.n	800a50e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a49a:	220e      	movs	r2, #14
 800a49c:	18bb      	adds	r3, r7, r2
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d010      	beq.n	800a4c6 <USBD_StdEPReq+0xd0>
 800a4a4:	18bb      	adds	r3, r7, r2
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b80      	cmp	r3, #128	; 0x80
 800a4aa:	d00c      	beq.n	800a4c6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a4ac:	18bb      	adds	r3, r7, r2
 800a4ae:	781a      	ldrb	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	0011      	movs	r1, r2
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	f001 f9cc 	bl	800b852 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2180      	movs	r1, #128	; 0x80
 800a4be:	0018      	movs	r0, r3
 800a4c0:	f001 f9c7 	bl	800b852 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4c4:	e02a      	b.n	800a51c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	0011      	movs	r1, r2
 800a4cc:	0018      	movs	r0, r3
 800a4ce:	f000 fcdf 	bl	800ae90 <USBD_CtlError>
              break;
 800a4d2:	e023      	b.n	800a51c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	885b      	ldrh	r3, [r3, #2]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d113      	bne.n	800a504 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a4dc:	220e      	movs	r2, #14
 800a4de:	18bb      	adds	r3, r7, r2
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00e      	beq.n	800a504 <USBD_StdEPReq+0x10e>
 800a4e6:	18bb      	adds	r3, r7, r2
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b80      	cmp	r3, #128	; 0x80
 800a4ec:	d00a      	beq.n	800a504 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	88db      	ldrh	r3, [r3, #6]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a4f6:	18bb      	adds	r3, r7, r2
 800a4f8:	781a      	ldrb	r2, [r3, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	0011      	movs	r1, r2
 800a4fe:	0018      	movs	r0, r3
 800a500:	f001 f9a7 	bl	800b852 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	0018      	movs	r0, r3
 800a508:	f000 fdaa 	bl	800b060 <USBD_CtlSendStatus>

              break;
 800a50c:	e006      	b.n	800a51c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	0011      	movs	r1, r2
 800a514:	0018      	movs	r0, r3
 800a516:	f000 fcbb 	bl	800ae90 <USBD_CtlError>
              break;
 800a51a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a51c:	e112      	b.n	800a744 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	23a7      	movs	r3, #167	; 0xa7
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	5cd3      	ldrb	r3, [r2, r3]
 800a526:	2b02      	cmp	r3, #2
 800a528:	d002      	beq.n	800a530 <USBD_StdEPReq+0x13a>
 800a52a:	2b03      	cmp	r3, #3
 800a52c:	d01d      	beq.n	800a56a <USBD_StdEPReq+0x174>
 800a52e:	e032      	b.n	800a596 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a530:	220e      	movs	r2, #14
 800a532:	18bb      	adds	r3, r7, r2
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d010      	beq.n	800a55c <USBD_StdEPReq+0x166>
 800a53a:	18bb      	adds	r3, r7, r2
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b80      	cmp	r3, #128	; 0x80
 800a540:	d00c      	beq.n	800a55c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a542:	18bb      	adds	r3, r7, r2
 800a544:	781a      	ldrb	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	0011      	movs	r1, r2
 800a54a:	0018      	movs	r0, r3
 800a54c:	f001 f981 	bl	800b852 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2180      	movs	r1, #128	; 0x80
 800a554:	0018      	movs	r0, r3
 800a556:	f001 f97c 	bl	800b852 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a55a:	e024      	b.n	800a5a6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	0011      	movs	r1, r2
 800a562:	0018      	movs	r0, r3
 800a564:	f000 fc94 	bl	800ae90 <USBD_CtlError>
              break;
 800a568:	e01d      	b.n	800a5a6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	885b      	ldrh	r3, [r3, #2]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d118      	bne.n	800a5a4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a572:	210e      	movs	r1, #14
 800a574:	187b      	adds	r3, r7, r1
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	227f      	movs	r2, #127	; 0x7f
 800a57a:	4013      	ands	r3, r2
 800a57c:	d006      	beq.n	800a58c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a57e:	187b      	adds	r3, r7, r1
 800a580:	781a      	ldrb	r2, [r3, #0]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	0011      	movs	r1, r2
 800a586:	0018      	movs	r0, r3
 800a588:	f001 f98e 	bl	800b8a8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	0018      	movs	r0, r3
 800a590:	f000 fd66 	bl	800b060 <USBD_CtlSendStatus>
              }
              break;
 800a594:	e006      	b.n	800a5a4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	0011      	movs	r1, r2
 800a59c:	0018      	movs	r0, r3
 800a59e:	f000 fc77 	bl	800ae90 <USBD_CtlError>
              break;
 800a5a2:	e000      	b.n	800a5a6 <USBD_StdEPReq+0x1b0>
              break;
 800a5a4:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a5a6:	e0cd      	b.n	800a744 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	23a7      	movs	r3, #167	; 0xa7
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	5cd3      	ldrb	r3, [r2, r3]
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d002      	beq.n	800a5ba <USBD_StdEPReq+0x1c4>
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d03c      	beq.n	800a632 <USBD_StdEPReq+0x23c>
 800a5b8:	e0b5      	b.n	800a726 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5ba:	220e      	movs	r2, #14
 800a5bc:	18bb      	adds	r3, r7, r2
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00a      	beq.n	800a5da <USBD_StdEPReq+0x1e4>
 800a5c4:	18bb      	adds	r3, r7, r2
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b80      	cmp	r3, #128	; 0x80
 800a5ca:	d006      	beq.n	800a5da <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	0011      	movs	r1, r2
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	f000 fc5c 	bl	800ae90 <USBD_CtlError>
                break;
 800a5d8:	e0ac      	b.n	800a734 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5da:	220e      	movs	r2, #14
 800a5dc:	18bb      	adds	r3, r7, r2
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	b25b      	sxtb	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	da0c      	bge.n	800a600 <USBD_StdEPReq+0x20a>
 800a5e6:	18bb      	adds	r3, r7, r2
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	227f      	movs	r2, #127	; 0x7f
 800a5ec:	401a      	ands	r2, r3
 800a5ee:	0013      	movs	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	189b      	adds	r3, r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	3310      	adds	r3, #16
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	18d3      	adds	r3, r2, r3
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	e00d      	b.n	800a61c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a600:	230e      	movs	r3, #14
 800a602:	18fb      	adds	r3, r7, r3
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	227f      	movs	r2, #127	; 0x7f
 800a608:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a60a:	0013      	movs	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	189b      	adds	r3, r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	3351      	adds	r3, #81	; 0x51
 800a614:	33ff      	adds	r3, #255	; 0xff
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	18d3      	adds	r3, r2, r3
 800a61a:	3304      	adds	r3, #4
 800a61c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2202      	movs	r2, #2
 800a62a:	0018      	movs	r0, r3
 800a62c:	f000 fcae 	bl	800af8c <USBD_CtlSendData>
              break;
 800a630:	e080      	b.n	800a734 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a632:	220e      	movs	r2, #14
 800a634:	18bb      	adds	r3, r7, r2
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	b25b      	sxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	da14      	bge.n	800a668 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a63e:	18bb      	adds	r3, r7, r2
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	220f      	movs	r2, #15
 800a644:	401a      	ands	r2, r3
 800a646:	6879      	ldr	r1, [r7, #4]
 800a648:	0013      	movs	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	189b      	adds	r3, r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	18cb      	adds	r3, r1, r3
 800a652:	3318      	adds	r3, #24
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d11e      	bne.n	800a698 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	0011      	movs	r1, r2
 800a660:	0018      	movs	r0, r3
 800a662:	f000 fc15 	bl	800ae90 <USBD_CtlError>
                  break;
 800a666:	e065      	b.n	800a734 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a668:	230e      	movs	r3, #14
 800a66a:	18fb      	adds	r3, r7, r3
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	220f      	movs	r2, #15
 800a670:	401a      	ands	r2, r3
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	23ac      	movs	r3, #172	; 0xac
 800a676:	0059      	lsls	r1, r3, #1
 800a678:	0013      	movs	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	189b      	adds	r3, r3, r2
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	18c3      	adds	r3, r0, r3
 800a682:	185b      	adds	r3, r3, r1
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	0011      	movs	r1, r2
 800a690:	0018      	movs	r0, r3
 800a692:	f000 fbfd 	bl	800ae90 <USBD_CtlError>
                  break;
 800a696:	e04d      	b.n	800a734 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a698:	220e      	movs	r2, #14
 800a69a:	18bb      	adds	r3, r7, r2
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	b25b      	sxtb	r3, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	da0c      	bge.n	800a6be <USBD_StdEPReq+0x2c8>
 800a6a4:	18bb      	adds	r3, r7, r2
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	227f      	movs	r2, #127	; 0x7f
 800a6aa:	401a      	ands	r2, r3
 800a6ac:	0013      	movs	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	189b      	adds	r3, r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	3310      	adds	r3, #16
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	18d3      	adds	r3, r2, r3
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	e00d      	b.n	800a6da <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6be:	230e      	movs	r3, #14
 800a6c0:	18fb      	adds	r3, r7, r3
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	227f      	movs	r2, #127	; 0x7f
 800a6c6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6c8:	0013      	movs	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	189b      	adds	r3, r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	3351      	adds	r3, #81	; 0x51
 800a6d2:	33ff      	adds	r3, #255	; 0xff
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	18d3      	adds	r3, r2, r3
 800a6d8:	3304      	adds	r3, #4
 800a6da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a6dc:	220e      	movs	r2, #14
 800a6de:	18bb      	adds	r3, r7, r2
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <USBD_StdEPReq+0x2f8>
 800a6e6:	18bb      	adds	r3, r7, r2
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b80      	cmp	r3, #128	; 0x80
 800a6ec:	d103      	bne.n	800a6f6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	e010      	b.n	800a718 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a6f6:	230e      	movs	r3, #14
 800a6f8:	18fb      	adds	r3, r7, r3
 800a6fa:	781a      	ldrb	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	0011      	movs	r1, r2
 800a700:	0018      	movs	r0, r3
 800a702:	f001 f8fc 	bl	800b8fe <USBD_LL_IsStallEP>
 800a706:	1e03      	subs	r3, r0, #0
 800a708:	d003      	beq.n	800a712 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2201      	movs	r2, #1
 800a70e:	601a      	str	r2, [r3, #0]
 800a710:	e002      	b.n	800a718 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2200      	movs	r2, #0
 800a716:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2202      	movs	r2, #2
 800a71e:	0018      	movs	r0, r3
 800a720:	f000 fc34 	bl	800af8c <USBD_CtlSendData>
              break;
 800a724:	e006      	b.n	800a734 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	0011      	movs	r1, r2
 800a72c:	0018      	movs	r0, r3
 800a72e:	f000 fbaf 	bl	800ae90 <USBD_CtlError>
              break;
 800a732:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a734:	e006      	b.n	800a744 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	0011      	movs	r1, r2
 800a73c:	0018      	movs	r0, r3
 800a73e:	f000 fba7 	bl	800ae90 <USBD_CtlError>
          break;
 800a742:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a744:	e006      	b.n	800a754 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800a746:	683a      	ldr	r2, [r7, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	0011      	movs	r1, r2
 800a74c:	0018      	movs	r0, r3
 800a74e:	f000 fb9f 	bl	800ae90 <USBD_CtlError>
      break;
 800a752:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a754:	230f      	movs	r3, #15
 800a756:	18fb      	adds	r3, r7, r3
 800a758:	781b      	ldrb	r3, [r3, #0]
}
 800a75a:	0018      	movs	r0, r3
 800a75c:	46bd      	mov	sp, r7
 800a75e:	b004      	add	sp, #16
 800a760:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a764 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a76e:	2308      	movs	r3, #8
 800a770:	18fb      	adds	r3, r7, r3
 800a772:	2200      	movs	r2, #0
 800a774:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a77a:	230b      	movs	r3, #11
 800a77c:	18fb      	adds	r3, r7, r3
 800a77e:	2200      	movs	r2, #0
 800a780:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	885b      	ldrh	r3, [r3, #2]
 800a786:	0a1b      	lsrs	r3, r3, #8
 800a788:	b29b      	uxth	r3, r3
 800a78a:	2b07      	cmp	r3, #7
 800a78c:	d900      	bls.n	800a790 <USBD_GetDescriptor+0x2c>
 800a78e:	e159      	b.n	800aa44 <USBD_GetDescriptor+0x2e0>
 800a790:	009a      	lsls	r2, r3, #2
 800a792:	4bcb      	ldr	r3, [pc, #812]	; (800aac0 <USBD_GetDescriptor+0x35c>)
 800a794:	18d3      	adds	r3, r2, r3
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	23ac      	movs	r3, #172	; 0xac
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	58d3      	ldr	r3, [r2, r3]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	7c12      	ldrb	r2, [r2, #16]
 800a7a8:	2108      	movs	r1, #8
 800a7aa:	1879      	adds	r1, r7, r1
 800a7ac:	0010      	movs	r0, r2
 800a7ae:	4798      	blx	r3
 800a7b0:	0003      	movs	r3, r0
 800a7b2:	60fb      	str	r3, [r7, #12]
      break;
 800a7b4:	e153      	b.n	800aa5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	7c1b      	ldrb	r3, [r3, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10f      	bne.n	800a7de <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	23ad      	movs	r3, #173	; 0xad
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	58d3      	ldr	r3, [r2, r3]
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c8:	2208      	movs	r2, #8
 800a7ca:	18ba      	adds	r2, r7, r2
 800a7cc:	0010      	movs	r0, r2
 800a7ce:	4798      	blx	r3
 800a7d0:	0003      	movs	r3, r0
 800a7d2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	2202      	movs	r2, #2
 800a7da:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7dc:	e13f      	b.n	800aa5e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	23ad      	movs	r3, #173	; 0xad
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	58d3      	ldr	r3, [r2, r3]
 800a7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e8:	2208      	movs	r2, #8
 800a7ea:	18ba      	adds	r2, r7, r2
 800a7ec:	0010      	movs	r0, r2
 800a7ee:	4798      	blx	r3
 800a7f0:	0003      	movs	r3, r0
 800a7f2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	2202      	movs	r2, #2
 800a7fa:	701a      	strb	r2, [r3, #0]
      break;
 800a7fc:	e12f      	b.n	800aa5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	885b      	ldrh	r3, [r3, #2]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b05      	cmp	r3, #5
 800a806:	d900      	bls.n	800a80a <USBD_GetDescriptor+0xa6>
 800a808:	e0d0      	b.n	800a9ac <USBD_GetDescriptor+0x248>
 800a80a:	009a      	lsls	r2, r3, #2
 800a80c:	4bad      	ldr	r3, [pc, #692]	; (800aac4 <USBD_GetDescriptor+0x360>)
 800a80e:	18d3      	adds	r3, r2, r3
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	23ac      	movs	r3, #172	; 0xac
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	58d3      	ldr	r3, [r2, r3]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00d      	beq.n	800a83e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	23ac      	movs	r3, #172	; 0xac
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	58d3      	ldr	r3, [r2, r3]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	7c12      	ldrb	r2, [r2, #16]
 800a830:	2108      	movs	r1, #8
 800a832:	1879      	adds	r1, r7, r1
 800a834:	0010      	movs	r0, r2
 800a836:	4798      	blx	r3
 800a838:	0003      	movs	r3, r0
 800a83a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a83c:	e0c3      	b.n	800a9c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	0011      	movs	r1, r2
 800a844:	0018      	movs	r0, r3
 800a846:	f000 fb23 	bl	800ae90 <USBD_CtlError>
            err++;
 800a84a:	210b      	movs	r1, #11
 800a84c:	187b      	adds	r3, r7, r1
 800a84e:	781a      	ldrb	r2, [r3, #0]
 800a850:	187b      	adds	r3, r7, r1
 800a852:	3201      	adds	r2, #1
 800a854:	701a      	strb	r2, [r3, #0]
          break;
 800a856:	e0b6      	b.n	800a9c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	23ac      	movs	r3, #172	; 0xac
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	58d3      	ldr	r3, [r2, r3]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00d      	beq.n	800a882 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	23ac      	movs	r3, #172	; 0xac
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	58d3      	ldr	r3, [r2, r3]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	7c12      	ldrb	r2, [r2, #16]
 800a874:	2108      	movs	r1, #8
 800a876:	1879      	adds	r1, r7, r1
 800a878:	0010      	movs	r0, r2
 800a87a:	4798      	blx	r3
 800a87c:	0003      	movs	r3, r0
 800a87e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a880:	e0a1      	b.n	800a9c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	0011      	movs	r1, r2
 800a888:	0018      	movs	r0, r3
 800a88a:	f000 fb01 	bl	800ae90 <USBD_CtlError>
            err++;
 800a88e:	210b      	movs	r1, #11
 800a890:	187b      	adds	r3, r7, r1
 800a892:	781a      	ldrb	r2, [r3, #0]
 800a894:	187b      	adds	r3, r7, r1
 800a896:	3201      	adds	r2, #1
 800a898:	701a      	strb	r2, [r3, #0]
          break;
 800a89a:	e094      	b.n	800a9c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	23ac      	movs	r3, #172	; 0xac
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	58d3      	ldr	r3, [r2, r3]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00d      	beq.n	800a8c6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	23ac      	movs	r3, #172	; 0xac
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	58d3      	ldr	r3, [r2, r3]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	7c12      	ldrb	r2, [r2, #16]
 800a8b8:	2108      	movs	r1, #8
 800a8ba:	1879      	adds	r1, r7, r1
 800a8bc:	0010      	movs	r0, r2
 800a8be:	4798      	blx	r3
 800a8c0:	0003      	movs	r3, r0
 800a8c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8c4:	e07f      	b.n	800a9c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	0011      	movs	r1, r2
 800a8cc:	0018      	movs	r0, r3
 800a8ce:	f000 fadf 	bl	800ae90 <USBD_CtlError>
            err++;
 800a8d2:	210b      	movs	r1, #11
 800a8d4:	187b      	adds	r3, r7, r1
 800a8d6:	781a      	ldrb	r2, [r3, #0]
 800a8d8:	187b      	adds	r3, r7, r1
 800a8da:	3201      	adds	r2, #1
 800a8dc:	701a      	strb	r2, [r3, #0]
          break;
 800a8de:	e072      	b.n	800a9c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	23ac      	movs	r3, #172	; 0xac
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	58d3      	ldr	r3, [r2, r3]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00d      	beq.n	800a90a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	23ac      	movs	r3, #172	; 0xac
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	58d3      	ldr	r3, [r2, r3]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	7c12      	ldrb	r2, [r2, #16]
 800a8fc:	2108      	movs	r1, #8
 800a8fe:	1879      	adds	r1, r7, r1
 800a900:	0010      	movs	r0, r2
 800a902:	4798      	blx	r3
 800a904:	0003      	movs	r3, r0
 800a906:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a908:	e05d      	b.n	800a9c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	0011      	movs	r1, r2
 800a910:	0018      	movs	r0, r3
 800a912:	f000 fabd 	bl	800ae90 <USBD_CtlError>
            err++;
 800a916:	210b      	movs	r1, #11
 800a918:	187b      	adds	r3, r7, r1
 800a91a:	781a      	ldrb	r2, [r3, #0]
 800a91c:	187b      	adds	r3, r7, r1
 800a91e:	3201      	adds	r2, #1
 800a920:	701a      	strb	r2, [r3, #0]
          break;
 800a922:	e050      	b.n	800a9c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	23ac      	movs	r3, #172	; 0xac
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	58d3      	ldr	r3, [r2, r3]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00d      	beq.n	800a94e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	23ac      	movs	r3, #172	; 0xac
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	58d3      	ldr	r3, [r2, r3]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	7c12      	ldrb	r2, [r2, #16]
 800a940:	2108      	movs	r1, #8
 800a942:	1879      	adds	r1, r7, r1
 800a944:	0010      	movs	r0, r2
 800a946:	4798      	blx	r3
 800a948:	0003      	movs	r3, r0
 800a94a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a94c:	e03b      	b.n	800a9c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	0011      	movs	r1, r2
 800a954:	0018      	movs	r0, r3
 800a956:	f000 fa9b 	bl	800ae90 <USBD_CtlError>
            err++;
 800a95a:	210b      	movs	r1, #11
 800a95c:	187b      	adds	r3, r7, r1
 800a95e:	781a      	ldrb	r2, [r3, #0]
 800a960:	187b      	adds	r3, r7, r1
 800a962:	3201      	adds	r2, #1
 800a964:	701a      	strb	r2, [r3, #0]
          break;
 800a966:	e02e      	b.n	800a9c6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	23ac      	movs	r3, #172	; 0xac
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	58d3      	ldr	r3, [r2, r3]
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00d      	beq.n	800a992 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	23ac      	movs	r3, #172	; 0xac
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	58d3      	ldr	r3, [r2, r3]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	7c12      	ldrb	r2, [r2, #16]
 800a984:	2108      	movs	r1, #8
 800a986:	1879      	adds	r1, r7, r1
 800a988:	0010      	movs	r0, r2
 800a98a:	4798      	blx	r3
 800a98c:	0003      	movs	r3, r0
 800a98e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a990:	e019      	b.n	800a9c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	0011      	movs	r1, r2
 800a998:	0018      	movs	r0, r3
 800a99a:	f000 fa79 	bl	800ae90 <USBD_CtlError>
            err++;
 800a99e:	210b      	movs	r1, #11
 800a9a0:	187b      	adds	r3, r7, r1
 800a9a2:	781a      	ldrb	r2, [r3, #0]
 800a9a4:	187b      	adds	r3, r7, r1
 800a9a6:	3201      	adds	r2, #1
 800a9a8:	701a      	strb	r2, [r3, #0]
          break;
 800a9aa:	e00c      	b.n	800a9c6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	0011      	movs	r1, r2
 800a9b2:	0018      	movs	r0, r3
 800a9b4:	f000 fa6c 	bl	800ae90 <USBD_CtlError>
          err++;
 800a9b8:	210b      	movs	r1, #11
 800a9ba:	187b      	adds	r3, r7, r1
 800a9bc:	781a      	ldrb	r2, [r3, #0]
 800a9be:	187b      	adds	r3, r7, r1
 800a9c0:	3201      	adds	r2, #1
 800a9c2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800a9c4:	e04b      	b.n	800aa5e <USBD_GetDescriptor+0x2fa>
 800a9c6:	e04a      	b.n	800aa5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	7c1b      	ldrb	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10b      	bne.n	800a9e8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	23ad      	movs	r3, #173	; 0xad
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	58d3      	ldr	r3, [r2, r3]
 800a9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9da:	2208      	movs	r2, #8
 800a9dc:	18ba      	adds	r2, r7, r2
 800a9de:	0010      	movs	r0, r2
 800a9e0:	4798      	blx	r3
 800a9e2:	0003      	movs	r3, r0
 800a9e4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9e6:	e03a      	b.n	800aa5e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	0011      	movs	r1, r2
 800a9ee:	0018      	movs	r0, r3
 800a9f0:	f000 fa4e 	bl	800ae90 <USBD_CtlError>
        err++;
 800a9f4:	210b      	movs	r1, #11
 800a9f6:	187b      	adds	r3, r7, r1
 800a9f8:	781a      	ldrb	r2, [r3, #0]
 800a9fa:	187b      	adds	r3, r7, r1
 800a9fc:	3201      	adds	r2, #1
 800a9fe:	701a      	strb	r2, [r3, #0]
      break;
 800aa00:	e02d      	b.n	800aa5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	7c1b      	ldrb	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10f      	bne.n	800aa2a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	23ad      	movs	r3, #173	; 0xad
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	58d3      	ldr	r3, [r2, r3]
 800aa12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa14:	2208      	movs	r2, #8
 800aa16:	18ba      	adds	r2, r7, r2
 800aa18:	0010      	movs	r0, r2
 800aa1a:	4798      	blx	r3
 800aa1c:	0003      	movs	r3, r0
 800aa1e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3301      	adds	r3, #1
 800aa24:	2207      	movs	r2, #7
 800aa26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa28:	e019      	b.n	800aa5e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	0011      	movs	r1, r2
 800aa30:	0018      	movs	r0, r3
 800aa32:	f000 fa2d 	bl	800ae90 <USBD_CtlError>
        err++;
 800aa36:	210b      	movs	r1, #11
 800aa38:	187b      	adds	r3, r7, r1
 800aa3a:	781a      	ldrb	r2, [r3, #0]
 800aa3c:	187b      	adds	r3, r7, r1
 800aa3e:	3201      	adds	r2, #1
 800aa40:	701a      	strb	r2, [r3, #0]
      break;
 800aa42:	e00c      	b.n	800aa5e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	0011      	movs	r1, r2
 800aa4a:	0018      	movs	r0, r3
 800aa4c:	f000 fa20 	bl	800ae90 <USBD_CtlError>
      err++;
 800aa50:	210b      	movs	r1, #11
 800aa52:	187b      	adds	r3, r7, r1
 800aa54:	781a      	ldrb	r2, [r3, #0]
 800aa56:	187b      	adds	r3, r7, r1
 800aa58:	3201      	adds	r2, #1
 800aa5a:	701a      	strb	r2, [r3, #0]
      break;
 800aa5c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800aa5e:	230b      	movs	r3, #11
 800aa60:	18fb      	adds	r3, r7, r3
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d127      	bne.n	800aab8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800aa68:	2108      	movs	r1, #8
 800aa6a:	187b      	adds	r3, r7, r1
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d019      	beq.n	800aaa6 <USBD_GetDescriptor+0x342>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	88db      	ldrh	r3, [r3, #6]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d015      	beq.n	800aaa6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	88da      	ldrh	r2, [r3, #6]
 800aa7e:	187b      	adds	r3, r7, r1
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	1c18      	adds	r0, r3, #0
 800aa84:	1c11      	adds	r1, r2, #0
 800aa86:	b28a      	uxth	r2, r1
 800aa88:	b283      	uxth	r3, r0
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d900      	bls.n	800aa90 <USBD_GetDescriptor+0x32c>
 800aa8e:	1c01      	adds	r1, r0, #0
 800aa90:	b28a      	uxth	r2, r1
 800aa92:	2108      	movs	r1, #8
 800aa94:	187b      	adds	r3, r7, r1
 800aa96:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa98:	187b      	adds	r3, r7, r1
 800aa9a:	881a      	ldrh	r2, [r3, #0]
 800aa9c:	68f9      	ldr	r1, [r7, #12]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	f000 fa73 	bl	800af8c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	88db      	ldrh	r3, [r3, #6]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d105      	bne.n	800aaba <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	0018      	movs	r0, r3
 800aab2:	f000 fad5 	bl	800b060 <USBD_CtlSendStatus>
 800aab6:	e000      	b.n	800aaba <USBD_GetDescriptor+0x356>
    return;
 800aab8:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800aaba:	46bd      	mov	sp, r7
 800aabc:	b004      	add	sp, #16
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	0800bec0 	.word	0x0800bec0
 800aac4:	0800bee0 	.word	0x0800bee0

0800aac8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aac8:	b590      	push	{r4, r7, lr}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	889b      	ldrh	r3, [r3, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d13d      	bne.n	800ab56 <USBD_SetAddress+0x8e>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	88db      	ldrh	r3, [r3, #6]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d139      	bne.n	800ab56 <USBD_SetAddress+0x8e>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	885b      	ldrh	r3, [r3, #2]
 800aae6:	2b7f      	cmp	r3, #127	; 0x7f
 800aae8:	d835      	bhi.n	800ab56 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	885b      	ldrh	r3, [r3, #2]
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	230f      	movs	r3, #15
 800aaf2:	18fb      	adds	r3, r7, r3
 800aaf4:	217f      	movs	r1, #127	; 0x7f
 800aaf6:	400a      	ands	r2, r1
 800aaf8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	23a7      	movs	r3, #167	; 0xa7
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	5cd3      	ldrb	r3, [r2, r3]
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d106      	bne.n	800ab14 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	0011      	movs	r1, r2
 800ab0c:	0018      	movs	r0, r3
 800ab0e:	f000 f9bf 	bl	800ae90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab12:	e027      	b.n	800ab64 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	240f      	movs	r4, #15
 800ab18:	193a      	adds	r2, r7, r4
 800ab1a:	4914      	ldr	r1, [pc, #80]	; (800ab6c <USBD_SetAddress+0xa4>)
 800ab1c:	7812      	ldrb	r2, [r2, #0]
 800ab1e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab20:	193b      	adds	r3, r7, r4
 800ab22:	781a      	ldrb	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	0011      	movs	r1, r2
 800ab28:	0018      	movs	r0, r3
 800ab2a:	f000 ff19 	bl	800b960 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	0018      	movs	r0, r3
 800ab32:	f000 fa95 	bl	800b060 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab36:	193b      	adds	r3, r7, r4
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d005      	beq.n	800ab4a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	23a7      	movs	r3, #167	; 0xa7
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	2102      	movs	r1, #2
 800ab46:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab48:	e00c      	b.n	800ab64 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	23a7      	movs	r3, #167	; 0xa7
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	2101      	movs	r1, #1
 800ab52:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab54:	e006      	b.n	800ab64 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	0011      	movs	r1, r2
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	f000 f997 	bl	800ae90 <USBD_CtlError>
  }
}
 800ab62:	46c0      	nop			; (mov r8, r8)
 800ab64:	46c0      	nop			; (mov r8, r8)
 800ab66:	46bd      	mov	sp, r7
 800ab68:	b005      	add	sp, #20
 800ab6a:	bd90      	pop	{r4, r7, pc}
 800ab6c:	0000029e 	.word	0x0000029e

0800ab70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	885b      	ldrh	r3, [r3, #2]
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	4b4c      	ldr	r3, [pc, #304]	; (800acb4 <USBD_SetConfig+0x144>)
 800ab82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab84:	4b4b      	ldr	r3, [pc, #300]	; (800acb4 <USBD_SetConfig+0x144>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d906      	bls.n	800ab9a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800ab8c:	683a      	ldr	r2, [r7, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	0011      	movs	r1, r2
 800ab92:	0018      	movs	r0, r3
 800ab94:	f000 f97c 	bl	800ae90 <USBD_CtlError>
 800ab98:	e088      	b.n	800acac <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	23a7      	movs	r3, #167	; 0xa7
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	5cd3      	ldrb	r3, [r2, r3]
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	d002      	beq.n	800abac <USBD_SetConfig+0x3c>
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d029      	beq.n	800abfe <USBD_SetConfig+0x8e>
 800abaa:	e071      	b.n	800ac90 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800abac:	4b41      	ldr	r3, [pc, #260]	; (800acb4 <USBD_SetConfig+0x144>)
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d01f      	beq.n	800abf4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800abb4:	4b3f      	ldr	r3, [pc, #252]	; (800acb4 <USBD_SetConfig+0x144>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	001a      	movs	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	23a7      	movs	r3, #167	; 0xa7
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	2103      	movs	r1, #3
 800abc6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800abc8:	4b3a      	ldr	r3, [pc, #232]	; (800acb4 <USBD_SetConfig+0x144>)
 800abca:	781a      	ldrb	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	0011      	movs	r1, r2
 800abd0:	0018      	movs	r0, r3
 800abd2:	f7ff f8c5 	bl	8009d60 <USBD_SetClassConfig>
 800abd6:	0003      	movs	r3, r0
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d106      	bne.n	800abea <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	0011      	movs	r1, r2
 800abe2:	0018      	movs	r0, r3
 800abe4:	f000 f954 	bl	800ae90 <USBD_CtlError>
            return;
 800abe8:	e060      	b.n	800acac <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	0018      	movs	r0, r3
 800abee:	f000 fa37 	bl	800b060 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800abf2:	e05b      	b.n	800acac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	0018      	movs	r0, r3
 800abf8:	f000 fa32 	bl	800b060 <USBD_CtlSendStatus>
        break;
 800abfc:	e056      	b.n	800acac <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800abfe:	4b2d      	ldr	r3, [pc, #180]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d115      	bne.n	800ac32 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	23a7      	movs	r3, #167	; 0xa7
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	2102      	movs	r1, #2
 800ac0e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800ac10:	4b28      	ldr	r3, [pc, #160]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	001a      	movs	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ac1a:	4b26      	ldr	r3, [pc, #152]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac1c:	781a      	ldrb	r2, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	0011      	movs	r1, r2
 800ac22:	0018      	movs	r0, r3
 800ac24:	f7ff f8c3 	bl	8009dae <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	0018      	movs	r0, r3
 800ac2c:	f000 fa18 	bl	800b060 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ac30:	e03c      	b.n	800acac <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800ac32:	4b20      	ldr	r3, [pc, #128]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	001a      	movs	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d022      	beq.n	800ac86 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	0011      	movs	r1, r2
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f7ff f8af 	bl	8009dae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ac50:	4b18      	ldr	r3, [pc, #96]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	001a      	movs	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ac5a:	4b16      	ldr	r3, [pc, #88]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac5c:	781a      	ldrb	r2, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	0011      	movs	r1, r2
 800ac62:	0018      	movs	r0, r3
 800ac64:	f7ff f87c 	bl	8009d60 <USBD_SetClassConfig>
 800ac68:	0003      	movs	r3, r0
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d106      	bne.n	800ac7c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	0011      	movs	r1, r2
 800ac74:	0018      	movs	r0, r3
 800ac76:	f000 f90b 	bl	800ae90 <USBD_CtlError>
            return;
 800ac7a:	e017      	b.n	800acac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	0018      	movs	r0, r3
 800ac80:	f000 f9ee 	bl	800b060 <USBD_CtlSendStatus>
        break;
 800ac84:	e012      	b.n	800acac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	0018      	movs	r0, r3
 800ac8a:	f000 f9e9 	bl	800b060 <USBD_CtlSendStatus>
        break;
 800ac8e:	e00d      	b.n	800acac <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	0011      	movs	r1, r2
 800ac96:	0018      	movs	r0, r3
 800ac98:	f000 f8fa 	bl	800ae90 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <USBD_SetConfig+0x144>)
 800ac9e:	781a      	ldrb	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	0011      	movs	r1, r2
 800aca4:	0018      	movs	r0, r3
 800aca6:	f7ff f882 	bl	8009dae <USBD_ClrClassConfig>
        break;
 800acaa:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800acac:	46bd      	mov	sp, r7
 800acae:	b002      	add	sp, #8
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	46c0      	nop			; (mov r8, r8)
 800acb4:	20000310 	.word	0x20000310

0800acb8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	88db      	ldrh	r3, [r3, #6]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d006      	beq.n	800acd8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	0011      	movs	r1, r2
 800acd0:	0018      	movs	r0, r3
 800acd2:	f000 f8dd 	bl	800ae90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800acd6:	e026      	b.n	800ad26 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	23a7      	movs	r3, #167	; 0xa7
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	5cd3      	ldrb	r3, [r2, r3]
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	dc02      	bgt.n	800acea <USBD_GetConfig+0x32>
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dc03      	bgt.n	800acf0 <USBD_GetConfig+0x38>
 800ace8:	e016      	b.n	800ad18 <USBD_GetConfig+0x60>
 800acea:	2b03      	cmp	r3, #3
 800acec:	d00c      	beq.n	800ad08 <USBD_GetConfig+0x50>
 800acee:	e013      	b.n	800ad18 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3308      	adds	r3, #8
 800acfa:	0019      	movs	r1, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	0018      	movs	r0, r3
 800ad02:	f000 f943 	bl	800af8c <USBD_CtlSendData>
        break;
 800ad06:	e00e      	b.n	800ad26 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	1d19      	adds	r1, r3, #4
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	0018      	movs	r0, r3
 800ad12:	f000 f93b 	bl	800af8c <USBD_CtlSendData>
        break;
 800ad16:	e006      	b.n	800ad26 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	0011      	movs	r1, r2
 800ad1e:	0018      	movs	r0, r3
 800ad20:	f000 f8b6 	bl	800ae90 <USBD_CtlError>
        break;
 800ad24:	46c0      	nop			; (mov r8, r8)
}
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b002      	add	sp, #8
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	23a7      	movs	r3, #167	; 0xa7
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	5cd3      	ldrb	r3, [r2, r3]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d822      	bhi.n	800ad8c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	88db      	ldrh	r3, [r3, #6]
 800ad4a:	2b02      	cmp	r3, #2
 800ad4c:	d006      	beq.n	800ad5c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	0011      	movs	r1, r2
 800ad54:	0018      	movs	r0, r3
 800ad56:	f000 f89b 	bl	800ae90 <USBD_CtlError>
        break;
 800ad5a:	e01e      	b.n	800ad9a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	23a9      	movs	r3, #169	; 0xa9
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	58d3      	ldr	r3, [r2, r3]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d005      	beq.n	800ad7a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	2202      	movs	r2, #2
 800ad74:	431a      	orrs	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	0019      	movs	r1, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2202      	movs	r2, #2
 800ad84:	0018      	movs	r0, r3
 800ad86:	f000 f901 	bl	800af8c <USBD_CtlSendData>
      break;
 800ad8a:	e006      	b.n	800ad9a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	0011      	movs	r1, r2
 800ad92:	0018      	movs	r0, r3
 800ad94:	f000 f87c 	bl	800ae90 <USBD_CtlError>
      break;
 800ad98:	46c0      	nop			; (mov r8, r8)
  }
}
 800ad9a:	46c0      	nop			; (mov r8, r8)
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	b002      	add	sp, #8
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b082      	sub	sp, #8
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	885b      	ldrh	r3, [r3, #2]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d108      	bne.n	800adc6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	23a9      	movs	r3, #169	; 0xa9
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	2101      	movs	r1, #1
 800adbc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	0018      	movs	r0, r3
 800adc2:	f000 f94d 	bl	800b060 <USBD_CtlSendStatus>
  }
}
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	46bd      	mov	sp, r7
 800adca:	b002      	add	sp, #8
 800adcc:	bd80      	pop	{r7, pc}

0800adce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
 800add6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	23a7      	movs	r3, #167	; 0xa7
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	5cd3      	ldrb	r3, [r2, r3]
 800ade0:	3b01      	subs	r3, #1
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d80d      	bhi.n	800ae02 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	885b      	ldrh	r3, [r3, #2]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d110      	bne.n	800ae10 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	23a9      	movs	r3, #169	; 0xa9
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	2100      	movs	r1, #0
 800adf6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	0018      	movs	r0, r3
 800adfc:	f000 f930 	bl	800b060 <USBD_CtlSendStatus>
      }
      break;
 800ae00:	e006      	b.n	800ae10 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	0011      	movs	r1, r2
 800ae08:	0018      	movs	r0, r3
 800ae0a:	f000 f841 	bl	800ae90 <USBD_CtlError>
      break;
 800ae0e:	e000      	b.n	800ae12 <USBD_ClrFeature+0x44>
      break;
 800ae10:	46c0      	nop			; (mov r8, r8)
  }
}
 800ae12:	46c0      	nop			; (mov r8, r8)
 800ae14:	46bd      	mov	sp, r7
 800ae16:	b002      	add	sp, #8
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781a      	ldrb	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	785a      	ldrb	r2, [r3, #1]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	3302      	adds	r3, #2
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	3303      	adds	r3, #3
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	021b      	lsls	r3, r3, #8
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	18d3      	adds	r3, r2, r3
 800ae4a:	b29a      	uxth	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	3304      	adds	r3, #4
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	3305      	adds	r3, #5
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	021b      	lsls	r3, r3, #8
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	18d3      	adds	r3, r2, r3
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	3306      	adds	r3, #6
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	3307      	adds	r3, #7
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	021b      	lsls	r3, r3, #8
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	18d3      	adds	r3, r2, r3
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	80da      	strh	r2, [r3, #6]

}
 800ae88:	46c0      	nop			; (mov r8, r8)
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	b002      	add	sp, #8
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2180      	movs	r1, #128	; 0x80
 800ae9e:	0018      	movs	r0, r3
 800aea0:	f000 fcd7 	bl	800b852 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2100      	movs	r1, #0
 800aea8:	0018      	movs	r0, r3
 800aeaa:	f000 fcd2 	bl	800b852 <USBD_LL_StallEP>
}
 800aeae:	46c0      	nop			; (mov r8, r8)
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	b002      	add	sp, #8
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aeb6:	b590      	push	{r4, r7, lr}
 800aeb8:	b087      	sub	sp, #28
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	60f8      	str	r0, [r7, #12]
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aec2:	2417      	movs	r4, #23
 800aec4:	193b      	adds	r3, r7, r4
 800aec6:	2200      	movs	r2, #0
 800aec8:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d03c      	beq.n	800af4a <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	0018      	movs	r0, r3
 800aed4:	f000 f83d 	bl	800af52 <USBD_GetLen>
 800aed8:	0003      	movs	r3, r0
 800aeda:	3301      	adds	r3, #1
 800aedc:	b29b      	uxth	r3, r3
 800aede:	18db      	adds	r3, r3, r3
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aee6:	193b      	adds	r3, r7, r4
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	193a      	adds	r2, r7, r4
 800aeec:	1c59      	adds	r1, r3, #1
 800aeee:	7011      	strb	r1, [r2, #0]
 800aef0:	001a      	movs	r2, r3
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	189b      	adds	r3, r3, r2
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	7812      	ldrb	r2, [r2, #0]
 800aefa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aefc:	193b      	adds	r3, r7, r4
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	193a      	adds	r2, r7, r4
 800af02:	1c59      	adds	r1, r3, #1
 800af04:	7011      	strb	r1, [r2, #0]
 800af06:	001a      	movs	r2, r3
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	189b      	adds	r3, r3, r2
 800af0c:	2203      	movs	r2, #3
 800af0e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800af10:	e017      	b.n	800af42 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	1c5a      	adds	r2, r3, #1
 800af16:	60fa      	str	r2, [r7, #12]
 800af18:	2417      	movs	r4, #23
 800af1a:	193a      	adds	r2, r7, r4
 800af1c:	7812      	ldrb	r2, [r2, #0]
 800af1e:	1939      	adds	r1, r7, r4
 800af20:	1c50      	adds	r0, r2, #1
 800af22:	7008      	strb	r0, [r1, #0]
 800af24:	0011      	movs	r1, r2
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	1852      	adds	r2, r2, r1
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800af2e:	193b      	adds	r3, r7, r4
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	193a      	adds	r2, r7, r4
 800af34:	1c59      	adds	r1, r3, #1
 800af36:	7011      	strb	r1, [r2, #0]
 800af38:	001a      	movs	r2, r3
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	189b      	adds	r3, r3, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1e3      	bne.n	800af12 <USBD_GetString+0x5c>
    }
  }
}
 800af4a:	46c0      	nop			; (mov r8, r8)
 800af4c:	46bd      	mov	sp, r7
 800af4e:	b007      	add	sp, #28
 800af50:	bd90      	pop	{r4, r7, pc}

0800af52 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af5a:	230f      	movs	r3, #15
 800af5c:	18fb      	adds	r3, r7, r3
 800af5e:	2200      	movs	r2, #0
 800af60:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800af62:	e008      	b.n	800af76 <USBD_GetLen+0x24>
  {
    len++;
 800af64:	210f      	movs	r1, #15
 800af66:	187b      	adds	r3, r7, r1
 800af68:	781a      	ldrb	r2, [r3, #0]
 800af6a:	187b      	adds	r3, r7, r1
 800af6c:	3201      	adds	r2, #1
 800af6e:	701a      	strb	r2, [r3, #0]
    buf++;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	3301      	adds	r3, #1
 800af74:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1f2      	bne.n	800af64 <USBD_GetLen+0x12>
  }

  return len;
 800af7e:	230f      	movs	r3, #15
 800af80:	18fb      	adds	r3, r7, r3
 800af82:	781b      	ldrb	r3, [r3, #0]
}
 800af84:	0018      	movs	r0, r3
 800af86:	46bd      	mov	sp, r7
 800af88:	b004      	add	sp, #16
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	1dbb      	adds	r3, r7, #6
 800af98:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	23a5      	movs	r3, #165	; 0xa5
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	2102      	movs	r1, #2
 800afa2:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800afa4:	1dbb      	adds	r3, r7, #6
 800afa6:	881a      	ldrh	r2, [r3, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800afac:	1dbb      	adds	r3, r7, #6
 800afae:	881a      	ldrh	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afb4:	1dbb      	adds	r3, r7, #6
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	2100      	movs	r1, #0
 800afbe:	f000 fcfa 	bl	800b9b6 <USBD_LL_Transmit>

  return USBD_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	0018      	movs	r0, r3
 800afc6:	46bd      	mov	sp, r7
 800afc8:	b004      	add	sp, #16
 800afca:	bd80      	pop	{r7, pc}

0800afcc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	1dbb      	adds	r3, r7, #6
 800afd8:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afda:	1dbb      	adds	r3, r7, #6
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	2100      	movs	r1, #0
 800afe4:	f000 fce7 	bl	800b9b6 <USBD_LL_Transmit>

  return USBD_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	0018      	movs	r0, r3
 800afec:	46bd      	mov	sp, r7
 800afee:	b004      	add	sp, #16
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	1dbb      	adds	r3, r7, #6
 800affe:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	23a5      	movs	r3, #165	; 0xa5
 800b004:	009b      	lsls	r3, r3, #2
 800b006:	2103      	movs	r1, #3
 800b008:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800b00a:	1dbb      	adds	r3, r7, #6
 800b00c:	8819      	ldrh	r1, [r3, #0]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	23ae      	movs	r3, #174	; 0xae
 800b012:	005b      	lsls	r3, r3, #1
 800b014:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800b016:	1dbb      	adds	r3, r7, #6
 800b018:	8819      	ldrh	r1, [r3, #0]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	23b0      	movs	r3, #176	; 0xb0
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b022:	1dbb      	adds	r3, r7, #6
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	2100      	movs	r1, #0
 800b02c:	f000 fcfa 	bl	800ba24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	0018      	movs	r0, r3
 800b034:	46bd      	mov	sp, r7
 800b036:	b004      	add	sp, #16
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b084      	sub	sp, #16
 800b03e:	af00      	add	r7, sp, #0
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	1dbb      	adds	r3, r7, #6
 800b046:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b048:	1dbb      	adds	r3, r7, #6
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	2100      	movs	r1, #0
 800b052:	f000 fce7 	bl	800ba24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	0018      	movs	r0, r3
 800b05a:	46bd      	mov	sp, r7
 800b05c:	b004      	add	sp, #16
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	23a5      	movs	r3, #165	; 0xa5
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	2104      	movs	r1, #4
 800b070:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	2300      	movs	r3, #0
 800b076:	2200      	movs	r2, #0
 800b078:	2100      	movs	r1, #0
 800b07a:	f000 fc9c 	bl	800b9b6 <USBD_LL_Transmit>

  return USBD_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	0018      	movs	r0, r3
 800b082:	46bd      	mov	sp, r7
 800b084:	b002      	add	sp, #8
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	23a5      	movs	r3, #165	; 0xa5
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	2105      	movs	r1, #5
 800b098:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	2300      	movs	r3, #0
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	f000 fcbf 	bl	800ba24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	0018      	movs	r0, r3
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	b002      	add	sp, #8
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0b4:	4914      	ldr	r1, [pc, #80]	; (800b108 <MX_USB_DEVICE_Init+0x58>)
 800b0b6:	4b15      	ldr	r3, [pc, #84]	; (800b10c <MX_USB_DEVICE_Init+0x5c>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	0018      	movs	r0, r3
 800b0bc:	f7fe fde9 	bl	8009c92 <USBD_Init>
 800b0c0:	1e03      	subs	r3, r0, #0
 800b0c2:	d001      	beq.n	800b0c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b0c4:	f7f7 fe2e 	bl	8002d24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800b0c8:	4a11      	ldr	r2, [pc, #68]	; (800b110 <MX_USB_DEVICE_Init+0x60>)
 800b0ca:	4b10      	ldr	r3, [pc, #64]	; (800b10c <MX_USB_DEVICE_Init+0x5c>)
 800b0cc:	0011      	movs	r1, r2
 800b0ce:	0018      	movs	r0, r3
 800b0d0:	f7fe fe10 	bl	8009cf4 <USBD_RegisterClass>
 800b0d4:	1e03      	subs	r3, r0, #0
 800b0d6:	d001      	beq.n	800b0dc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800b0d8:	f7f7 fe24 	bl	8002d24 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800b0dc:	4a0d      	ldr	r2, [pc, #52]	; (800b114 <MX_USB_DEVICE_Init+0x64>)
 800b0de:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <MX_USB_DEVICE_Init+0x5c>)
 800b0e0:	0011      	movs	r1, r2
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	f7fe fdba 	bl	8009c5c <USBD_CUSTOM_HID_RegisterInterface>
 800b0e8:	1e03      	subs	r3, r0, #0
 800b0ea:	d001      	beq.n	800b0f0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800b0ec:	f7f7 fe1a 	bl	8002d24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b0f0:	4b06      	ldr	r3, [pc, #24]	; (800b10c <MX_USB_DEVICE_Init+0x5c>)
 800b0f2:	0018      	movs	r0, r3
 800b0f4:	f7fe fe1e 	bl	8009d34 <USBD_Start>
 800b0f8:	1e03      	subs	r3, r0, #0
 800b0fa:	d001      	beq.n	800b100 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800b0fc:	f7f7 fe12 	bl	8002d24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b100:	46c0      	nop			; (mov r8, r8)
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	46c0      	nop			; (mov r8, r8)
 800b108:	20000120 	.word	0x20000120
 800b10c:	20000314 	.word	0x20000314
 800b110:	20000018 	.word	0x20000018
 800b114:	20000110 	.word	0x20000110

0800b118 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b11c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b11e:	0018      	movs	r0, r3
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800b128:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b12a:	0018      	movs	r0, r3
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *report, uint16_t len)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	000a      	movs	r2, r1
 800b13a:	1cbb      	adds	r3, r7, #2
 800b13c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 6 */

  // At this point, USB_Receive_Buffer contains the received data.
  // You can process the data as needed.
  USB_Recieve_Task(report);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	0018      	movs	r0, r3
 800b142:	f000 f805 	bl	800b150 <USB_Recieve_Task>

  return (USBD_OK);
 800b146:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b148:	0018      	movs	r0, r3
 800b14a:	46bd      	mov	sp, r7
 800b14c:	b002      	add	sp, #8
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USB_Recieve_Task>:

/* USER CODE BEGIN 7 */

void USB_Recieve_Task(uint8_t *report) {
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  //Check if the first byte of the report buffer equals 1
  if (report[0] == REPORT_IDLE_LIGHT) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d116      	bne.n	800b18e <USB_Recieve_Task+0x3e>
    uint32_t theSetting = (report[2] << 16) | (report[3] << 8) | report[4];
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3302      	adds	r3, #2
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	041a      	lsls	r2, r3, #16
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	3303      	adds	r3, #3
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	021b      	lsls	r3, r3, #8
 800b170:	4313      	orrs	r3, r2
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	3204      	adds	r2, #4
 800b176:	7812      	ldrb	r2, [r2, #0]
 800b178:	4313      	orrs	r3, r2
 800b17a:	60bb      	str	r3, [r7, #8]
    UpdateLightingConfiguration(&idleLightingConfig, report[1], theSetting);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3301      	adds	r3, #1
 800b180:	7819      	ldrb	r1, [r3, #0]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	4b32      	ldr	r3, [pc, #200]	; (800b250 <USB_Recieve_Task+0x100>)
 800b186:	0018      	movs	r0, r3
 800b188:	f7f6 f900 	bl	800138c <UpdateLightingConfiguration>
    UpdateButtonConfiguration(&buttonConfig, report[1], theSetting);
  } else if (report[0] == BULK_SETTINGS_LOAD) {
    updateBulkLightSettings(report, sizeof report);
    settingsLoaded = true;
  }
}
 800b18c:	e05c      	b.n	800b248 <USB_Recieve_Task+0xf8>
  } else if (report[0] == REPORT_BUTTON_LIGHT) {
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	2b02      	cmp	r3, #2
 800b194:	d116      	bne.n	800b1c4 <USB_Recieve_Task+0x74>
    uint32_t theSetting = (report[2] << 16) | (report[3] << 8) | report[4];
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3302      	adds	r3, #2
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	041a      	lsls	r2, r3, #16
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	3303      	adds	r3, #3
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	3204      	adds	r2, #4
 800b1ac:	7812      	ldrb	r2, [r2, #0]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]
    UpdateLightingConfiguration(&buttonPressLightingConfig, report[1], theSetting);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	7819      	ldrb	r1, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	4b26      	ldr	r3, [pc, #152]	; (800b254 <USB_Recieve_Task+0x104>)
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f7f6 f8e5 	bl	800138c <UpdateLightingConfiguration>
}
 800b1c2:	e041      	b.n	800b248 <USB_Recieve_Task+0xf8>
  } else if (report[0] == REPORT_LID_LIFT_LIGHT) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	2b03      	cmp	r3, #3
 800b1ca:	d116      	bne.n	800b1fa <USB_Recieve_Task+0xaa>
    uint32_t theSetting = (report[2] << 16) | (report[3] << 8) | report[4];
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3302      	adds	r3, #2
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	041a      	lsls	r2, r3, #16
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3303      	adds	r3, #3
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	3204      	adds	r2, #4
 800b1e2:	7812      	ldrb	r2, [r2, #0]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	613b      	str	r3, [r7, #16]
    UpdateLightingConfiguration(&lidLiftLightingConfig, report[1], theSetting);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	7819      	ldrb	r1, [r3, #0]
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	4b19      	ldr	r3, [pc, #100]	; (800b258 <USB_Recieve_Task+0x108>)
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	f7f6 f8ca 	bl	800138c <UpdateLightingConfiguration>
}
 800b1f8:	e026      	b.n	800b248 <USB_Recieve_Task+0xf8>
  } else if (report[0] == REPORT_BUTTON_DURATION) {
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	2b04      	cmp	r3, #4
 800b200:	d116      	bne.n	800b230 <USB_Recieve_Task+0xe0>
    uint32_t theSetting = (report[2] << 16) | (report[3] << 8) | report[4];
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3302      	adds	r3, #2
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	041a      	lsls	r2, r3, #16
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3303      	adds	r3, #3
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	021b      	lsls	r3, r3, #8
 800b212:	4313      	orrs	r3, r2
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	3204      	adds	r2, #4
 800b218:	7812      	ldrb	r2, [r2, #0]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	617b      	str	r3, [r7, #20]
    UpdateButtonConfiguration(&buttonConfig, report[1], theSetting);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3301      	adds	r3, #1
 800b222:	7819      	ldrb	r1, [r3, #0]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	4b0d      	ldr	r3, [pc, #52]	; (800b25c <USB_Recieve_Task+0x10c>)
 800b228:	0018      	movs	r0, r3
 800b22a:	f7f6 f913 	bl	8001454 <UpdateButtonConfiguration>
}
 800b22e:	e00b      	b.n	800b248 <USB_Recieve_Task+0xf8>
  } else if (report[0] == BULK_SETTINGS_LOAD) {
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	2b05      	cmp	r3, #5
 800b236:	d107      	bne.n	800b248 <USB_Recieve_Task+0xf8>
    updateBulkLightSettings(report, sizeof report);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2104      	movs	r1, #4
 800b23c:	0018      	movs	r0, r3
 800b23e:	f7f6 f811 	bl	8001264 <updateBulkLightSettings>
    settingsLoaded = true;
 800b242:	4b07      	ldr	r3, [pc, #28]	; (800b260 <USB_Recieve_Task+0x110>)
 800b244:	2201      	movs	r2, #1
 800b246:	701a      	strb	r2, [r3, #0]
}
 800b248:	46c0      	nop			; (mov r8, r8)
 800b24a:	46bd      	mov	sp, r7
 800b24c:	b006      	add	sp, #24
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	200001dc 	.word	0x200001dc
 800b254:	200001f0 	.word	0x200001f0
 800b258:	20000204 	.word	0x20000204
 800b25c:	20000218 	.word	0x20000218
 800b260:	20000308 	.word	0x20000308

0800b264 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	0002      	movs	r2, r0
 800b26c:	6039      	str	r1, [r7, #0]
 800b26e:	1dfb      	adds	r3, r7, #7
 800b270:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2212      	movs	r2, #18
 800b276:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b278:	4b02      	ldr	r3, [pc, #8]	; (800b284 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b27a:	0018      	movs	r0, r3
 800b27c:	46bd      	mov	sp, r7
 800b27e:	b002      	add	sp, #8
 800b280:	bd80      	pop	{r7, pc}
 800b282:	46c0      	nop			; (mov r8, r8)
 800b284:	2000013c 	.word	0x2000013c

0800b288 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	0002      	movs	r2, r0
 800b290:	6039      	str	r1, [r7, #0]
 800b292:	1dfb      	adds	r3, r7, #7
 800b294:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2204      	movs	r2, #4
 800b29a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b29c:	4b02      	ldr	r3, [pc, #8]	; (800b2a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b29e:	0018      	movs	r0, r3
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	b002      	add	sp, #8
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	46c0      	nop			; (mov r8, r8)
 800b2a8:	20000150 	.word	0x20000150

0800b2ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	0002      	movs	r2, r0
 800b2b4:	6039      	str	r1, [r7, #0]
 800b2b6:	1dfb      	adds	r3, r7, #7
 800b2b8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b2ba:	1dfb      	adds	r3, r7, #7
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	4908      	ldr	r1, [pc, #32]	; (800b2e8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b2c6:	4b09      	ldr	r3, [pc, #36]	; (800b2ec <USBD_FS_ProductStrDescriptor+0x40>)
 800b2c8:	0018      	movs	r0, r3
 800b2ca:	f7ff fdf4 	bl	800aeb6 <USBD_GetString>
 800b2ce:	e005      	b.n	800b2dc <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	4905      	ldr	r1, [pc, #20]	; (800b2e8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b2d4:	4b05      	ldr	r3, [pc, #20]	; (800b2ec <USBD_FS_ProductStrDescriptor+0x40>)
 800b2d6:	0018      	movs	r0, r3
 800b2d8:	f7ff fded 	bl	800aeb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2dc:	4b02      	ldr	r3, [pc, #8]	; (800b2e8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b2de:	0018      	movs	r0, r3
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	b002      	add	sp, #8
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	46c0      	nop			; (mov r8, r8)
 800b2e8:	200005d8 	.word	0x200005d8
 800b2ec:	0800bd18 	.word	0x0800bd18

0800b2f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	0002      	movs	r2, r0
 800b2f8:	6039      	str	r1, [r7, #0]
 800b2fa:	1dfb      	adds	r3, r7, #7
 800b2fc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	4904      	ldr	r1, [pc, #16]	; (800b314 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b302:	4b05      	ldr	r3, [pc, #20]	; (800b318 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b304:	0018      	movs	r0, r3
 800b306:	f7ff fdd6 	bl	800aeb6 <USBD_GetString>
  return USBD_StrDesc;
 800b30a:	4b02      	ldr	r3, [pc, #8]	; (800b314 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b30c:	0018      	movs	r0, r3
 800b30e:	46bd      	mov	sp, r7
 800b310:	b002      	add	sp, #8
 800b312:	bd80      	pop	{r7, pc}
 800b314:	200005d8 	.word	0x200005d8
 800b318:	0800bd34 	.word	0x0800bd34

0800b31c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	0002      	movs	r2, r0
 800b324:	6039      	str	r1, [r7, #0]
 800b326:	1dfb      	adds	r3, r7, #7
 800b328:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	221a      	movs	r2, #26
 800b32e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b330:	f000 f84c 	bl	800b3cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b334:	4b02      	ldr	r3, [pc, #8]	; (800b340 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b336:	0018      	movs	r0, r3
 800b338:	46bd      	mov	sp, r7
 800b33a:	b002      	add	sp, #8
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	20000154 	.word	0x20000154

0800b344 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	0002      	movs	r2, r0
 800b34c:	6039      	str	r1, [r7, #0]
 800b34e:	1dfb      	adds	r3, r7, #7
 800b350:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b352:	1dfb      	adds	r3, r7, #7
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d106      	bne.n	800b368 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	4908      	ldr	r1, [pc, #32]	; (800b380 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b35e:	4b09      	ldr	r3, [pc, #36]	; (800b384 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b360:	0018      	movs	r0, r3
 800b362:	f7ff fda8 	bl	800aeb6 <USBD_GetString>
 800b366:	e005      	b.n	800b374 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	4905      	ldr	r1, [pc, #20]	; (800b380 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b36e:	0018      	movs	r0, r3
 800b370:	f7ff fda1 	bl	800aeb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b374:	4b02      	ldr	r3, [pc, #8]	; (800b380 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b376:	0018      	movs	r0, r3
 800b378:	46bd      	mov	sp, r7
 800b37a:	b002      	add	sp, #8
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	46c0      	nop			; (mov r8, r8)
 800b380:	200005d8 	.word	0x200005d8
 800b384:	0800bd3c 	.word	0x0800bd3c

0800b388 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	0002      	movs	r2, r0
 800b390:	6039      	str	r1, [r7, #0]
 800b392:	1dfb      	adds	r3, r7, #7
 800b394:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b396:	1dfb      	adds	r3, r7, #7
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d106      	bne.n	800b3ac <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	4908      	ldr	r1, [pc, #32]	; (800b3c4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b3a2:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b3a4:	0018      	movs	r0, r3
 800b3a6:	f7ff fd86 	bl	800aeb6 <USBD_GetString>
 800b3aa:	e005      	b.n	800b3b8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	4905      	ldr	r1, [pc, #20]	; (800b3c4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b3b0:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b3b2:	0018      	movs	r0, r3
 800b3b4:	f7ff fd7f 	bl	800aeb6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3b8:	4b02      	ldr	r3, [pc, #8]	; (800b3c4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b3ba:	0018      	movs	r0, r3
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	b002      	add	sp, #8
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	46c0      	nop			; (mov r8, r8)
 800b3c4:	200005d8 	.word	0x200005d8
 800b3c8:	0800bd50 	.word	0x0800bd50

0800b3cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3d2:	4b10      	ldr	r3, [pc, #64]	; (800b414 <Get_SerialNum+0x48>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3d8:	4b0f      	ldr	r3, [pc, #60]	; (800b418 <Get_SerialNum+0x4c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3de:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <Get_SerialNum+0x50>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	18d3      	adds	r3, r2, r3
 800b3ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00b      	beq.n	800b40a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3f2:	490b      	ldr	r1, [pc, #44]	; (800b420 <Get_SerialNum+0x54>)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2208      	movs	r2, #8
 800b3f8:	0018      	movs	r0, r3
 800b3fa:	f000 f815 	bl	800b428 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3fe:	4909      	ldr	r1, [pc, #36]	; (800b424 <Get_SerialNum+0x58>)
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2204      	movs	r2, #4
 800b404:	0018      	movs	r0, r3
 800b406:	f000 f80f 	bl	800b428 <IntToUnicode>
  }
}
 800b40a:	46c0      	nop			; (mov r8, r8)
 800b40c:	46bd      	mov	sp, r7
 800b40e:	b004      	add	sp, #16
 800b410:	bd80      	pop	{r7, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	1ffff7ac 	.word	0x1ffff7ac
 800b418:	1ffff7b0 	.word	0x1ffff7b0
 800b41c:	1ffff7b4 	.word	0x1ffff7b4
 800b420:	20000156 	.word	0x20000156
 800b424:	20000166 	.word	0x20000166

0800b428 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	1dfb      	adds	r3, r7, #7
 800b434:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b436:	2117      	movs	r1, #23
 800b438:	187b      	adds	r3, r7, r1
 800b43a:	2200      	movs	r2, #0
 800b43c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b43e:	187b      	adds	r3, r7, r1
 800b440:	2200      	movs	r2, #0
 800b442:	701a      	strb	r2, [r3, #0]
 800b444:	e02f      	b.n	800b4a6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	0f1b      	lsrs	r3, r3, #28
 800b44a:	2b09      	cmp	r3, #9
 800b44c:	d80d      	bhi.n	800b46a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	0f1b      	lsrs	r3, r3, #28
 800b452:	b2da      	uxtb	r2, r3
 800b454:	2317      	movs	r3, #23
 800b456:	18fb      	adds	r3, r7, r3
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	005b      	lsls	r3, r3, #1
 800b45c:	0019      	movs	r1, r3
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	185b      	adds	r3, r3, r1
 800b462:	3230      	adds	r2, #48	; 0x30
 800b464:	b2d2      	uxtb	r2, r2
 800b466:	701a      	strb	r2, [r3, #0]
 800b468:	e00c      	b.n	800b484 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	0f1b      	lsrs	r3, r3, #28
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	2317      	movs	r3, #23
 800b472:	18fb      	adds	r3, r7, r3
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	005b      	lsls	r3, r3, #1
 800b478:	0019      	movs	r1, r3
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	185b      	adds	r3, r3, r1
 800b47e:	3237      	adds	r2, #55	; 0x37
 800b480:	b2d2      	uxtb	r2, r2
 800b482:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	011b      	lsls	r3, r3, #4
 800b488:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b48a:	2117      	movs	r1, #23
 800b48c:	187b      	adds	r3, r7, r1
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	005b      	lsls	r3, r3, #1
 800b492:	3301      	adds	r3, #1
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	18d3      	adds	r3, r2, r3
 800b498:	2200      	movs	r2, #0
 800b49a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b49c:	187b      	adds	r3, r7, r1
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	187b      	adds	r3, r7, r1
 800b4a2:	3201      	adds	r2, #1
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	2317      	movs	r3, #23
 800b4a8:	18fa      	adds	r2, r7, r3
 800b4aa:	1dfb      	adds	r3, r7, #7
 800b4ac:	7812      	ldrb	r2, [r2, #0]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d3c8      	bcc.n	800b446 <IntToUnicode+0x1e>
  }
}
 800b4b4:	46c0      	nop			; (mov r8, r8)
 800b4b6:	46c0      	nop			; (mov r8, r8)
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	b006      	add	sp, #24
 800b4bc:	bd80      	pop	{r7, pc}
	...

0800b4c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a0e      	ldr	r2, [pc, #56]	; (800b508 <HAL_PCD_MspInit+0x48>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d115      	bne.n	800b4fe <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b4d2:	4b0e      	ldr	r3, [pc, #56]	; (800b50c <HAL_PCD_MspInit+0x4c>)
 800b4d4:	69da      	ldr	r2, [r3, #28]
 800b4d6:	4b0d      	ldr	r3, [pc, #52]	; (800b50c <HAL_PCD_MspInit+0x4c>)
 800b4d8:	2180      	movs	r1, #128	; 0x80
 800b4da:	0409      	lsls	r1, r1, #16
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	61da      	str	r2, [r3, #28]
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <HAL_PCD_MspInit+0x4c>)
 800b4e2:	69da      	ldr	r2, [r3, #28]
 800b4e4:	2380      	movs	r3, #128	; 0x80
 800b4e6:	041b      	lsls	r3, r3, #16
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	60fb      	str	r3, [r7, #12]
 800b4ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	201f      	movs	r0, #31
 800b4f4:	f7f7 fe78 	bl	80031e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b4f8:	201f      	movs	r0, #31
 800b4fa:	f7f7 fe8a 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b4fe:	46c0      	nop			; (mov r8, r8)
 800b500:	46bd      	mov	sp, r7
 800b502:	b004      	add	sp, #16
 800b504:	bd80      	pop	{r7, pc}
 800b506:	46c0      	nop			; (mov r8, r8)
 800b508:	40005c00 	.word	0x40005c00
 800b50c:	40021000 	.word	0x40021000

0800b510 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	23bc      	movs	r3, #188	; 0xbc
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	58d2      	ldr	r2, [r2, r3]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	21ac      	movs	r1, #172	; 0xac
 800b524:	0089      	lsls	r1, r1, #2
 800b526:	468c      	mov	ip, r1
 800b528:	4463      	add	r3, ip
 800b52a:	0019      	movs	r1, r3
 800b52c:	0010      	movs	r0, r2
 800b52e:	f7fe fc55 	bl	8009ddc <USBD_LL_SetupStage>
}
 800b532:	46c0      	nop			; (mov r8, r8)
 800b534:	46bd      	mov	sp, r7
 800b536:	b002      	add	sp, #8
 800b538:	bd80      	pop	{r7, pc}

0800b53a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b53a:	b590      	push	{r4, r7, lr}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	000a      	movs	r2, r1
 800b544:	1cfb      	adds	r3, r7, #3
 800b546:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	23bc      	movs	r3, #188	; 0xbc
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	58d4      	ldr	r4, [r2, r3]
 800b550:	1cfb      	adds	r3, r7, #3
 800b552:	781a      	ldrb	r2, [r3, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	23be      	movs	r3, #190	; 0xbe
 800b558:	0059      	lsls	r1, r3, #1
 800b55a:	0013      	movs	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	189b      	adds	r3, r3, r2
 800b560:	00db      	lsls	r3, r3, #3
 800b562:	18c3      	adds	r3, r0, r3
 800b564:	185b      	adds	r3, r3, r1
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	1cfb      	adds	r3, r7, #3
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	0019      	movs	r1, r3
 800b56e:	0020      	movs	r0, r4
 800b570:	f7fe fc92 	bl	8009e98 <USBD_LL_DataOutStage>
}
 800b574:	46c0      	nop			; (mov r8, r8)
 800b576:	46bd      	mov	sp, r7
 800b578:	b003      	add	sp, #12
 800b57a:	bd90      	pop	{r4, r7, pc}

0800b57c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	000a      	movs	r2, r1
 800b586:	1cfb      	adds	r3, r7, #3
 800b588:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	23bc      	movs	r3, #188	; 0xbc
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	58d0      	ldr	r0, [r2, r3]
 800b592:	1cfb      	adds	r3, r7, #3
 800b594:	781a      	ldrb	r2, [r3, #0]
 800b596:	6879      	ldr	r1, [r7, #4]
 800b598:	0013      	movs	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	189b      	adds	r3, r3, r2
 800b59e:	00db      	lsls	r3, r3, #3
 800b5a0:	18cb      	adds	r3, r1, r3
 800b5a2:	333c      	adds	r3, #60	; 0x3c
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	1cfb      	adds	r3, r7, #3
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	0019      	movs	r1, r3
 800b5ac:	f7fe fcf6 	bl	8009f9c <USBD_LL_DataInStage>
}
 800b5b0:	46c0      	nop			; (mov r8, r8)
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	b002      	add	sp, #8
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	23bc      	movs	r3, #188	; 0xbc
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	58d3      	ldr	r3, [r2, r3]
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	f7fe fe2d 	bl	800a228 <USBD_LL_SOF>
}
 800b5ce:	46c0      	nop			; (mov r8, r8)
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	b002      	add	sp, #8
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b5de:	230f      	movs	r3, #15
 800b5e0:	18fb      	adds	r3, r7, r3
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d001      	beq.n	800b5f2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b5ee:	f7f7 fb99 	bl	8002d24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	23bc      	movs	r3, #188	; 0xbc
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	58d2      	ldr	r2, [r2, r3]
 800b5fa:	230f      	movs	r3, #15
 800b5fc:	18fb      	adds	r3, r7, r3
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	0019      	movs	r1, r3
 800b602:	0010      	movs	r0, r2
 800b604:	f7fe fdcf 	bl	800a1a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	23bc      	movs	r3, #188	; 0xbc
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	58d3      	ldr	r3, [r2, r3]
 800b610:	0018      	movs	r0, r3
 800b612:	f7fe fd80 	bl	800a116 <USBD_LL_Reset>
}
 800b616:	46c0      	nop			; (mov r8, r8)
 800b618:	46bd      	mov	sp, r7
 800b61a:	b004      	add	sp, #16
 800b61c:	bd80      	pop	{r7, pc}
	...

0800b620 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	23bc      	movs	r3, #188	; 0xbc
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	58d3      	ldr	r3, [r2, r3]
 800b630:	0018      	movs	r0, r3
 800b632:	f7fe fdc9 	bl	800a1c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d005      	beq.n	800b64a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b63e:	4b05      	ldr	r3, [pc, #20]	; (800b654 <HAL_PCD_SuspendCallback+0x34>)
 800b640:	691a      	ldr	r2, [r3, #16]
 800b642:	4b04      	ldr	r3, [pc, #16]	; (800b654 <HAL_PCD_SuspendCallback+0x34>)
 800b644:	2106      	movs	r1, #6
 800b646:	430a      	orrs	r2, r1
 800b648:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b64a:	46c0      	nop			; (mov r8, r8)
 800b64c:	46bd      	mov	sp, r7
 800b64e:	b002      	add	sp, #8
 800b650:	bd80      	pop	{r7, pc}
 800b652:	46c0      	nop			; (mov r8, r8)
 800b654:	e000ed00 	.word	0xe000ed00

0800b658 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b082      	sub	sp, #8
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	699b      	ldr	r3, [r3, #24]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d007      	beq.n	800b678 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b668:	4b09      	ldr	r3, [pc, #36]	; (800b690 <HAL_PCD_ResumeCallback+0x38>)
 800b66a:	691a      	ldr	r2, [r3, #16]
 800b66c:	4b08      	ldr	r3, [pc, #32]	; (800b690 <HAL_PCD_ResumeCallback+0x38>)
 800b66e:	2106      	movs	r1, #6
 800b670:	438a      	bics	r2, r1
 800b672:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b674:	f000 fa22 	bl	800babc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	23bc      	movs	r3, #188	; 0xbc
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	58d3      	ldr	r3, [r2, r3]
 800b680:	0018      	movs	r0, r3
 800b682:	f7fe fdb9 	bl	800a1f8 <USBD_LL_Resume>
}
 800b686:	46c0      	nop			; (mov r8, r8)
 800b688:	46bd      	mov	sp, r7
 800b68a:	b002      	add	sp, #8
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	46c0      	nop			; (mov r8, r8)
 800b690:	e000ed00 	.word	0xe000ed00

0800b694 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b69c:	4a27      	ldr	r2, [pc, #156]	; (800b73c <USBD_LL_Init+0xa8>)
 800b69e:	23bc      	movs	r3, #188	; 0xbc
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	6879      	ldr	r1, [r7, #4]
 800b6a4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	23b0      	movs	r3, #176	; 0xb0
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4923      	ldr	r1, [pc, #140]	; (800b73c <USBD_LL_Init+0xa8>)
 800b6ae:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b6b0:	4b22      	ldr	r3, [pc, #136]	; (800b73c <USBD_LL_Init+0xa8>)
 800b6b2:	4a23      	ldr	r2, [pc, #140]	; (800b740 <USBD_LL_Init+0xac>)
 800b6b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b6b6:	4b21      	ldr	r3, [pc, #132]	; (800b73c <USBD_LL_Init+0xa8>)
 800b6b8:	2208      	movs	r2, #8
 800b6ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b6bc:	4b1f      	ldr	r3, [pc, #124]	; (800b73c <USBD_LL_Init+0xa8>)
 800b6be:	2202      	movs	r2, #2
 800b6c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b6c2:	4b1e      	ldr	r3, [pc, #120]	; (800b73c <USBD_LL_Init+0xa8>)
 800b6c4:	2202      	movs	r2, #2
 800b6c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b6c8:	4b1c      	ldr	r3, [pc, #112]	; (800b73c <USBD_LL_Init+0xa8>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b6ce:	4b1b      	ldr	r3, [pc, #108]	; (800b73c <USBD_LL_Init+0xa8>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b6d4:	4b19      	ldr	r3, [pc, #100]	; (800b73c <USBD_LL_Init+0xa8>)
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b6da:	4b18      	ldr	r3, [pc, #96]	; (800b73c <USBD_LL_Init+0xa8>)
 800b6dc:	0018      	movs	r0, r3
 800b6de:	f7f9 f9ff 	bl	8004ae0 <HAL_PCD_Init>
 800b6e2:	1e03      	subs	r3, r0, #0
 800b6e4:	d001      	beq.n	800b6ea <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b6e6:	f7f7 fb1d 	bl	8002d24 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	23b0      	movs	r3, #176	; 0xb0
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	58d0      	ldr	r0, [r2, r3]
 800b6f2:	2318      	movs	r3, #24
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2100      	movs	r1, #0
 800b6f8:	f7fa ffa6 	bl	8006648 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	23b0      	movs	r3, #176	; 0xb0
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	58d0      	ldr	r0, [r2, r3]
 800b704:	2358      	movs	r3, #88	; 0x58
 800b706:	2200      	movs	r2, #0
 800b708:	2180      	movs	r1, #128	; 0x80
 800b70a:	f7fa ff9d 	bl	8006648 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	23b0      	movs	r3, #176	; 0xb0
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	58d0      	ldr	r0, [r2, r3]
 800b716:	2398      	movs	r3, #152	; 0x98
 800b718:	2200      	movs	r2, #0
 800b71a:	2181      	movs	r1, #129	; 0x81
 800b71c:	f7fa ff94 	bl	8006648 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	23b0      	movs	r3, #176	; 0xb0
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	58d0      	ldr	r0, [r2, r3]
 800b728:	23d8      	movs	r3, #216	; 0xd8
 800b72a:	2200      	movs	r2, #0
 800b72c:	2101      	movs	r1, #1
 800b72e:	f7fa ff8b 	bl	8006648 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	0018      	movs	r0, r3
 800b736:	46bd      	mov	sp, r7
 800b738:	b002      	add	sp, #8
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	200007d8 	.word	0x200007d8
 800b740:	40005c00 	.word	0x40005c00

0800b744 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b744:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b74c:	210f      	movs	r1, #15
 800b74e:	187b      	adds	r3, r7, r1
 800b750:	2200      	movs	r2, #0
 800b752:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b754:	260e      	movs	r6, #14
 800b756:	19bb      	adds	r3, r7, r6
 800b758:	2200      	movs	r2, #0
 800b75a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	23b0      	movs	r3, #176	; 0xb0
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	58d3      	ldr	r3, [r2, r3]
 800b764:	000d      	movs	r5, r1
 800b766:	187c      	adds	r4, r7, r1
 800b768:	0018      	movs	r0, r3
 800b76a:	f7f9 fab9 	bl	8004ce0 <HAL_PCD_Start>
 800b76e:	0003      	movs	r3, r0
 800b770:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b772:	19bc      	adds	r4, r7, r6
 800b774:	197b      	adds	r3, r7, r5
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	0018      	movs	r0, r3
 800b77a:	f000 f9a6 	bl	800baca <USBD_Get_USB_Status>
 800b77e:	0003      	movs	r3, r0
 800b780:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b782:	19bb      	adds	r3, r7, r6
 800b784:	781b      	ldrb	r3, [r3, #0]
}
 800b786:	0018      	movs	r0, r3
 800b788:	46bd      	mov	sp, r7
 800b78a:	b005      	add	sp, #20
 800b78c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b78e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b78e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b790:	b085      	sub	sp, #20
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	000c      	movs	r4, r1
 800b798:	0010      	movs	r0, r2
 800b79a:	0019      	movs	r1, r3
 800b79c:	1cfb      	adds	r3, r7, #3
 800b79e:	1c22      	adds	r2, r4, #0
 800b7a0:	701a      	strb	r2, [r3, #0]
 800b7a2:	1cbb      	adds	r3, r7, #2
 800b7a4:	1c02      	adds	r2, r0, #0
 800b7a6:	701a      	strb	r2, [r3, #0]
 800b7a8:	003b      	movs	r3, r7
 800b7aa:	1c0a      	adds	r2, r1, #0
 800b7ac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ae:	260f      	movs	r6, #15
 800b7b0:	19bb      	adds	r3, r7, r6
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b6:	250e      	movs	r5, #14
 800b7b8:	197b      	adds	r3, r7, r5
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	23b0      	movs	r3, #176	; 0xb0
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	58d0      	ldr	r0, [r2, r3]
 800b7c6:	19bc      	adds	r4, r7, r6
 800b7c8:	1cbb      	adds	r3, r7, #2
 800b7ca:	781d      	ldrb	r5, [r3, #0]
 800b7cc:	003b      	movs	r3, r7
 800b7ce:	881a      	ldrh	r2, [r3, #0]
 800b7d0:	1cfb      	adds	r3, r7, #3
 800b7d2:	7819      	ldrb	r1, [r3, #0]
 800b7d4:	002b      	movs	r3, r5
 800b7d6:	f7f9 fc18 	bl	800500a <HAL_PCD_EP_Open>
 800b7da:	0003      	movs	r3, r0
 800b7dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7de:	250e      	movs	r5, #14
 800b7e0:	197c      	adds	r4, r7, r5
 800b7e2:	19bb      	adds	r3, r7, r6
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	f000 f96f 	bl	800baca <USBD_Get_USB_Status>
 800b7ec:	0003      	movs	r3, r0
 800b7ee:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b7f0:	197b      	adds	r3, r7, r5
 800b7f2:	781b      	ldrb	r3, [r3, #0]
}
 800b7f4:	0018      	movs	r0, r3
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	b005      	add	sp, #20
 800b7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7fc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	000a      	movs	r2, r1
 800b806:	1cfb      	adds	r3, r7, #3
 800b808:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b80a:	210f      	movs	r1, #15
 800b80c:	187b      	adds	r3, r7, r1
 800b80e:	2200      	movs	r2, #0
 800b810:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b812:	260e      	movs	r6, #14
 800b814:	19bb      	adds	r3, r7, r6
 800b816:	2200      	movs	r2, #0
 800b818:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	23b0      	movs	r3, #176	; 0xb0
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	58d2      	ldr	r2, [r2, r3]
 800b822:	000d      	movs	r5, r1
 800b824:	187c      	adds	r4, r7, r1
 800b826:	1cfb      	adds	r3, r7, #3
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	0019      	movs	r1, r3
 800b82c:	0010      	movs	r0, r2
 800b82e:	f7f9 fc5b 	bl	80050e8 <HAL_PCD_EP_Close>
 800b832:	0003      	movs	r3, r0
 800b834:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b836:	19bc      	adds	r4, r7, r6
 800b838:	197b      	adds	r3, r7, r5
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	0018      	movs	r0, r3
 800b83e:	f000 f944 	bl	800baca <USBD_Get_USB_Status>
 800b842:	0003      	movs	r3, r0
 800b844:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b846:	19bb      	adds	r3, r7, r6
 800b848:	781b      	ldrb	r3, [r3, #0]
}
 800b84a:	0018      	movs	r0, r3
 800b84c:	46bd      	mov	sp, r7
 800b84e:	b005      	add	sp, #20
 800b850:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b852 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b852:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b854:	b085      	sub	sp, #20
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	000a      	movs	r2, r1
 800b85c:	1cfb      	adds	r3, r7, #3
 800b85e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b860:	210f      	movs	r1, #15
 800b862:	187b      	adds	r3, r7, r1
 800b864:	2200      	movs	r2, #0
 800b866:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b868:	260e      	movs	r6, #14
 800b86a:	19bb      	adds	r3, r7, r6
 800b86c:	2200      	movs	r2, #0
 800b86e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	23b0      	movs	r3, #176	; 0xb0
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	58d2      	ldr	r2, [r2, r3]
 800b878:	000d      	movs	r5, r1
 800b87a:	187c      	adds	r4, r7, r1
 800b87c:	1cfb      	adds	r3, r7, #3
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	0019      	movs	r1, r3
 800b882:	0010      	movs	r0, r2
 800b884:	f7f9 fcf4 	bl	8005270 <HAL_PCD_EP_SetStall>
 800b888:	0003      	movs	r3, r0
 800b88a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b88c:	19bc      	adds	r4, r7, r6
 800b88e:	197b      	adds	r3, r7, r5
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	0018      	movs	r0, r3
 800b894:	f000 f919 	bl	800baca <USBD_Get_USB_Status>
 800b898:	0003      	movs	r3, r0
 800b89a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b89c:	19bb      	adds	r3, r7, r6
 800b89e:	781b      	ldrb	r3, [r3, #0]
}
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	b005      	add	sp, #20
 800b8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	000a      	movs	r2, r1
 800b8b2:	1cfb      	adds	r3, r7, #3
 800b8b4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b6:	210f      	movs	r1, #15
 800b8b8:	187b      	adds	r3, r7, r1
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8be:	260e      	movs	r6, #14
 800b8c0:	19bb      	adds	r3, r7, r6
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	23b0      	movs	r3, #176	; 0xb0
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	58d2      	ldr	r2, [r2, r3]
 800b8ce:	000d      	movs	r5, r1
 800b8d0:	187c      	adds	r4, r7, r1
 800b8d2:	1cfb      	adds	r3, r7, #3
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	0019      	movs	r1, r3
 800b8d8:	0010      	movs	r0, r2
 800b8da:	f7f9 fd25 	bl	8005328 <HAL_PCD_EP_ClrStall>
 800b8de:	0003      	movs	r3, r0
 800b8e0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8e2:	19bc      	adds	r4, r7, r6
 800b8e4:	197b      	adds	r3, r7, r5
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	f000 f8ee 	bl	800baca <USBD_Get_USB_Status>
 800b8ee:	0003      	movs	r3, r0
 800b8f0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b8f2:	19bb      	adds	r3, r7, r6
 800b8f4:	781b      	ldrb	r3, [r3, #0]
}
 800b8f6:	0018      	movs	r0, r3
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	b005      	add	sp, #20
 800b8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8fe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	000a      	movs	r2, r1
 800b908:	1cfb      	adds	r3, r7, #3
 800b90a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	23b0      	movs	r3, #176	; 0xb0
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	58d3      	ldr	r3, [r2, r3]
 800b914:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b916:	1cfb      	adds	r3, r7, #3
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	b25b      	sxtb	r3, r3
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	da0d      	bge.n	800b93c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b920:	1cfb      	adds	r3, r7, #3
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	227f      	movs	r2, #127	; 0x7f
 800b926:	4013      	ands	r3, r2
 800b928:	68f9      	ldr	r1, [r7, #12]
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	0013      	movs	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	189b      	adds	r3, r3, r2
 800b932:	00db      	lsls	r3, r3, #3
 800b934:	18cb      	adds	r3, r1, r3
 800b936:	3302      	adds	r3, #2
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	e00d      	b.n	800b958 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b93c:	1cfb      	adds	r3, r7, #3
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	227f      	movs	r2, #127	; 0x7f
 800b942:	401a      	ands	r2, r3
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	23b5      	movs	r3, #181	; 0xb5
 800b948:	0059      	lsls	r1, r3, #1
 800b94a:	0013      	movs	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	189b      	adds	r3, r3, r2
 800b950:	00db      	lsls	r3, r3, #3
 800b952:	18c3      	adds	r3, r0, r3
 800b954:	185b      	adds	r3, r3, r1
 800b956:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b958:	0018      	movs	r0, r3
 800b95a:	46bd      	mov	sp, r7
 800b95c:	b004      	add	sp, #16
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	000a      	movs	r2, r1
 800b96a:	1cfb      	adds	r3, r7, #3
 800b96c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b96e:	210f      	movs	r1, #15
 800b970:	187b      	adds	r3, r7, r1
 800b972:	2200      	movs	r2, #0
 800b974:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b976:	260e      	movs	r6, #14
 800b978:	19bb      	adds	r3, r7, r6
 800b97a:	2200      	movs	r2, #0
 800b97c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	23b0      	movs	r3, #176	; 0xb0
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	58d2      	ldr	r2, [r2, r3]
 800b986:	000d      	movs	r5, r1
 800b988:	187c      	adds	r4, r7, r1
 800b98a:	1cfb      	adds	r3, r7, #3
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	0019      	movs	r1, r3
 800b990:	0010      	movs	r0, r2
 800b992:	f7f9 fb0f 	bl	8004fb4 <HAL_PCD_SetAddress>
 800b996:	0003      	movs	r3, r0
 800b998:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b99a:	19bc      	adds	r4, r7, r6
 800b99c:	197b      	adds	r3, r7, r5
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	0018      	movs	r0, r3
 800b9a2:	f000 f892 	bl	800baca <USBD_Get_USB_Status>
 800b9a6:	0003      	movs	r3, r0
 800b9a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b9aa:	19bb      	adds	r3, r7, r6
 800b9ac:	781b      	ldrb	r3, [r3, #0]
}
 800b9ae:	0018      	movs	r0, r3
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	b005      	add	sp, #20
 800b9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b9b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9b8:	b087      	sub	sp, #28
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	60f8      	str	r0, [r7, #12]
 800b9be:	0008      	movs	r0, r1
 800b9c0:	607a      	str	r2, [r7, #4]
 800b9c2:	0019      	movs	r1, r3
 800b9c4:	230b      	movs	r3, #11
 800b9c6:	18fb      	adds	r3, r7, r3
 800b9c8:	1c02      	adds	r2, r0, #0
 800b9ca:	701a      	strb	r2, [r3, #0]
 800b9cc:	2408      	movs	r4, #8
 800b9ce:	193b      	adds	r3, r7, r4
 800b9d0:	1c0a      	adds	r2, r1, #0
 800b9d2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d4:	2117      	movs	r1, #23
 800b9d6:	187b      	adds	r3, r7, r1
 800b9d8:	2200      	movs	r2, #0
 800b9da:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9dc:	2516      	movs	r5, #22
 800b9de:	197b      	adds	r3, r7, r5
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	23b0      	movs	r3, #176	; 0xb0
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	58d0      	ldr	r0, [r2, r3]
 800b9ec:	193b      	adds	r3, r7, r4
 800b9ee:	881d      	ldrh	r5, [r3, #0]
 800b9f0:	000e      	movs	r6, r1
 800b9f2:	187c      	adds	r4, r7, r1
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	230b      	movs	r3, #11
 800b9f8:	18fb      	adds	r3, r7, r3
 800b9fa:	7819      	ldrb	r1, [r3, #0]
 800b9fc:	002b      	movs	r3, r5
 800b9fe:	f7f9 fbfb 	bl	80051f8 <HAL_PCD_EP_Transmit>
 800ba02:	0003      	movs	r3, r0
 800ba04:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba06:	2516      	movs	r5, #22
 800ba08:	197c      	adds	r4, r7, r5
 800ba0a:	19bb      	adds	r3, r7, r6
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	0018      	movs	r0, r3
 800ba10:	f000 f85b 	bl	800baca <USBD_Get_USB_Status>
 800ba14:	0003      	movs	r3, r0
 800ba16:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ba18:	197b      	adds	r3, r7, r5
 800ba1a:	781b      	ldrb	r3, [r3, #0]
}
 800ba1c:	0018      	movs	r0, r3
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	b007      	add	sp, #28
 800ba22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ba24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba26:	b087      	sub	sp, #28
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	0008      	movs	r0, r1
 800ba2e:	607a      	str	r2, [r7, #4]
 800ba30:	0019      	movs	r1, r3
 800ba32:	230b      	movs	r3, #11
 800ba34:	18fb      	adds	r3, r7, r3
 800ba36:	1c02      	adds	r2, r0, #0
 800ba38:	701a      	strb	r2, [r3, #0]
 800ba3a:	2408      	movs	r4, #8
 800ba3c:	193b      	adds	r3, r7, r4
 800ba3e:	1c0a      	adds	r2, r1, #0
 800ba40:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba42:	2117      	movs	r1, #23
 800ba44:	187b      	adds	r3, r7, r1
 800ba46:	2200      	movs	r2, #0
 800ba48:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba4a:	2516      	movs	r5, #22
 800ba4c:	197b      	adds	r3, r7, r5
 800ba4e:	2200      	movs	r2, #0
 800ba50:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	23b0      	movs	r3, #176	; 0xb0
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	58d0      	ldr	r0, [r2, r3]
 800ba5a:	193b      	adds	r3, r7, r4
 800ba5c:	881d      	ldrh	r5, [r3, #0]
 800ba5e:	000e      	movs	r6, r1
 800ba60:	187c      	adds	r4, r7, r1
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	230b      	movs	r3, #11
 800ba66:	18fb      	adds	r3, r7, r3
 800ba68:	7819      	ldrb	r1, [r3, #0]
 800ba6a:	002b      	movs	r3, r5
 800ba6c:	f7f9 fb8d 	bl	800518a <HAL_PCD_EP_Receive>
 800ba70:	0003      	movs	r3, r0
 800ba72:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba74:	2516      	movs	r5, #22
 800ba76:	197c      	adds	r4, r7, r5
 800ba78:	19bb      	adds	r3, r7, r6
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	0018      	movs	r0, r3
 800ba7e:	f000 f824 	bl	800baca <USBD_Get_USB_Status>
 800ba82:	0003      	movs	r3, r0
 800ba84:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ba86:	197b      	adds	r3, r7, r5
 800ba88:	781b      	ldrb	r3, [r3, #0]
}
 800ba8a:	0018      	movs	r0, r3
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	b007      	add	sp, #28
 800ba90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ba94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800ba9c:	4b02      	ldr	r3, [pc, #8]	; (800baa8 <USBD_static_malloc+0x14>)
}
 800ba9e:	0018      	movs	r0, r3
 800baa0:	46bd      	mov	sp, r7
 800baa2:	b002      	add	sp, #8
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	20000acc 	.word	0x20000acc

0800baac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]

}
 800bab4:	46c0      	nop			; (mov r8, r8)
 800bab6:	46bd      	mov	sp, r7
 800bab8:	b002      	add	sp, #8
 800baba:	bd80      	pop	{r7, pc}

0800babc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bac0:	f7f6 ffaa 	bl	8002a18 <SystemClock_Config>
}
 800bac4:	46c0      	nop			; (mov r8, r8)
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b084      	sub	sp, #16
 800bace:	af00      	add	r7, sp, #0
 800bad0:	0002      	movs	r2, r0
 800bad2:	1dfb      	adds	r3, r7, #7
 800bad4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad6:	230f      	movs	r3, #15
 800bad8:	18fb      	adds	r3, r7, r3
 800bada:	2200      	movs	r2, #0
 800badc:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800bade:	1dfb      	adds	r3, r7, #7
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d017      	beq.n	800bb16 <USBD_Get_USB_Status+0x4c>
 800bae6:	dc1b      	bgt.n	800bb20 <USBD_Get_USB_Status+0x56>
 800bae8:	2b02      	cmp	r3, #2
 800baea:	d00f      	beq.n	800bb0c <USBD_Get_USB_Status+0x42>
 800baec:	dc18      	bgt.n	800bb20 <USBD_Get_USB_Status+0x56>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d002      	beq.n	800baf8 <USBD_Get_USB_Status+0x2e>
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d005      	beq.n	800bb02 <USBD_Get_USB_Status+0x38>
 800baf6:	e013      	b.n	800bb20 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800baf8:	230f      	movs	r3, #15
 800bafa:	18fb      	adds	r3, r7, r3
 800bafc:	2200      	movs	r2, #0
 800bafe:	701a      	strb	r2, [r3, #0]
    break;
 800bb00:	e013      	b.n	800bb2a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb02:	230f      	movs	r3, #15
 800bb04:	18fb      	adds	r3, r7, r3
 800bb06:	2202      	movs	r2, #2
 800bb08:	701a      	strb	r2, [r3, #0]
    break;
 800bb0a:	e00e      	b.n	800bb2a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb0c:	230f      	movs	r3, #15
 800bb0e:	18fb      	adds	r3, r7, r3
 800bb10:	2201      	movs	r2, #1
 800bb12:	701a      	strb	r2, [r3, #0]
    break;
 800bb14:	e009      	b.n	800bb2a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb16:	230f      	movs	r3, #15
 800bb18:	18fb      	adds	r3, r7, r3
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	701a      	strb	r2, [r3, #0]
    break;
 800bb1e:	e004      	b.n	800bb2a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800bb20:	230f      	movs	r3, #15
 800bb22:	18fb      	adds	r3, r7, r3
 800bb24:	2202      	movs	r2, #2
 800bb26:	701a      	strb	r2, [r3, #0]
    break;
 800bb28:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800bb2a:	230f      	movs	r3, #15
 800bb2c:	18fb      	adds	r3, r7, r3
 800bb2e:	781b      	ldrb	r3, [r3, #0]
}
 800bb30:	0018      	movs	r0, r3
 800bb32:	46bd      	mov	sp, r7
 800bb34:	b004      	add	sp, #16
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <fmodf>:
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	1c06      	adds	r6, r0, #0
 800bb3c:	1c0d      	adds	r5, r1, #0
 800bb3e:	f000 f819 	bl	800bb74 <__ieee754_fmodf>
 800bb42:	1c29      	adds	r1, r5, #0
 800bb44:	1c04      	adds	r4, r0, #0
 800bb46:	1c30      	adds	r0, r6, #0
 800bb48:	f7f5 fae6 	bl	8001118 <__aeabi_fcmpun>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	d10e      	bne.n	800bb6e <fmodf+0x36>
 800bb50:	2100      	movs	r1, #0
 800bb52:	1c28      	adds	r0, r5, #0
 800bb54:	f7f4 fc5a 	bl	800040c <__aeabi_fcmpeq>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d008      	beq.n	800bb6e <fmodf+0x36>
 800bb5c:	f000 f894 	bl	800bc88 <__errno>
 800bb60:	2321      	movs	r3, #33	; 0x21
 800bb62:	2100      	movs	r1, #0
 800bb64:	6003      	str	r3, [r0, #0]
 800bb66:	1c08      	adds	r0, r1, #0
 800bb68:	f7f4 fe1e 	bl	80007a8 <__aeabi_fdiv>
 800bb6c:	1c04      	adds	r4, r0, #0
 800bb6e:	1c20      	adds	r0, r4, #0
 800bb70:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb74 <__ieee754_fmodf>:
 800bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb76:	004b      	lsls	r3, r1, #1
 800bb78:	085f      	lsrs	r7, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d008      	beq.n	800bb90 <__ieee754_fmodf+0x1c>
 800bb7e:	22ff      	movs	r2, #255	; 0xff
 800bb80:	0043      	lsls	r3, r0, #1
 800bb82:	0006      	movs	r6, r0
 800bb84:	085b      	lsrs	r3, r3, #1
 800bb86:	05d2      	lsls	r2, r2, #23
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	da01      	bge.n	800bb90 <__ieee754_fmodf+0x1c>
 800bb8c:	4297      	cmp	r7, r2
 800bb8e:	dd05      	ble.n	800bb9c <__ieee754_fmodf+0x28>
 800bb90:	f7f4 ffd4 	bl	8000b3c <__aeabi_fmul>
 800bb94:	1c01      	adds	r1, r0, #0
 800bb96:	f7f4 fe07 	bl	80007a8 <__aeabi_fdiv>
 800bb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb9c:	42bb      	cmp	r3, r7
 800bb9e:	dbfc      	blt.n	800bb9a <__ieee754_fmodf+0x26>
 800bba0:	0fc4      	lsrs	r4, r0, #31
 800bba2:	07e4      	lsls	r4, r4, #31
 800bba4:	42bb      	cmp	r3, r7
 800bba6:	d103      	bne.n	800bbb0 <__ieee754_fmodf+0x3c>
 800bba8:	4b31      	ldr	r3, [pc, #196]	; (800bc70 <__ieee754_fmodf+0xfc>)
 800bbaa:	0f64      	lsrs	r4, r4, #29
 800bbac:	58e0      	ldr	r0, [r4, r3]
 800bbae:	e7f4      	b.n	800bb9a <__ieee754_fmodf+0x26>
 800bbb0:	4210      	tst	r0, r2
 800bbb2:	d137      	bne.n	800bc24 <__ieee754_fmodf+0xb0>
 800bbb4:	207e      	movs	r0, #126	; 0x7e
 800bbb6:	021a      	lsls	r2, r3, #8
 800bbb8:	4240      	negs	r0, r0
 800bbba:	2a00      	cmp	r2, #0
 800bbbc:	dc2f      	bgt.n	800bc1e <__ieee754_fmodf+0xaa>
 800bbbe:	22ff      	movs	r2, #255	; 0xff
 800bbc0:	05d2      	lsls	r2, r2, #23
 800bbc2:	420a      	tst	r2, r1
 800bbc4:	d134      	bne.n	800bc30 <__ieee754_fmodf+0xbc>
 800bbc6:	227e      	movs	r2, #126	; 0x7e
 800bbc8:	023d      	lsls	r5, r7, #8
 800bbca:	4252      	negs	r2, r2
 800bbcc:	2d00      	cmp	r5, #0
 800bbce:	da2c      	bge.n	800bc2a <__ieee754_fmodf+0xb6>
 800bbd0:	0005      	movs	r5, r0
 800bbd2:	357e      	adds	r5, #126	; 0x7e
 800bbd4:	db2f      	blt.n	800bc36 <__ieee754_fmodf+0xc2>
 800bbd6:	2380      	movs	r3, #128	; 0x80
 800bbd8:	0276      	lsls	r6, r6, #9
 800bbda:	0a76      	lsrs	r6, r6, #9
 800bbdc:	041b      	lsls	r3, r3, #16
 800bbde:	4333      	orrs	r3, r6
 800bbe0:	0015      	movs	r5, r2
 800bbe2:	357e      	adds	r5, #126	; 0x7e
 800bbe4:	db2c      	blt.n	800bc40 <__ieee754_fmodf+0xcc>
 800bbe6:	024d      	lsls	r5, r1, #9
 800bbe8:	2180      	movs	r1, #128	; 0x80
 800bbea:	0a6d      	lsrs	r5, r5, #9
 800bbec:	0409      	lsls	r1, r1, #16
 800bbee:	4329      	orrs	r1, r5
 800bbf0:	1a80      	subs	r0, r0, r2
 800bbf2:	1a5d      	subs	r5, r3, r1
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d129      	bne.n	800bc4c <__ieee754_fmodf+0xd8>
 800bbf8:	2d00      	cmp	r5, #0
 800bbfa:	db00      	blt.n	800bbfe <__ieee754_fmodf+0x8a>
 800bbfc:	002b      	movs	r3, r5
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d0d2      	beq.n	800bba8 <__ieee754_fmodf+0x34>
 800bc02:	2180      	movs	r1, #128	; 0x80
 800bc04:	0409      	lsls	r1, r1, #16
 800bc06:	428b      	cmp	r3, r1
 800bc08:	db27      	blt.n	800bc5a <__ieee754_fmodf+0xe6>
 800bc0a:	0011      	movs	r1, r2
 800bc0c:	317e      	adds	r1, #126	; 0x7e
 800bc0e:	db27      	blt.n	800bc60 <__ieee754_fmodf+0xec>
 800bc10:	4918      	ldr	r1, [pc, #96]	; (800bc74 <__ieee754_fmodf+0x100>)
 800bc12:	327f      	adds	r2, #127	; 0x7f
 800bc14:	1858      	adds	r0, r3, r1
 800bc16:	05d2      	lsls	r2, r2, #23
 800bc18:	4320      	orrs	r0, r4
 800bc1a:	4310      	orrs	r0, r2
 800bc1c:	e7bd      	b.n	800bb9a <__ieee754_fmodf+0x26>
 800bc1e:	3801      	subs	r0, #1
 800bc20:	0052      	lsls	r2, r2, #1
 800bc22:	e7ca      	b.n	800bbba <__ieee754_fmodf+0x46>
 800bc24:	15d8      	asrs	r0, r3, #23
 800bc26:	387f      	subs	r0, #127	; 0x7f
 800bc28:	e7c9      	b.n	800bbbe <__ieee754_fmodf+0x4a>
 800bc2a:	3a01      	subs	r2, #1
 800bc2c:	006d      	lsls	r5, r5, #1
 800bc2e:	e7cd      	b.n	800bbcc <__ieee754_fmodf+0x58>
 800bc30:	15fa      	asrs	r2, r7, #23
 800bc32:	3a7f      	subs	r2, #127	; 0x7f
 800bc34:	e7cc      	b.n	800bbd0 <__ieee754_fmodf+0x5c>
 800bc36:	257e      	movs	r5, #126	; 0x7e
 800bc38:	426d      	negs	r5, r5
 800bc3a:	1a2d      	subs	r5, r5, r0
 800bc3c:	40ab      	lsls	r3, r5
 800bc3e:	e7cf      	b.n	800bbe0 <__ieee754_fmodf+0x6c>
 800bc40:	217e      	movs	r1, #126	; 0x7e
 800bc42:	4249      	negs	r1, r1
 800bc44:	1a89      	subs	r1, r1, r2
 800bc46:	408f      	lsls	r7, r1
 800bc48:	0039      	movs	r1, r7
 800bc4a:	e7d1      	b.n	800bbf0 <__ieee754_fmodf+0x7c>
 800bc4c:	005b      	lsls	r3, r3, #1
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	db01      	blt.n	800bc56 <__ieee754_fmodf+0xe2>
 800bc52:	d0a9      	beq.n	800bba8 <__ieee754_fmodf+0x34>
 800bc54:	006b      	lsls	r3, r5, #1
 800bc56:	3801      	subs	r0, #1
 800bc58:	e7cb      	b.n	800bbf2 <__ieee754_fmodf+0x7e>
 800bc5a:	005b      	lsls	r3, r3, #1
 800bc5c:	3a01      	subs	r2, #1
 800bc5e:	e7d2      	b.n	800bc06 <__ieee754_fmodf+0x92>
 800bc60:	217e      	movs	r1, #126	; 0x7e
 800bc62:	4249      	negs	r1, r1
 800bc64:	1a8a      	subs	r2, r1, r2
 800bc66:	4113      	asrs	r3, r2
 800bc68:	4323      	orrs	r3, r4
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	e795      	b.n	800bb9a <__ieee754_fmodf+0x26>
 800bc6e:	46c0      	nop			; (mov r8, r8)
 800bc70:	0800bef8 	.word	0x0800bef8
 800bc74:	ff800000 	.word	0xff800000

0800bc78 <memset>:
 800bc78:	0003      	movs	r3, r0
 800bc7a:	1882      	adds	r2, r0, r2
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d100      	bne.n	800bc82 <memset+0xa>
 800bc80:	4770      	bx	lr
 800bc82:	7019      	strb	r1, [r3, #0]
 800bc84:	3301      	adds	r3, #1
 800bc86:	e7f9      	b.n	800bc7c <memset+0x4>

0800bc88 <__errno>:
 800bc88:	4b01      	ldr	r3, [pc, #4]	; (800bc90 <__errno+0x8>)
 800bc8a:	6818      	ldr	r0, [r3, #0]
 800bc8c:	4770      	bx	lr
 800bc8e:	46c0      	nop			; (mov r8, r8)
 800bc90:	200001bc 	.word	0x200001bc

0800bc94 <__libc_init_array>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	2600      	movs	r6, #0
 800bc98:	4c0c      	ldr	r4, [pc, #48]	; (800bccc <__libc_init_array+0x38>)
 800bc9a:	4d0d      	ldr	r5, [pc, #52]	; (800bcd0 <__libc_init_array+0x3c>)
 800bc9c:	1b64      	subs	r4, r4, r5
 800bc9e:	10a4      	asrs	r4, r4, #2
 800bca0:	42a6      	cmp	r6, r4
 800bca2:	d109      	bne.n	800bcb8 <__libc_init_array+0x24>
 800bca4:	2600      	movs	r6, #0
 800bca6:	f000 f823 	bl	800bcf0 <_init>
 800bcaa:	4c0a      	ldr	r4, [pc, #40]	; (800bcd4 <__libc_init_array+0x40>)
 800bcac:	4d0a      	ldr	r5, [pc, #40]	; (800bcd8 <__libc_init_array+0x44>)
 800bcae:	1b64      	subs	r4, r4, r5
 800bcb0:	10a4      	asrs	r4, r4, #2
 800bcb2:	42a6      	cmp	r6, r4
 800bcb4:	d105      	bne.n	800bcc2 <__libc_init_array+0x2e>
 800bcb6:	bd70      	pop	{r4, r5, r6, pc}
 800bcb8:	00b3      	lsls	r3, r6, #2
 800bcba:	58eb      	ldr	r3, [r5, r3]
 800bcbc:	4798      	blx	r3
 800bcbe:	3601      	adds	r6, #1
 800bcc0:	e7ee      	b.n	800bca0 <__libc_init_array+0xc>
 800bcc2:	00b3      	lsls	r3, r6, #2
 800bcc4:	58eb      	ldr	r3, [r5, r3]
 800bcc6:	4798      	blx	r3
 800bcc8:	3601      	adds	r6, #1
 800bcca:	e7f2      	b.n	800bcb2 <__libc_init_array+0x1e>
 800bccc:	0800bf00 	.word	0x0800bf00
 800bcd0:	0800bf00 	.word	0x0800bf00
 800bcd4:	0800bf04 	.word	0x0800bf04
 800bcd8:	0800bf00 	.word	0x0800bf00

0800bcdc <memcpy>:
 800bcdc:	2300      	movs	r3, #0
 800bcde:	b510      	push	{r4, lr}
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d100      	bne.n	800bce6 <memcpy+0xa>
 800bce4:	bd10      	pop	{r4, pc}
 800bce6:	5ccc      	ldrb	r4, [r1, r3]
 800bce8:	54c4      	strb	r4, [r0, r3]
 800bcea:	3301      	adds	r3, #1
 800bcec:	e7f8      	b.n	800bce0 <memcpy+0x4>
	...

0800bcf0 <_init>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	46c0      	nop			; (mov r8, r8)
 800bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf6:	bc08      	pop	{r3}
 800bcf8:	469e      	mov	lr, r3
 800bcfa:	4770      	bx	lr

0800bcfc <_fini>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	46c0      	nop			; (mov r8, r8)
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr
